(* AUTO-GENERATED by c2ocaml plugin 1.0 *)

open Lsee;;
open Utils;;
open State;;
open Driver;;
open Blocks;;
open Actions;;
open GccTypes;;
open Procedures;;
open Expressions;;


let main = 
(*-------------------------------------------------------- 
  // working_directory: /target/hexchat/build
  // source_file_name: ../src/common/server.c
  // base_name: server.c
  // name: server_cleanup
  // fid: 999
  ---------------------------------------------------------*)

  let _typeSELF = GccType.pointer(GccType.self)
  in let type0x7f9e66d6c5e8 = 
    GccType.integer(true, 32, 32, Z.of_string "-2147483648", Z.of_string "2147483647")
  in let type0x7f9e65407e70 = 
    GccType.record("SSL", [|
        (* var decls *)
      |], [|
        (* field decls *)
      |], [|
        (* type decls *)
      |], [|
        (* const decls *)
      |])
  in let type0x7f9e64e53498 = 
    GccType.pointer(type0x7f9e65407e70)
  in let type0x7f9e66d6c348 = 
    GccType.integer(false, 8, 8, Z.of_string "0", Z.of_string "255")
  in let type0x7f9e66d6cf18 = 
    GccType.void
  in let type0x7f9e64bb9000 = 
    GccType.record("server", [|
        (* var decls *)
      |], [|
        (* field decls *)
      |], [|
        (* type decls *)
      |], [|
        (* const decls *)
      |])
  in let type0x7f9e64bc1000 = 
    GccType.pointer(type0x7f9e64bb9000)
  in let type0x7f9e66d6c738 = 
    GccType.integer(true, 64, 64, Z.of_string "-9223372036854775808", Z.of_string "9223372036854775807")
  in let type0x7f9e660dc690 = 
    GccType.integer(false, 1, 8, Z.of_string "0", Z.of_string "1")
  in let expr0x7f9e64908048 = 
    Expr.ssa("_1", 1, Expr.nothing(type0x7f9e66d6c5e8))
  in let expr0x7f9e66d71078 = 
    Expr.s_int_cst(type0x7f9e66d6c5e8, Z.of_string "0")
  in let expr0x7f9e649080d8 = 
    Expr.ssa("_3", 3, Expr.nothing(type0x7f9e66d6c5e8))
  in let expr0x7f9e64908168 = 
    Expr.ssa("_5", 5, Expr.nothing(type0x7f9e64e53498))
  in let expr0x7f9e6484ea20 = 
    Expr.u_int_cst(type0x7f9e64e53498, Z.of_string "0")
  in let expr0x7f9e64908288 = 
    Expr.ssa("_9", 9, Expr.nothing(type0x7f9e66d6c348))
  in let expr0x7f9e66d54df8 = 
    Expr.u_int_cst(type0x7f9e66d6c348, Z.of_string "0")
  in let expr0x7f9e64908318 = 
    Expr.ssa("_11", 11, Expr.nothing(type0x7f9e66d6c5e8))
  in let expr0x7f9e66d710c0 = 
    Expr.s_int_cst(type0x7f9e66d6c5e8, Z.of_string "-1")
  in let expr0x7f9e649083a8 = 
    Expr.ssa("_13", 13, Expr.nothing(type0x7f9e66d6c5e8))
  in let expr0x7f9e64908438 = 
    Expr.ssa("_15", 15, Expr.nothing(type0x7f9e66d6c5e8))
  in let expr0x7f9e64908510 = 
    Expr.ssa("_18", 18, Expr.nothing(type0x7f9e66d6c348))
  in let expr0x7f9e649085a0 = 
    Expr.ssa("_20", 20, Expr.nothing(type0x7f9e66d6c5e8))
  in let expr0x7f9e64908630 = 
    Expr.ssa("_22", 22, Expr.nothing(type0x7f9e66d6c5e8))
  in let expr0x7f9e649d27e0 = 
    Expr.ssa("_24", 24, Expr.nothing(type0x7f9e66d6c5e8))
  in let expr0x7f9e649d6168 = 
    Expr.ssa("_57", 57, Expr.nothing(type0x7f9e66d6c5e8))
  in let expr0x7f9e649d2f78 = 
    Expr.ssa("_51", 51, Expr.nothing(type0x7f9e66d6c5e8))
  in let expr0x7f9e649d2e10 = 
    Expr.ssa("_46", 46, Expr.nothing(type0x7f9e66d6c5e8))
  in let expr0x7f9e649d2d38 = 
    Expr.ssa("_43", 43, Expr.nothing(type0x7f9e66d6c5e8))
  in let expr0x7f9e6487b980 = 
    Expr.parameter_decl(type0x7f9e64bc1000, "serv", type0x7f9e64bc1000)
  in let expr0x7f9e649d2ab0 = 
    Expr.ssa("serv_34(D)", 34, expr0x7f9e6487b980)
  in let expr0x7f9e66eaffc0 = 
    Expr.s_int_cst(type0x7f9e66d6c738, Z.of_string "0")
  in let expr0x7f9e64ba47b8 = 
    Expr.field_decl(type0x7f9e66d6c5e8, FieldDecl.make("iotag", "32", 32, "368", 128, 0, false))
  in let expr0x7f9e648dcd38 = 
    Expr.u_int_cst(type0x7f9e64bc1000, Z.of_string "0")
  in let expr0x7f9e64906c08 = 
    Expr.memory_ref(type0x7f9e64bb9000, expr0x7f9e649d2ab0, expr0x7f9e648dcd38)
  in let expr0x7f9e648f37e0 = 
    Expr.component_ref(type0x7f9e66d6c5e8, expr0x7f9e64906c08, expr0x7f9e64ba47b8)
  in let expr0x7f9e64908090 = 
    Expr.ssa("_2", 2, Expr.nothing(type0x7f9e66d6c5e8))
  in let expr0x7f9e64906c80 = 
    Expr.memory_ref(type0x7f9e64bb9000, expr0x7f9e649d2ab0, expr0x7f9e648dcd38)
  in let expr0x7f9e648f3810 = 
    Expr.component_ref(type0x7f9e66d6c5e8, expr0x7f9e64906c80, expr0x7f9e64ba47b8)
  in let expr0x7f9e64906cd0 = 
    Expr.memory_ref(type0x7f9e64bb9000, expr0x7f9e649d2ab0, expr0x7f9e648dcd38)
  in let expr0x7f9e6487fea0 = 
    Expr.component_ref(type0x7f9e66d6c5e8, expr0x7f9e64906cd0, expr0x7f9e64ba47b8)
  in let expr0x7f9e64ba48e8 = 
    Expr.field_decl(type0x7f9e66d6c5e8, FieldDecl.make("joindelay_tag", "32", 32, "368", 128, 64, false))
  in let expr0x7f9e64906d20 = 
    Expr.memory_ref(type0x7f9e64bb9000, expr0x7f9e649d2ab0, expr0x7f9e648dcd38)
  in let expr0x7f9e648f3840 = 
    Expr.component_ref(type0x7f9e66d6c5e8, expr0x7f9e64906d20, expr0x7f9e64ba48e8)
  in let expr0x7f9e64908120 = 
    Expr.ssa("_4", 4, Expr.nothing(type0x7f9e66d6c5e8))
  in let expr0x7f9e64906d98 = 
    Expr.memory_ref(type0x7f9e64bb9000, expr0x7f9e649d2ab0, expr0x7f9e648dcd38)
  in let expr0x7f9e648f3870 = 
    Expr.component_ref(type0x7f9e66d6c5e8, expr0x7f9e64906d98, expr0x7f9e64ba48e8)
  in let expr0x7f9e64906de8 = 
    Expr.memory_ref(type0x7f9e64bb9000, expr0x7f9e649d2ab0, expr0x7f9e648dcd38)
  in let expr0x7f9e6487ff60 = 
    Expr.component_ref(type0x7f9e66d6c5e8, expr0x7f9e64906de8, expr0x7f9e64ba48e8)
  in let expr0x7f9e64ba44c0 = 
    Expr.field_decl(type0x7f9e64e53498, FieldDecl.make("ssl", "64", 64, "336", 128, 64, false))
  in let expr0x7f9e64906e38 = 
    Expr.memory_ref(type0x7f9e64bb9000, expr0x7f9e649d2ab0, expr0x7f9e648dcd38)
  in let expr0x7f9e648f38a0 = 
    Expr.component_ref(type0x7f9e64e53498, expr0x7f9e64906e38, expr0x7f9e64ba44c0)
  in let expr0x7f9e649081b0 = 
    Expr.ssa("_6", 6, Expr.nothing(type0x7f9e64e53498))
  in let expr0x7f9e64906eb0 = 
    Expr.memory_ref(type0x7f9e64bb9000, expr0x7f9e649d2ab0, expr0x7f9e648dcd38)
  in let expr0x7f9e648f38d0 = 
    Expr.component_ref(type0x7f9e64e53498, expr0x7f9e64906eb0, expr0x7f9e64ba44c0)
  in let expr0x7f9e649081f8 = 
    Expr.ssa("_7", 7, Expr.nothing(type0x7f9e64e53498))
  in let expr0x7f9e64906f28 = 
    Expr.memory_ref(type0x7f9e64bb9000, expr0x7f9e649d2ab0, expr0x7f9e648dcd38)
  in let expr0x7f9e648f3900 = 
    Expr.component_ref(type0x7f9e64e53498, expr0x7f9e64906f28, expr0x7f9e64ba44c0)
  in let expr0x7f9e64906f78 = 
    Expr.memory_ref(type0x7f9e64bb9000, expr0x7f9e649d2ab0, expr0x7f9e648dcd38)
  in let expr0x7f9e6488b060 = 
    Expr.component_ref(type0x7f9e64e53498, expr0x7f9e64906f78, expr0x7f9e64ba44c0)
  in let expr0x7f9e64908240 = 
    Expr.ssa("_8", 8, Expr.nothing(type0x7f9e66d6c348))
  in let expr0x7f9e64906fc8 = 
    Expr.memory_ref(type0x7f9e64bb9000, expr0x7f9e649d2ab0, expr0x7f9e648dcd38)
  in let expr0x7f9e648f3930 = 
    Expr.bitfield_ref(type0x7f9e66d6c348, expr0x7f9e64906fc8, 8, 24512)
  in let expr0x7f9e64875468 = 
    Expr.u_int_cst(type0x7f9e66d6c348, Z.of_string "4")
  in let expr0x7f9e649082d0 = 
    Expr.ssa("_10", 10, Expr.nothing(type0x7f9e66d6c5e8))
  in let expr0x7f9e64ba4000 = 
    Expr.field_decl(type0x7f9e66d6c5e8, FieldDecl.make("sok4", "32", 32, "304", 128, 0, false))
  in let expr0x7f9e64906668 = 
    Expr.memory_ref(type0x7f9e64bb9000, expr0x7f9e649d2ab0, expr0x7f9e648dcd38)
  in let expr0x7f9e648f3960 = 
    Expr.component_ref(type0x7f9e66d6c5e8, expr0x7f9e64906668, expr0x7f9e64ba4000)
  in let expr0x7f9e64ba4260 = 
    Expr.field_decl(type0x7f9e66d6c5e8, FieldDecl.make("proxy_sok4", "32", 32, "320", 128, 0, false))
  in let expr0x7f9e64906758 = 
    Expr.memory_ref(type0x7f9e64bb9000, expr0x7f9e649d2ab0, expr0x7f9e648dcd38)
  in let expr0x7f9e648f3990 = 
    Expr.component_ref(type0x7f9e66d6c5e8, expr0x7f9e64906758, expr0x7f9e64ba4260)
  in let expr0x7f9e64908360 = 
    Expr.ssa("_12", 12, Expr.nothing(type0x7f9e66d6c5e8))
  in let expr0x7f9e64906ac8 = 
    Expr.memory_ref(type0x7f9e64bb9000, expr0x7f9e649d2ab0, expr0x7f9e648dcd38)
  in let expr0x7f9e648f39c0 = 
    Expr.component_ref(type0x7f9e66d6c5e8, expr0x7f9e64906ac8, expr0x7f9e64ba4260)
  in let expr0x7f9e64ba4098 = 
    Expr.field_decl(type0x7f9e66d6c5e8, FieldDecl.make("sok6", "32", 32, "304", 128, 32, false))
  in let expr0x7f9e64906ca8 = 
    Expr.memory_ref(type0x7f9e64bb9000, expr0x7f9e649d2ab0, expr0x7f9e648dcd38)
  in let expr0x7f9e648f39f0 = 
    Expr.component_ref(type0x7f9e66d6c5e8, expr0x7f9e64906ca8, expr0x7f9e64ba4098)
  in let expr0x7f9e649083f0 = 
    Expr.ssa("_14", 14, Expr.nothing(type0x7f9e66d6c5e8))
  in let expr0x7f9e64906dc0 = 
    Expr.memory_ref(type0x7f9e64bb9000, expr0x7f9e649d2ab0, expr0x7f9e648dcd38)
  in let expr0x7f9e648f3a20 = 
    Expr.component_ref(type0x7f9e66d6c5e8, expr0x7f9e64906dc0, expr0x7f9e64ba4098)
  in let expr0x7f9e64ba42f8 = 
    Expr.field_decl(type0x7f9e66d6c5e8, FieldDecl.make("proxy_sok6", "32", 32, "320", 128, 32, false))
  in let expr0x7f9e64906ed8 = 
    Expr.memory_ref(type0x7f9e64bb9000, expr0x7f9e649d2ab0, expr0x7f9e648dcd38)
  in let expr0x7f9e648f3a50 = 
    Expr.component_ref(type0x7f9e66d6c5e8, expr0x7f9e64906ed8, expr0x7f9e64ba42f8)
  in let expr0x7f9e64908480 = 
    Expr.ssa("_16", 16, Expr.nothing(type0x7f9e66d6c5e8))
  in let expr0x7f9e6490d000 = 
    Expr.memory_ref(type0x7f9e64bb9000, expr0x7f9e649d2ab0, expr0x7f9e648dcd38)
  in let expr0x7f9e648f3a80 = 
    Expr.component_ref(type0x7f9e66d6c5e8, expr0x7f9e6490d000, expr0x7f9e64ba42f8)
  in let expr0x7f9e66d71090 = 
    Expr.s_int_cst(type0x7f9e66d6c5e8, Z.of_string "1")
  in let expr0x7f9e649084c8 = 
    Expr.ssa("_17", 17, Expr.nothing(type0x7f9e66d6c348))
  in let expr0x7f9e6490d078 = 
    Expr.memory_ref(type0x7f9e64bb9000, expr0x7f9e649d2ab0, expr0x7f9e648dcd38)
  in let expr0x7f9e648f3ab0 = 
    Expr.bitfield_ref(type0x7f9e66d6c348, expr0x7f9e6490d078, 8, 24512)
  in let expr0x7f9e64875450 = 
    Expr.u_int_cst(type0x7f9e66d6c348, Z.of_string "2")
  in let expr0x7f9e64908558 = 
    Expr.ssa("_19", 19, Expr.nothing(type0x7f9e66d6c5e8))
  in let expr0x7f9e64ba0ed8 = 
    Expr.field_decl(type0x7f9e66d6c5e8, FieldDecl.make("sok", "32", 32, "288", 128, 96, false))
  in let expr0x7f9e6490d140 = 
    Expr.memory_ref(type0x7f9e64bb9000, expr0x7f9e649d2ab0, expr0x7f9e648dcd38)
  in let expr0x7f9e648f3ae0 = 
    Expr.component_ref(type0x7f9e66d6c5e8, expr0x7f9e6490d140, expr0x7f9e64ba0ed8)
  in let expr0x7f9e64ba41c8 = 
    Expr.field_decl(type0x7f9e66d6c5e8, FieldDecl.make("proxy_sok", "32", 32, "304", 128, 96, false))
  in let expr0x7f9e6490d1b8 = 
    Expr.memory_ref(type0x7f9e64bb9000, expr0x7f9e649d2ab0, expr0x7f9e648dcd38)
  in let expr0x7f9e648f3b10 = 
    Expr.component_ref(type0x7f9e66d6c5e8, expr0x7f9e6490d1b8, expr0x7f9e64ba41c8)
  in let expr0x7f9e649085e8 = 
    Expr.ssa("_21", 21, Expr.nothing(type0x7f9e66d6c5e8))
  in let expr0x7f9e6490d230 = 
    Expr.memory_ref(type0x7f9e64bb9000, expr0x7f9e649d2ab0, expr0x7f9e648dcd38)
  in let expr0x7f9e648f3b40 = 
    Expr.component_ref(type0x7f9e66d6c5e8, expr0x7f9e6490d230, expr0x7f9e64ba41c8)
  in let expr0x7f9e64ba8098 = 
    Expr.field_decl(type0x7f9e660dc690, FieldDecl.make("connected", "1", 1, "3056", 128, 65, true))
  in let expr0x7f9e6490d280 = 
    Expr.memory_ref(type0x7f9e64bb9000, expr0x7f9e649d2ab0, expr0x7f9e648dcd38)
  in let expr0x7f9e6488b480 = 
    Expr.component_ref(type0x7f9e660dc690, expr0x7f9e6490d280, expr0x7f9e64ba8098)
  in let expr0x7f9e660bd978 = 
    Expr.u_int_cst(type0x7f9e660dc690, Z.of_string "0")
  in let expr0x7f9e64ba84c0 = 
    Expr.field_decl(type0x7f9e660dc690, FieldDecl.make("end_of_motd", "1", 1, "3056", 128, 72, true))
  in let expr0x7f9e6490d2a8 = 
    Expr.memory_ref(type0x7f9e64bb9000, expr0x7f9e649d2ab0, expr0x7f9e648dcd38)
  in let expr0x7f9e6488b4b0 = 
    Expr.component_ref(type0x7f9e660dc690, expr0x7f9e6490d2a8, expr0x7f9e64ba84c0)
  in let expr0x7f9e66d713d8 = 
    Expr.s_int_cst(type0x7f9e66d6c5e8, Z.of_string "2")
  in let expr0x7f9e64ba4850 = 
    Expr.field_decl(type0x7f9e66d6c5e8, FieldDecl.make("recondelay_tag", "32", 32, "368", 128, 32, false))
  in let expr0x7f9e6490d2f8 = 
    Expr.memory_ref(type0x7f9e64bb9000, expr0x7f9e649d2ab0, expr0x7f9e648dcd38)
  in let expr0x7f9e648f3b70 = 
    Expr.component_ref(type0x7f9e66d6c5e8, expr0x7f9e6490d2f8, expr0x7f9e64ba4850)
  in let expr0x7f9e64908678 = 
    Expr.ssa("_23", 23, Expr.nothing(type0x7f9e66d6c5e8))
  in let expr0x7f9e6490d370 = 
    Expr.memory_ref(type0x7f9e64bb9000, expr0x7f9e649d2ab0, expr0x7f9e648dcd38)
  in let expr0x7f9e648f3ba0 = 
    Expr.component_ref(type0x7f9e66d6c5e8, expr0x7f9e6490d370, expr0x7f9e64ba4850)
  in let expr0x7f9e6490d3c0 = 
    Expr.memory_ref(type0x7f9e64bb9000, expr0x7f9e649d2ab0, expr0x7f9e648dcd38)
  in let expr0x7f9e6488b570 = 
    Expr.component_ref(type0x7f9e66d6c5e8, expr0x7f9e6490d3c0, expr0x7f9e64ba4850)
  in let expr0x7f9e66d710a8 = 
    Expr.s_int_cst(type0x7f9e66d6c5e8, Z.of_string "3")
  in let call0x7f9e648f95a0 = Expr.call(
    type0x7f9e66d6cf18,
    "fe_set_lag", [|
      (Expr.parameter("p1", 0, expr0x7f9e649d2ab0));
      (Expr.parameter("p2", 1, expr0x7f9e66eaffc0));
  |])
  in let call0x7f9e648f9630 = Expr.call(
    type0x7f9e66d6cf18,
    "fe_input_remove", [|
      (Expr.parameter("p1", 0, expr0x7f9e64908090));
  |])
  in let call0x7f9e648f96c0 = Expr.call(
    type0x7f9e66d6cf18,
    "fe_timeout_remove", [|
      (Expr.parameter("p1", 0, expr0x7f9e64908120));
  |])
  in let call0x7f9e648f9750 = Expr.call(
    type0x7f9e66d6c5e8,
    "SSL_shutdown", [|
      (Expr.parameter("p1", 0, expr0x7f9e649081b0));
  |])
  in let call0x7f9e648f97e0 = Expr.call(
    type0x7f9e66d6cf18,
    "SSL_free", [|
      (Expr.parameter("p1", 0, expr0x7f9e649081f8));
  |])
  in let call0x7f9e648f9870 = Expr.call(
    type0x7f9e66d6cf18,
    "server_stopconnecting", [|
      (Expr.parameter("serv", 0, expr0x7f9e649d2ab0));
  |])
  in let call0x7f9e648f9900 = Expr.call(
    type0x7f9e66d6c5e8,
    "close", [|
      (Expr.parameter("p1", 0, expr0x7f9e649082d0));
  |])
  in let call0x7f9e648f9990 = Expr.call(
    type0x7f9e66d6c5e8,
    "close", [|
      (Expr.parameter("p1", 0, expr0x7f9e64908360));
  |])
  in let call0x7f9e648f9a20 = Expr.call(
    type0x7f9e66d6c5e8,
    "close", [|
      (Expr.parameter("p1", 0, expr0x7f9e649083f0));
  |])
  in let call0x7f9e648f9ab0 = Expr.call(
    type0x7f9e66d6c5e8,
    "close", [|
      (Expr.parameter("p1", 0, expr0x7f9e64908480));
  |])
  in let call0x7f9e648f9bd0 = Expr.call(
    type0x7f9e66d6cf18,
    "close_socket", [|
      (Expr.parameter("sok", 0, expr0x7f9e64908558));
  |])
  in let call0x7f9e648f9c60 = Expr.call(
    type0x7f9e66d6cf18,
    "close_socket", [|
      (Expr.parameter("sok", 0, expr0x7f9e649085e8));
  |])
  in let call0x7f9e648f9cf0 = Expr.call(
    type0x7f9e66d6cf18,
    "fe_timeout_remove", [|
      (Expr.parameter("p1", 0, expr0x7f9e64908678));
  |])
  in let block_0 = 
    let step_0_0 = Action.start 
    in Block.block (
      0,
      [| step_0_0 |],
      [||],
      [| "<ENTRY>" |]
    )
  in let block_2 = 
    let step_2_1 = 
      Action.call(call0x7f9e648f95a0)
    in let step_2_2 = 
      Action.assign(expr0x7f9e64908048, expr0x7f9e648f37e0)
    in Block.block(
      2,
      [|
        step_2_1;
        step_2_2;
      |],
      [|
        ("fe_set_lag", 1);
      |],
      [|
        "# .MEM_35 = VDEF <.MEM_33(D)>\nfe_set_lag (serv_34(D), 0);";
        "# VUSE <.MEM_35>\n_1 = serv_34(D)->iotag;";
      |]
    )
  in let block_3 = 
    let step_3_3 = 
      Action.assume(2, Expr.bneq(GccType.boolean, expr0x7f9e64908048, expr0x7f9e66d71078))
    in let step_3_4 = 
      Action.assign(expr0x7f9e64908090, expr0x7f9e648f3810)
    in let step_3_5 = 
      Action.call(call0x7f9e648f9630)
    in let step_3_6 = 
      Action.assign(expr0x7f9e6487fea0, expr0x7f9e66d71078)
    in Block.block(
      3,
      [|
        step_3_3;
        step_3_4;
        step_3_5;
        step_3_6;
      |],
      [|
        ("fe_input_remove", 1);
      |],
      [|
        "assume TRUE (_1 != 0)";
        "# VUSE <.MEM_35>\n_2 = serv_34(D)->iotag;";
        "# .MEM_36 = VDEF <.MEM_35>\nfe_input_remove (_2);";
        "# .MEM_37 = VDEF <.MEM_36>\nserv_34(D)->iotag = 0;";
      |]
    )
  in let block_4 = 
    let step_4_7 = 
      Action.assume(2, Expr.beq(GccType.boolean, expr0x7f9e64908048, expr0x7f9e66d71078))
    in let step_4_8 = 
      Action.assign(expr0x7f9e649080d8, expr0x7f9e648f3840)
    in Block.block(
      4,
      [|
        step_4_7;
        step_4_8;
      |],
      [|
        (* no calls *)
      |],
      [|
        "assume FALSE (_1 != 0)";
        "# VUSE <.MEM_25>\n_3 = serv_34(D)->joindelay_tag;";
      |]
    )
  in let block_5 = 
    let step_5_9 = 
      Action.assume(4, Expr.bneq(GccType.boolean, expr0x7f9e649080d8, expr0x7f9e66d71078))
    in let step_5_10 = 
      Action.assign(expr0x7f9e64908120, expr0x7f9e648f3870)
    in let step_5_11 = 
      Action.call(call0x7f9e648f96c0)
    in let step_5_12 = 
      Action.assign(expr0x7f9e6487ff60, expr0x7f9e66d71078)
    in Block.block(
      5,
      [|
        step_5_9;
        step_5_10;
        step_5_11;
        step_5_12;
      |],
      [|
        ("fe_timeout_remove", 1);
      |],
      [|
        "assume TRUE (_3 != 0)";
        "# VUSE <.MEM_25>\n_4 = serv_34(D)->joindelay_tag;";
        "# .MEM_38 = VDEF <.MEM_25>\nfe_timeout_remove (_4);";
        "# .MEM_39 = VDEF <.MEM_38>\nserv_34(D)->joindelay_tag = 0;";
      |]
    )
  in let block_6 = 
    let step_6_13 = 
      Action.assume(4, Expr.beq(GccType.boolean, expr0x7f9e649080d8, expr0x7f9e66d71078))
    in let step_6_14 = 
      Action.assign(expr0x7f9e64908168, expr0x7f9e648f38a0)
    in Block.block(
      6,
      [|
        step_6_13;
        step_6_14;
      |],
      [|
        (* no calls *)
      |],
      [|
        "assume FALSE (_3 != 0)";
        "# VUSE <.MEM_26>\n_5 = serv_34(D)->ssl;";
      |]
    )
  in let block_7 = 
    let step_7_15 = 
      Action.assume(6, Expr.bneq(GccType.boolean, expr0x7f9e64908168, expr0x7f9e6484ea20))
    in let step_7_16 = 
      Action.assign(expr0x7f9e649081b0, expr0x7f9e648f38d0)
    in let step_7_17 = 
      Action.call(call0x7f9e648f9750)
    in let step_7_18 = 
      Action.assign(expr0x7f9e649081f8, expr0x7f9e648f3900)
    in let step_7_19 = 
      Action.call(call0x7f9e648f97e0)
    in let step_7_20 = 
      Action.assign(expr0x7f9e6488b060, expr0x7f9e6484ea20)
    in Block.block(
      7,
      [|
        step_7_15;
        step_7_16;
        step_7_17;
        step_7_18;
        step_7_19;
        step_7_20;
      |],
      [|
        ("SSL_free", 1);
        ("SSL_shutdown", 1);
      |],
      [|
        "assume TRUE (_5 != 0B)";
        "# VUSE <.MEM_26>\n_6 = serv_34(D)->ssl;";
        "# .MEM_40 = VDEF <.MEM_26>\nSSL_shutdown (_6);";
        "# VUSE <.MEM_40>\n_7 = serv_34(D)->ssl;";
        "# .MEM_41 = VDEF <.MEM_40>\nSSL_free (_7);";
        "# .MEM_42 = VDEF <.MEM_41>\nserv_34(D)->ssl = 0B;";
      |]
    )
  in let block_8 = 
    let step_8_21 = 
      Action.assume(6, Expr.beq(GccType.boolean, expr0x7f9e64908168, expr0x7f9e6484ea20))
    in let step_8_22 = 
      Action.assign(expr0x7f9e64908240, expr0x7f9e648f3930)
    in let step_8_23 = 
      Action.assign(expr0x7f9e64908288, Expr.bit_and(
        type0x7f9e66d6c348, expr0x7f9e64908240, expr0x7f9e64875468))
    in Block.block(
      8,
      [|
        step_8_21;
        step_8_22;
        step_8_23;
      |],
      [|
        (* no calls *)
      |],
      [|
        "assume FALSE (_5 != 0B)";
        "# VUSE <.MEM_27>\n_8 = BIT_FIELD_REF <*serv_34(D), 8, 24512>;";
        "_9 = _8 & 4;";
      |]
    )
  in let block_9 = 
    let step_9_24 = 
      Action.assume(8, Expr.bneq(GccType.boolean, expr0x7f9e64908288, expr0x7f9e66d54df8))
    in let step_9_25 = 
      Action.call(call0x7f9e648f9870)
    in let step_9_26 = 
      Action.assign(expr0x7f9e649082d0, expr0x7f9e648f3960)
    in let step_9_27 = 
      Action.call(call0x7f9e648f9900)
    in let step_9_28 = 
      Action.assign(expr0x7f9e64908318, expr0x7f9e648f3990)
    in Block.block(
      9,
      [|
        step_9_24;
        step_9_25;
        step_9_26;
        step_9_27;
        step_9_28;
      |],
      [|
        ("close", 1);
        ("server_stopconnecting", 1);
      |],
      [|
        "assume TRUE (_9 != 0)";
        "# .MEM_52 = VDEF <.MEM_27>\nserver_stopconnecting (serv_34(D));";
        "# VUSE <.MEM_52>\n_10 = serv_34(D)->sok4;";
        "# .MEM_53 = VDEF <.MEM_52>\nclose (_10);";
        "# VUSE <.MEM_53>\n_11 = serv_34(D)->proxy_sok4;";
      |]
    )
  in let block_10 = 
    let step_10_29 = 
      Action.assume(9, Expr.bneq(GccType.boolean, expr0x7f9e64908318, expr0x7f9e66d710c0))
    in let step_10_30 = 
      Action.assign(expr0x7f9e64908360, expr0x7f9e648f39c0)
    in let step_10_31 = 
      Action.call(call0x7f9e648f9990)
    in Block.block(
      10,
      [|
        step_10_29;
        step_10_30;
        step_10_31;
      |],
      [|
        ("close", 1);
      |],
      [|
        "assume TRUE (_11 != -1)";
        "# VUSE <.MEM_53>\n_12 = serv_34(D)->proxy_sok4;";
        "# .MEM_54 = VDEF <.MEM_53>\nclose (_12);";
      |]
    )
  in let block_11 = 
    let step_11_32 = 
      Action.assume(9, Expr.beq(GccType.boolean, expr0x7f9e64908318, expr0x7f9e66d710c0))
    in let step_11_33 = 
      Action.assign(expr0x7f9e649083a8, expr0x7f9e648f39f0)
    in Block.block(
      11,
      [|
        step_11_32;
        step_11_33;
      |],
      [|
        (* no calls *)
      |],
      [|
        "assume FALSE (_11 != -1)";
        "# VUSE <.MEM_28>\n_13 = serv_34(D)->sok6;";
      |]
    )
  in let block_12 = 
    let step_12_34 = 
      Action.assume(11, Expr.bneq(GccType.boolean, expr0x7f9e649083a8, expr0x7f9e66d710c0))
    in let step_12_35 = 
      Action.assign(expr0x7f9e649083f0, expr0x7f9e648f3a20)
    in let step_12_36 = 
      Action.call(call0x7f9e648f9a20)
    in Block.block(
      12,
      [|
        step_12_34;
        step_12_35;
        step_12_36;
      |],
      [|
        ("close", 1);
      |],
      [|
        "assume TRUE (_13 != -1)";
        "# VUSE <.MEM_28>\n_14 = serv_34(D)->sok6;";
        "# .MEM_55 = VDEF <.MEM_28>\nclose (_14);";
      |]
    )
  in let block_13 = 
    let step_13_37 = 
      Action.assume(11, Expr.beq(GccType.boolean, expr0x7f9e649083a8, expr0x7f9e66d710c0))
    in let step_13_38 = 
      Action.assign(expr0x7f9e64908438, expr0x7f9e648f3a50)
    in Block.block(
      13,
      [|
        step_13_37;
        step_13_38;
      |],
      [|
        (* no calls *)
      |],
      [|
        "assume FALSE (_13 != -1)";
        "# VUSE <.MEM_29>\n_15 = serv_34(D)->proxy_sok6;";
      |]
    )
  in let block_14 = 
    let step_14_39 = 
      Action.assume(13, Expr.bneq(GccType.boolean, expr0x7f9e64908438, expr0x7f9e66d710c0))
    in let step_14_40 = 
      Action.assign(expr0x7f9e64908480, expr0x7f9e648f3a80)
    in let step_14_41 = 
      Action.call(call0x7f9e648f9ab0)
    in Block.block(
      14,
      [|
        step_14_39;
        step_14_40;
        step_14_41;
      |],
      [|
        ("close", 1);
      |],
      [|
        "assume TRUE (_15 != -1)";
        "# VUSE <.MEM_29>\n_16 = serv_34(D)->proxy_sok6;";
        "# .MEM_56 = VDEF <.MEM_29>\nclose (_16);";
      |]
    )
  in let block_15 = 
    let step_15_42 = 
      Action.assume(13, Expr.beq(GccType.boolean, expr0x7f9e64908438, expr0x7f9e66d710c0))
    in let step_15_43 = 
      Action.assign(expr0x7f9e649d6168, expr0x7f9e66d71090)
    in let step_15_44 = 
      Action.assign(expr0x7f9e649d27e0, expr0x7f9e649d6168)
    in Block.block(
      15,
      [|
        step_15_42;
        step_15_43;
        step_15_44;
      |],
      [|
        (* no calls *)
      |],
      [|
        "assume FALSE (_15 != -1)";
        "_57 = 1;";
        "_24 = _57";
      |]
    )
  in let block_16 = 
    let step_16_45 = 
      Action.assume(8, Expr.beq(GccType.boolean, expr0x7f9e64908288, expr0x7f9e66d54df8))
    in let step_16_46 = 
      Action.assign(expr0x7f9e649084c8, expr0x7f9e648f3ab0)
    in let step_16_47 = 
      Action.assign(expr0x7f9e64908510, Expr.bit_and(
        type0x7f9e66d6c348, expr0x7f9e649084c8, expr0x7f9e64875450))
    in Block.block(
      16,
      [|
        step_16_45;
        step_16_46;
        step_16_47;
      |],
      [|
        (* no calls *)
      |],
      [|
        "assume FALSE (_9 != 0)";
        "# VUSE <.MEM_27>\n_17 = BIT_FIELD_REF <*serv_34(D), 8, 24512>;";
        "_18 = _17 & 2;";
      |]
    )
  in let block_17 = 
    let step_17_48 = 
      Action.assume(16, Expr.bneq(GccType.boolean, expr0x7f9e64908510, expr0x7f9e66d54df8))
    in let step_17_49 = 
      Action.assign(expr0x7f9e64908558, expr0x7f9e648f3ae0)
    in let step_17_50 = 
      Action.call(call0x7f9e648f9bd0)
    in let step_17_51 = 
      Action.assign(expr0x7f9e649085a0, expr0x7f9e648f3b10)
    in Block.block(
      17,
      [|
        step_17_48;
        step_17_49;
        step_17_50;
        step_17_51;
      |],
      [|
        ("close_socket", 1);
      |],
      [|
        "assume TRUE (_18 != 0)";
        "# VUSE <.MEM_27>\n_19 = serv_34(D)->sok;";
        "# .MEM_47 = VDEF <.MEM_27>\nclose_socket (_19);";
        "# VUSE <.MEM_47>\n_20 = serv_34(D)->proxy_sok;";
      |]
    )
  in let block_18 = 
    let step_18_52 = 
      Action.assume(17, Expr.bneq(GccType.boolean, expr0x7f9e649085a0, expr0x7f9e66d71078))
    in let step_18_53 = 
      Action.assign(expr0x7f9e649085e8, expr0x7f9e648f3b40)
    in let step_18_54 = 
      Action.call(call0x7f9e648f9c60)
    in Block.block(
      18,
      [|
        step_18_52;
        step_18_53;
        step_18_54;
      |],
      [|
        ("close_socket", 1);
      |],
      [|
        "assume TRUE (_20 != 0)";
        "# VUSE <.MEM_47>\n_21 = serv_34(D)->proxy_sok;";
        "# .MEM_48 = VDEF <.MEM_47>\nclose_socket (_21);";
      |]
    )
  in let block_19 = 
    let step_19_55 = 
      Action.assume(17, Expr.beq(GccType.boolean, expr0x7f9e649085a0, expr0x7f9e66d71078))
    in let step_19_56 = 
      Action.assign(expr0x7f9e6488b480, expr0x7f9e660bd978)
    in let step_19_57 = 
      Action.assign(expr0x7f9e6488b4b0, expr0x7f9e660bd978)
    in let step_19_58 = 
      Action.assign(expr0x7f9e649d2f78, expr0x7f9e66d713d8)
    in let step_19_59 = 
      Action.assign(expr0x7f9e649d27e0, expr0x7f9e649d2f78)
    in Block.block(
      19,
      [|
        step_19_55;
        step_19_56;
        step_19_57;
        step_19_58;
        step_19_59;
      |],
      [|
        (* no calls *)
      |],
      [|
        "assume FALSE (_20 != 0)";
        "# .MEM_49 = VDEF <.MEM_31>\nserv_34(D)->connected = 0;";
        "# .MEM_50 = VDEF <.MEM_49>\nserv_34(D)->end_of_motd = 0;";
        "_51 = 2;";
        "_24 = _51";
      |]
    )
  in let block_20 = 
    let step_20_60 = 
      Action.assume(16, Expr.beq(GccType.boolean, expr0x7f9e64908510, expr0x7f9e66d54df8))
    in let step_20_61 = 
      Action.assign(expr0x7f9e64908630, expr0x7f9e648f3b70)
    in Block.block(
      20,
      [|
        step_20_60;
        step_20_61;
      |],
      [|
        (* no calls *)
      |],
      [|
        "assume FALSE (_18 != 0)";
        "# VUSE <.MEM_27>\n_22 = serv_34(D)->recondelay_tag;";
      |]
    )
  in let block_21 = 
    let step_21_62 = 
      Action.assume(20, Expr.bneq(GccType.boolean, expr0x7f9e64908630, expr0x7f9e66d71078))
    in let step_21_63 = 
      Action.assign(expr0x7f9e64908678, expr0x7f9e648f3ba0)
    in let step_21_64 = 
      Action.call(call0x7f9e648f9cf0)
    in let step_21_65 = 
      Action.assign(expr0x7f9e6488b570, expr0x7f9e66d71078)
    in let step_21_66 = 
      Action.assign(expr0x7f9e649d2e10, expr0x7f9e66d710a8)
    in let step_21_67 = 
      Action.assign(expr0x7f9e649d27e0, expr0x7f9e649d2e10)
    in Block.block(
      21,
      [|
        step_21_62;
        step_21_63;
        step_21_64;
        step_21_65;
        step_21_66;
        step_21_67;
      |],
      [|
        ("fe_timeout_remove", 1);
      |],
      [|
        "assume TRUE (_22 != 0)";
        "# VUSE <.MEM_27>\n_23 = serv_34(D)->recondelay_tag;";
        "# .MEM_44 = VDEF <.MEM_27>\nfe_timeout_remove (_23);";
        "# .MEM_45 = VDEF <.MEM_44>\nserv_34(D)->recondelay_tag = 0;";
        "_46 = 3;";
        "_24 = _46";
      |]
    )
  in let block_22 = 
    let step_22_68 = 
      Action.assume(20, Expr.beq(GccType.boolean, expr0x7f9e64908630, expr0x7f9e66d71078))
    in let step_22_69 = 
      Action.assign(expr0x7f9e649d2d38, expr0x7f9e66d71078)
    in let step_22_70 = 
      Action.assign(expr0x7f9e649d27e0, expr0x7f9e649d2d38)
    in Block.block(
      22,
      [|
        step_22_68;
        step_22_69;
        step_22_70;
      |],
      [|
        (* no calls *)
      |],
      [|
        "assume FALSE (_22 != 0)";
        "_43 = 0;";
        "_24 = _43";
      |]
    )
  in let block_23 = 
    let step_23_71 = 
      Action.return(expr0x7f9e649d27e0)
    in Block.block(
      23,
      [|
        step_23_71;
      |],
      [|
        (* no calls *)
      |],
      [|
        "# VUSE <.MEM_32>\nreturn _24;";
      |]
    )
  in let block_1 = 
    let step_0_72 = Action.finish 
    in Block.block (
      1,
      [| step_0_72 |],
      [||],
      [| "<EXIT>" |]
    )
  in let cfg = Cfg.cfg (
    24,
    Z.of_string "96",
    [|
      Cfg.vert ("[0]", block_0, [|
          Cfg.edge (2, "[2]", block_2, Z.of_string "0", Z.of_string "95");
        |]
      );
      Cfg.vert ("[1]", block_1, [|
        |]
      );
      Cfg.vert ("[2]", block_2, [|
          Cfg.edge (3, "[3]", block_3, Z.of_string "0", Z.of_string "47");
          Cfg.edge (4, "[4]", block_4, Z.of_string "48", Z.of_string "95");
        |]
      );
      Cfg.vert ("[3]", block_3, [|
          Cfg.edge (4, "[4]", block_4, Z.of_string "0", Z.of_string "47");
        |]
      );
      Cfg.vert ("[4]", block_4, [|
          Cfg.edge (5, "[5]", block_5, Z.of_string "0", Z.of_string "23");
          Cfg.edge (6, "[6]", block_6, Z.of_string "24", Z.of_string "47");
        |]
      );
      Cfg.vert ("[5]", block_5, [|
          Cfg.edge (6, "[6]", block_6, Z.of_string "0", Z.of_string "23");
        |]
      );
      Cfg.vert ("[6]", block_6, [|
          Cfg.edge (7, "[7]", block_7, Z.of_string "0", Z.of_string "11");
          Cfg.edge (8, "[8]", block_8, Z.of_string "12", Z.of_string "23");
        |]
      );
      Cfg.vert ("[7]", block_7, [|
          Cfg.edge (8, "[8]", block_8, Z.of_string "0", Z.of_string "11");
        |]
      );
      Cfg.vert ("[8]", block_8, [|
          Cfg.edge (9, "[9]", block_9, Z.of_string "0", Z.of_string "7");
          Cfg.edge (16, "[16]", block_16, Z.of_string "8", Z.of_string "11");
        |]
      );
      Cfg.vert ("[9]", block_9, [|
          Cfg.edge (10, "[10]", block_10, Z.of_string "0", Z.of_string "3");
          Cfg.edge (11, "[11]", block_11, Z.of_string "4", Z.of_string "7");
        |]
      );
      Cfg.vert ("[10]", block_10, [|
          Cfg.edge (11, "[11]", block_11, Z.of_string "0", Z.of_string "3");
        |]
      );
      Cfg.vert ("[11]", block_11, [|
          Cfg.edge (12, "[12]", block_12, Z.of_string "0", Z.of_string "1");
          Cfg.edge (13, "[13]", block_13, Z.of_string "2", Z.of_string "3");
        |]
      );
      Cfg.vert ("[12]", block_12, [|
          Cfg.edge (13, "[13]", block_13, Z.of_string "0", Z.of_string "1");
        |]
      );
      Cfg.vert ("[13]", block_13, [|
          Cfg.edge (14, "[14]", block_14, Z.of_string "0", Z.of_string "0");
          Cfg.edge (15, "[15]", block_15, Z.of_string "1", Z.of_string "1");
        |]
      );
      Cfg.vert ("[14]", block_14, [|
          Cfg.edge (15, "[15]", block_15, Z.of_string "0", Z.of_string "0");
        |]
      );
      Cfg.vert ("[15]", block_15, [|
          Cfg.edge (23, "[23]", block_23, Z.of_string "0", Z.of_string "0");
        |]
      );
      Cfg.vert ("[16]", block_16, [|
          Cfg.edge (17, "[17]", block_17, Z.of_string "0", Z.of_string "1");
          Cfg.edge (20, "[20]", block_20, Z.of_string "2", Z.of_string "3");
        |]
      );
      Cfg.vert ("[17]", block_17, [|
          Cfg.edge (18, "[18]", block_18, Z.of_string "0", Z.of_string "0");
          Cfg.edge (19, "[19]", block_19, Z.of_string "1", Z.of_string "1");
        |]
      );
      Cfg.vert ("[18]", block_18, [|
          Cfg.edge (19, "[19]", block_19, Z.of_string "0", Z.of_string "0");
        |]
      );
      Cfg.vert ("[19]", block_19, [|
          Cfg.edge (23, "[23]", block_23, Z.of_string "0", Z.of_string "0");
        |]
      );
      Cfg.vert ("[20]", block_20, [|
          Cfg.edge (21, "[21]", block_21, Z.of_string "0", Z.of_string "0");
          Cfg.edge (22, "[22]", block_22, Z.of_string "1", Z.of_string "1");
        |]
      );
      Cfg.vert ("[21]", block_21, [|
          Cfg.edge (23, "[23]", block_23, Z.of_string "0", Z.of_string "0");
        |]
      );
      Cfg.vert ("[22]", block_22, [|
          Cfg.edge (23, "[23]", block_23, Z.of_string "0", Z.of_string "0");
        |]
      );
      Cfg.vert ("[23]", block_23, [|
          Cfg.edge (1, "[1]", block_1, Z.of_string "0", Z.of_string "0");
        |]
      );
    |]
  )
  in Proc.proc(
   "server_cleanup",
    999,
   "/target/hexchat/build",
   "../src/common/server.c",
   "server.c",
    cfg
  )
in Driver.execute main;;
