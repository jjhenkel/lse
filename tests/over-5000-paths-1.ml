(* AUTO-GENERATED by c2ocaml plugin 1.0 *)

open Lsee;;
open Utils;;
open State;;
open Driver;;
open Blocks;;
open Actions;;
open GccTypes;;
open Procedures;;
open Expressions;;


let main = 
  (*-------------------------------------------------------- 
    // working_directory: /target/linux
    // source_file_name: kernel/sys.c
    // base_name: sys.c
    // name: validate_prctl_map
    // fid: 3563
    ---------------------------------------------------------*)
  
    let _typeSELF = GccType.pointer(GccType.self)
    in let type0x7f6bd6bf45e8 = 
      GccType.integer(true, 32, 32, Z.of_string "-2147483648", Z.of_string "2147483647")
    in let type0x7f6bd6bf4690 = 
      GccType.integer(false, 32, 32, Z.of_string "0", Z.of_string "4294967295")
    in let type0x7f6bd6bf47e0 = 
      GccType.integer(false, 64, 64, Z.of_string "0", Z.of_string "18446744073709551615")
    in let type0x7f6bd6bf4b28 = 
      GccType.boolean
    in let type0x7f6bd56be738 = 
      GccType.integer(false, 64, 64, Z.of_string "0", Z.of_string "18446744073709551615")
    in let type0x7f6bd6bf4930 = 
      GccType.integer(false, 64, 64, Z.of_string "0", Z.of_string "18446744073709551615")
    in let type0x7f6bd56be0a8 = 
      GccType.integer(false, 32, 32, Z.of_string "0", Z.of_string "4294967295")
    in let type0x7f6bd56be1f8 = 
      GccType.integer(false, 64, 64, Z.of_string "0", Z.of_string "18446744073709551615")
    in let type0x7f6bd56c9540 = 
      GccType.pointer(type0x7f6bd56be1f8)
    in let type0x7f6bd54be5e8 = 
      GccType.record("task_struct", [|
          (* var decls *)
        |], [|
          (* field decls *)
        |], [|
          (* type decls *)
        |], [|
          (* const decls *)
        |])
    in let type0x7f6bd54be930 = 
      GccType.pointer(type0x7f6bd54be5e8)
    in let type0x7f6bd3f820a8 = 
      GccType.record("", [|
          (* var decls *)
        |], [|
          (* field decls *)
        |], [|
          (* type decls *)
        |], [|
          (* const decls *)
        |])
    in let type0x7f6bd56ce690 = 
      GccType.boolean
    in let type0x7f6bd543e540 = 
      GccType.record("mm_struct", [|
          (* var decls *)
        |], [|
          (* field decls *)
        |], [|
          (* type decls *)
        |], [|
          (* const decls *)
        |])
    in let type0x7f6bd557f000 = 
      GccType.pointer(type0x7f6bd543e540)
    in let type0x7f6bd6bf4348 = 
      GccType.integer(false, 8, 8, Z.of_string "0", Z.of_string "255")
    in let type0x7f6bd5712930 = 
      GccType.integer(true, 64, 64, Z.of_string "0", Z.of_string "10")
    in let type0x7f6bd56d7d20 = 
      GccType.integer(false, 8, 8, Z.of_string "0", Z.of_string "255")
    in let type0x7f6bd29f2e70 = 
      GccType.array(type0x7f6bd56d7d20, type0x7f6bd5712930)
    in let type0x7f6bd6bf4000 = 
      GccType.integer(false, 64, 64, Z.of_string "0", Z.of_string "18446744073709551615")
    in let type0x7f6bd5406a80 = 
      GccType.pointer(type0x7f6bd56be738)
    in let type0x7f6bd3acab28 = 
      GccType.record("prctl_mm_map", [|
          (* var decls *)
        |], [|
          (* field decls *)
        |], [|
          (* type decls *)
        |], [|
          (* const decls *)
        |])
    in let type0x7f6bd29f2738 = 
      GccType.pointer(type0x7f6bd3acab28)
    in let type0x7f6bd3f82738 = 
      GccType.record("cred", [|
          (* var decls *)
        |], [|
          (* field decls *)
        |], [|
          (* type decls *)
        |], [|
          (* const decls *)
        |])
    in let type0x7f6bd3f827e0 = 
      GccType.pointer(type0x7f6bd3f82738)
    in let type0x7f6bd4c41e70 = 
      GccType.record("user_namespace", [|
          (* var decls *)
        |], [|
          (* field decls *)
        |], [|
          (* type decls *)
        |], [|
          (* const decls *)
        |])
    in let type0x7f6bd4c41f18 = 
      GccType.pointer(type0x7f6bd4c41e70)
    in let type0x7f6bd33d17e0 = 
      GccType.pointer(type0x7f6bd4c41e70)
    in let type0x7f6bd6bf4f18 = 
      GccType.void
    in let expr0x7f6bd243a9d8 = 
      Expr.ssa("_2", 2, Expr.nothing(type0x7f6bd6bf45e8))
    in let expr0x7f6bd6bf9078 = 
      Expr.s_int_cst(type0x7f6bd6bf45e8, Z.of_string "0")
    in let expr0x7f6bd243aab0 = 
      Expr.ssa("_5", 5, Expr.nothing(type0x7f6bd6bf4690))
    in let expr0x7f6bd6bdcf48 = 
      Expr.u_int_cst(type0x7f6bd6bf4690, Z.of_string "0")
    in let expr0x7f6bd24d8510 = 
      Expr.ssa("iftmp.153_47", 47, Expr.nothing(type0x7f6bd6bf47e0))
    in let expr0x7f6bd24d8a20 = 
      Expr.ssa("iftmp.153_65", 65, Expr.nothing(type0x7f6bd6bf47e0))
    in let expr0x7f6bd24d89d8 = 
      Expr.ssa("iftmp.153_64", 64, Expr.nothing(type0x7f6bd6bf47e0))
    in let expr0x7f6bd243aaf8 = 
      Expr.ssa("_6", 6, Expr.nothing(type0x7f6bd6bf4b28))
    in let expr0x7f6bd6bf9030 = 
      Expr.u_int_cst(type0x7f6bd6bf4b28, Z.of_string "0")
    in let expr0x7f6bd24d8558 = 
      Expr.ssa("iftmp.154_48", 48, Expr.nothing(type0x7f6bd6bf47e0))
    in let expr0x7f6bd24d8900 = 
      Expr.ssa("iftmp.154_61", 61, Expr.nothing(type0x7f6bd6bf47e0))
    in let expr0x7f6bd24d88b8 = 
      Expr.ssa("iftmp.154_60", 60, Expr.nothing(type0x7f6bd6bf47e0))
    in let expr0x7f6bd24d84c8 = 
      Expr.ssa("iftmp.152_46", 46, Expr.nothing(type0x7f6bd6bf47e0))
    in let expr0x7f6bd24d8a68 = 
      Expr.ssa("iftmp.152_66", 66, Expr.nothing(type0x7f6bd6bf47e0))
    in let expr0x7f6bd24d8948 = 
      Expr.ssa("iftmp.152_62", 62, Expr.nothing(type0x7f6bd6bf47e0))
    in let expr0x7f6bd29f8d80 = 
      Expr.variable_decl(type0x7f6bd56be738, VarDecl.make("val", 64, 64))
    in let expr0x7f6bd24db3a8 = 
      Expr.ssa("val_98", 98, expr0x7f6bd29f8d80)
    in let expr0x7f6bd29f8a20 = 
      Expr.variable_decl(type0x7f6bd6bf47e0, VarDecl.make("mmap_max_addr", 64, 64))
    in let expr0x7f6bd24d8ab0 = 
      Expr.ssa("mmap_max_addr_67", 67, expr0x7f6bd29f8a20)
    in let expr0x7f6bd243ac60 = 
      Expr.ssa("mmap_min_addr.155_11", 11, Expr.nothing(type0x7f6bd6bf47e0))
    in let expr0x7f6bd29f8bd0 = 
      Expr.variable_decl(type0x7f6bd6bf45e8, VarDecl.make("i", 32, 32))
    in let expr0x7f6bd24d8480 = 
      Expr.ssa("i_45", 45, expr0x7f6bd29f8bd0)
    in let expr0x7f6bd24d8bd0 = 
      Expr.ssa("i_71", 71, expr0x7f6bd29f8bd0)
    in let expr0x7f6bd24db3f0 = 
      Expr.ssa("i_99", 99, expr0x7f6bd29f8bd0)
    in let expr0x7f6bd243aca8 = 
      Expr.ssa("i.156_12", 12, Expr.nothing(type0x7f6bd6bf4690))
    in let expr0x7f6bd48acf18 = 
      Expr.u_int_cst(type0x7f6bd6bf4690, Z.of_string "10")
    in let expr0x7f6bd243acf0 = 
      Expr.ssa("_13", 13, Expr.nothing(type0x7f6bd6bf4930))
    in let expr0x7f6bd243ad38 = 
      Expr.ssa("_14", 14, Expr.nothing(type0x7f6bd6bf4930))
    in let expr0x7f6bd24d85a0 = 
      Expr.ssa("iftmp.157_49", 49, Expr.nothing(type0x7f6bd6bf45e8))
    in let expr0x7f6bd24d8ca8 = 
      Expr.ssa("iftmp.157_74", 74, Expr.nothing(type0x7f6bd6bf45e8))
    in let expr0x7f6bd24d8c60 = 
      Expr.ssa("iftmp.157_73", 73, Expr.nothing(type0x7f6bd6bf45e8))
    in let expr0x7f6bd243ad80 = 
      Expr.ssa("_15", 15, Expr.nothing(type0x7f6bd6bf4930))
    in let expr0x7f6bd243adc8 = 
      Expr.ssa("_16", 16, Expr.nothing(type0x7f6bd6bf4930))
    in let expr0x7f6bd24d85e8 = 
      Expr.ssa("iftmp.158_50", 50, Expr.nothing(type0x7f6bd6bf45e8))
    in let expr0x7f6bd24d8d80 = 
      Expr.ssa("iftmp.158_77", 77, Expr.nothing(type0x7f6bd6bf45e8))
    in let expr0x7f6bd24d8d38 = 
      Expr.ssa("iftmp.158_76", 76, Expr.nothing(type0x7f6bd6bf45e8))
    in let expr0x7f6bd243ae10 = 
      Expr.ssa("_17", 17, Expr.nothing(type0x7f6bd6bf4930))
    in let expr0x7f6bd243ae58 = 
      Expr.ssa("_18", 18, Expr.nothing(type0x7f6bd6bf4930))
    in let expr0x7f6bd24d8630 = 
      Expr.ssa("iftmp.159_51", 51, Expr.nothing(type0x7f6bd6bf45e8))
    in let expr0x7f6bd24d8e58 = 
      Expr.ssa("iftmp.159_80", 80, Expr.nothing(type0x7f6bd6bf45e8))
    in let expr0x7f6bd24d8e10 = 
      Expr.ssa("iftmp.159_79", 79, Expr.nothing(type0x7f6bd6bf45e8))
    in let expr0x7f6bd243aea0 = 
      Expr.ssa("_19", 19, Expr.nothing(type0x7f6bd6bf4930))
    in let expr0x7f6bd243aee8 = 
      Expr.ssa("_20", 20, Expr.nothing(type0x7f6bd6bf4930))
    in let expr0x7f6bd24d8678 = 
      Expr.ssa("iftmp.160_52", 52, Expr.nothing(type0x7f6bd6bf45e8))
    in let expr0x7f6bd24d8f30 = 
      Expr.ssa("iftmp.160_83", 83, Expr.nothing(type0x7f6bd6bf45e8))
    in let expr0x7f6bd24d8ee8 = 
      Expr.ssa("iftmp.160_82", 82, Expr.nothing(type0x7f6bd6bf45e8))
    in let expr0x7f6bd243af30 = 
      Expr.ssa("_21", 21, Expr.nothing(type0x7f6bd6bf4930))
    in let expr0x7f6bd243af78 = 
      Expr.ssa("_22", 22, Expr.nothing(type0x7f6bd6bf4930))
    in let expr0x7f6bd24d86c0 = 
      Expr.ssa("iftmp.161_53", 53, Expr.nothing(type0x7f6bd6bf45e8))
    in let expr0x7f6bd24db048 = 
      Expr.ssa("iftmp.161_86", 86, Expr.nothing(type0x7f6bd6bf45e8))
    in let expr0x7f6bd24db000 = 
      Expr.ssa("iftmp.161_85", 85, Expr.nothing(type0x7f6bd6bf45e8))
    in let expr0x7f6bd29f8b40 = 
      Expr.variable_decl(type0x7f6bd6bf45e8, VarDecl.make("error", 32, 32))
    in let expr0x7f6bd24db090 = 
      Expr.ssa("error_87", 87, expr0x7f6bd29f8b40)
    in let expr0x7f6bd244c000 = 
      Expr.ssa("_23", 23, Expr.nothing(type0x7f6bd6bf4930))
    in let expr0x7f6bd244c048 = 
      Expr.ssa("_24", 24, Expr.nothing(type0x7f6bd6bf4930))
    in let expr0x7f6bd244c090 = 
      Expr.ssa("_25", 25, Expr.nothing(type0x7f6bd6bf4930))
    in let expr0x7f6bd244c0d8 = 
      Expr.ssa("_26", 26, Expr.nothing(type0x7f6bd6bf4930))
    in let expr0x7f6bd244c288 = 
      Expr.ssa("_32", 32, Expr.nothing(type0x7f6bd6bf45e8))
    in let expr0x7f6bd244c2d0 = 
      Expr.ssa("_33", 33, Expr.nothing(type0x7f6bd6bf4690))
    in let expr0x7f6bd29ffbd0 = 
      Expr.u_int_cst(type0x7f6bd56be0a8, Z.of_string "0")
    in let expr0x7f6bd244c318 = 
      Expr.ssa("_34", 34, Expr.nothing(type0x7f6bd56c9540))
    in let expr0x7f6bd29ffbe8 = 
      Expr.u_int_cst(type0x7f6bd56c9540, Z.of_string "0")
    in let expr0x7f6bd244c360 = 
      Expr.ssa("_35", 35, Expr.nothing(type0x7f6bd6bf4690))
    in let expr0x7f6bd29ffc00 = 
      Expr.u_int_cst(type0x7f6bd56be0a8, Z.of_string "368")
    in let expr0x7f6bd244c3a8 = 
      Expr.ssa("_36", 36, Expr.nothing(type0x7f6bd6bf4690))
    in let expr0x7f6bd29ffc48 = 
      Expr.u_int_cst(type0x7f6bd56be0a8, Z.of_string "4294967295")
    in let expr0x7f6bd244c3f0 = 
      Expr.ssa("_37", 37, Expr.nothing(type0x7f6bd6bf45e8))
    in let expr0x7f6bd244c480 = 
      Expr.ssa("_39", 39, Expr.nothing(type0x7f6bd6bf4b28))
    in let expr0x7f6bd244c5a0 = 
      Expr.ssa("_43", 43, Expr.nothing(type0x7f6bd6bf4b28))
    in let expr0x7f6bd24d8438 = 
      Expr.ssa("error_44", 44, expr0x7f6bd29f8b40)
    in let expr0x7f6bd24d8b88 = 
      Expr.ssa("error_70", 70, expr0x7f6bd29f8b40)
    in let expr0x7f6bd24db0d8 = 
      Expr.ssa("error_88", 88, expr0x7f6bd29f8b40)
    in let expr0x7f6bd24db360 = 
      Expr.ssa("error_97", 97, expr0x7f6bd29f8b40)
    in let expr0x7f6bd243a990 = 
      Expr.ssa("_1", 1, Expr.nothing(type0x7f6bd54be930))
    in let expr0x7f6bd5798d68 = 
      Expr.s_int_cst(type0x7f6bd6bf45e8, Z.of_string "29")
    in let expr0x7f6bd243aa20 = 
      Expr.ssa("_3", 3, Expr.nothing(type0x7f6bd54be930))
    in let expr0x7f6bd243aa68 = 
      Expr.ssa("_4", 4, Expr.nothing(type0x7f6bd6bf4690))
    in let expr0x7f6bd3f841c8 = 
      Expr.field_decl(type0x7f6bd6bf4690, FieldDecl.make("personality", "32", 32, "10048", 512, 160, false))
    in let expr0x7f6bd3f97688 = 
      Expr.field_decl(type0x7f6bd3f820a8, FieldDecl.make("D.22862", "96768", 512, "64", 128, 0, false))
    in let expr0x7f6bd4e0b6a8 = 
      Expr.u_int_cst(type0x7f6bd54be930, Z.of_string "0")
    in let expr0x7f6bd2445cd0 = 
      Expr.memory_ref(type0x7f6bd54be5e8, expr0x7f6bd243aa20, expr0x7f6bd4e0b6a8)
    in let expr0x7f6bd2438630 = 
      Expr.component_ref(type0x7f6bd3f820a8, expr0x7f6bd2445cd0, expr0x7f6bd3f97688)
    in let expr0x7f6bd2438600 = 
      Expr.component_ref(type0x7f6bd6bf4690, expr0x7f6bd2438630, expr0x7f6bd3f841c8)
    in let expr0x7f6bd3d29ba0 = 
      Expr.u_int_cst(type0x7f6bd6bf4690, Z.of_string "134217728")
    in let expr0x7f6bd29ff630 = 
      Expr.u_int_cst(type0x7f6bd6bf47e0, Z.of_string "3221225472")
    in let expr0x7f6bd29ff780 = 
      Expr.u_int_cst(type0x7f6bd6bf47e0, Z.of_string "4294959104")
    in let expr0x7f6bd4ca7bd0 = 
      Expr.s_int_cst(type0x7f6bd6bf45e8, Z.of_string "528")
    in let expr0x7f6bd2a95048 = 
      Expr.u_int_cst(type0x7f6bd6bf47e0, Z.of_string "72057594037923840")
    in let expr0x7f6bd2a95060 = 
      Expr.u_int_cst(type0x7f6bd6bf47e0, Z.of_string "140737488351232")
    in let expr0x7f6bd243ab40 = 
      Expr.ssa("_7", 7, Expr.nothing(type0x7f6bd54be930))
    in let expr0x7f6bd29f8ab0 = 
      Expr.variable_decl(type0x7f6bd557f000, VarDecl.make("mm", 64, 64))
    in let expr0x7f6bd24d8b40 = 
      Expr.ssa("mm_69", 69, expr0x7f6bd29f8ab0)
    in let expr0x7f6bd3f83be0 = 
      Expr.field_decl(type0x7f6bd557f000, FieldDecl.make("mm", "64", 64, "4224", 512, 320, false))
    in let expr0x7f6bd2445e38 = 
      Expr.memory_ref(type0x7f6bd54be5e8, expr0x7f6bd243ab40, expr0x7f6bd4e0b6a8)
    in let expr0x7f6bd2a03690 = 
      Expr.component_ref(type0x7f6bd3f820a8, expr0x7f6bd2445e38, expr0x7f6bd3f97688)
    in let expr0x7f6bd2a036c0 = 
      Expr.component_ref(type0x7f6bd557f000, expr0x7f6bd2a03690, expr0x7f6bd3f83be0)
    in let expr0x7f6bd2b47a98 = 
      Expr.s_int_cst(type0x7f6bd6bf45e8, Z.of_string "-22")
    in let expr0x7f6bd243ab88 = 
      Expr.ssa("_8", 8, Expr.nothing(type0x7f6bd6bf4348))
    in let expr0x7f6bd29f8c60 = 
      Expr.variable_decl(type0x7f6bd29f2e70, VarDecl.make("offsets", 88, 64))
    in let expr0x7f6bd24480a8 = 
      Expr.array_ref(type0x7f6bd56d7d20, expr0x7f6bd29f8c60, expr0x7f6bd24d8480)
    in let expr0x7f6bd243abd0 = 
      Expr.ssa("_9", 9, Expr.nothing(type0x7f6bd6bf4000))
    in let expr0x7f6bd243ac18 = 
      Expr.ssa("_10", 10, Expr.nothing(type0x7f6bd5406a80))
    in let expr0x7f6bd2a00480 = 
      Expr.parameter_decl(type0x7f6bd29f2738, "prctl_map", type0x7f6bd29f2738)
    in let expr0x7f6bd24d8c18 = 
      Expr.ssa("prctl_map_72(D)", 72, expr0x7f6bd2a00480)
    in let expr0x7f6bd5174108 = 
      Expr.u_int_cst(type0x7f6bd5406a80, Z.of_string "0")
    in let expr0x7f6bd2445f50 = 
      Expr.memory_ref(type0x7f6bd56be738, expr0x7f6bd243ac18, expr0x7f6bd5174108)
    in let expr0x7f6bd31c8630 = 
      Expr.variable_decl(type0x7f6bd6bf47e0, VarDecl.make("mmap_min_addr", 64, 64))
    in let expr0x7f6bd6bf9090 = 
      Expr.s_int_cst(type0x7f6bd6bf45e8, Z.of_string "1")
    in let expr0x7f6bd3acb7b8 = 
      Expr.field_decl(type0x7f6bd56be1f8, FieldDecl.make("start_code", "64", 64, "0", 128, 0, false))
    in let expr0x7f6bd241af48 = 
      Expr.u_int_cst(type0x7f6bd29f2738, Z.of_string "0")
    in let expr0x7f6bd2445258 = 
      Expr.memory_ref(type0x7f6bd3acab28, expr0x7f6bd24d8c18, expr0x7f6bd241af48)
    in let expr0x7f6bd24386f0 = 
      Expr.component_ref(type0x7f6bd56be1f8, expr0x7f6bd2445258, expr0x7f6bd3acb7b8)
    in let expr0x7f6bd3acb850 = 
      Expr.field_decl(type0x7f6bd56be1f8, FieldDecl.make("end_code", "64", 64, "0", 128, 64, false))
    in let expr0x7f6bd2445320 = 
      Expr.memory_ref(type0x7f6bd3acab28, expr0x7f6bd24d8c18, expr0x7f6bd241af48)
    in let expr0x7f6bd2438720 = 
      Expr.component_ref(type0x7f6bd56be1f8, expr0x7f6bd2445320, expr0x7f6bd3acb850)
    in let expr0x7f6bd24d8cf0 = 
      Expr.ssa("error_75", 75, expr0x7f6bd29f8b40)
    in let expr0x7f6bd3acb8e8 = 
      Expr.field_decl(type0x7f6bd56be1f8, FieldDecl.make("start_data", "64", 64, "16", 128, 0, false))
    in let expr0x7f6bd24457f8 = 
      Expr.memory_ref(type0x7f6bd3acab28, expr0x7f6bd24d8c18, expr0x7f6bd241af48)
    in let expr0x7f6bd2438750 = 
      Expr.component_ref(type0x7f6bd56be1f8, expr0x7f6bd24457f8, expr0x7f6bd3acb8e8)
    in let expr0x7f6bd3acb980 = 
      Expr.field_decl(type0x7f6bd56be1f8, FieldDecl.make("end_data", "64", 64, "16", 128, 64, false))
    in let expr0x7f6bd2445848 = 
      Expr.memory_ref(type0x7f6bd3acab28, expr0x7f6bd24d8c18, expr0x7f6bd241af48)
    in let expr0x7f6bd2438780 = 
      Expr.component_ref(type0x7f6bd56be1f8, expr0x7f6bd2445848, expr0x7f6bd3acb980)
    in let expr0x7f6bd24d8dc8 = 
      Expr.ssa("error_78", 78, expr0x7f6bd29f8b40)
    in let expr0x7f6bd3acba18 = 
      Expr.field_decl(type0x7f6bd56be1f8, FieldDecl.make("start_brk", "64", 64, "32", 128, 0, false))
    in let expr0x7f6bd2445c08 = 
      Expr.memory_ref(type0x7f6bd3acab28, expr0x7f6bd24d8c18, expr0x7f6bd241af48)
    in let expr0x7f6bd24387b0 = 
      Expr.component_ref(type0x7f6bd56be1f8, expr0x7f6bd2445c08, expr0x7f6bd3acba18)
    in let expr0x7f6bd3acbab0 = 
      Expr.field_decl(type0x7f6bd56be1f8, FieldDecl.make("brk", "64", 64, "32", 128, 64, false))
    in let expr0x7f6bd2445cf8 = 
      Expr.memory_ref(type0x7f6bd3acab28, expr0x7f6bd24d8c18, expr0x7f6bd241af48)
    in let expr0x7f6bd24387e0 = 
      Expr.component_ref(type0x7f6bd56be1f8, expr0x7f6bd2445cf8, expr0x7f6bd3acbab0)
    in let expr0x7f6bd24d8ea0 = 
      Expr.ssa("error_81", 81, expr0x7f6bd29f8b40)
    in let expr0x7f6bd3acbbe0 = 
      Expr.field_decl(type0x7f6bd56be1f8, FieldDecl.make("arg_start", "64", 64, "48", 128, 64, false))
    in let expr0x7f6bd2445e10 = 
      Expr.memory_ref(type0x7f6bd3acab28, expr0x7f6bd24d8c18, expr0x7f6bd241af48)
    in let expr0x7f6bd2438810 = 
      Expr.component_ref(type0x7f6bd56be1f8, expr0x7f6bd2445e10, expr0x7f6bd3acbbe0)
    in let expr0x7f6bd3acbc78 = 
      Expr.field_decl(type0x7f6bd56be1f8, FieldDecl.make("arg_end", "64", 64, "64", 128, 0, false))
    in let expr0x7f6bd2445eb0 = 
      Expr.memory_ref(type0x7f6bd3acab28, expr0x7f6bd24d8c18, expr0x7f6bd241af48)
    in let expr0x7f6bd2438840 = 
      Expr.component_ref(type0x7f6bd56be1f8, expr0x7f6bd2445eb0, expr0x7f6bd3acbc78)
    in let expr0x7f6bd24d8f78 = 
      Expr.ssa("error_84", 84, expr0x7f6bd29f8b40)
    in let expr0x7f6bd3acbd10 = 
      Expr.field_decl(type0x7f6bd56be1f8, FieldDecl.make("env_start", "64", 64, "64", 128, 64, false))
    in let expr0x7f6bd2445f78 = 
      Expr.memory_ref(type0x7f6bd3acab28, expr0x7f6bd24d8c18, expr0x7f6bd241af48)
    in let expr0x7f6bd2438870 = 
      Expr.component_ref(type0x7f6bd56be1f8, expr0x7f6bd2445f78, expr0x7f6bd3acbd10)
    in let expr0x7f6bd3acbda8 = 
      Expr.field_decl(type0x7f6bd56be1f8, FieldDecl.make("env_end", "64", 64, "80", 128, 0, false))
    in let expr0x7f6bd244b050 = 
      Expr.memory_ref(type0x7f6bd3acab28, expr0x7f6bd24d8c18, expr0x7f6bd241af48)
    in let expr0x7f6bd24388a0 = 
      Expr.component_ref(type0x7f6bd56be1f8, expr0x7f6bd244b050, expr0x7f6bd3acbda8)
    in let expr0x7f6bd244b0c8 = 
      Expr.memory_ref(type0x7f6bd3acab28, expr0x7f6bd24d8c18, expr0x7f6bd241af48)
    in let expr0x7f6bd2438930 = 
      Expr.component_ref(type0x7f6bd56be1f8, expr0x7f6bd244b0c8, expr0x7f6bd3acba18)
    in let expr0x7f6bd244b140 = 
      Expr.memory_ref(type0x7f6bd3acab28, expr0x7f6bd24d8c18, expr0x7f6bd241af48)
    in let expr0x7f6bd2438960 = 
      Expr.component_ref(type0x7f6bd56be1f8, expr0x7f6bd244b140, expr0x7f6bd3acb980)
    in let expr0x7f6bd244b1b8 = 
      Expr.memory_ref(type0x7f6bd3acab28, expr0x7f6bd24d8c18, expr0x7f6bd241af48)
    in let expr0x7f6bd2438990 = 
      Expr.component_ref(type0x7f6bd56be1f8, expr0x7f6bd244b1b8, expr0x7f6bd3acbab0)
    in let expr0x7f6bd244b230 = 
      Expr.memory_ref(type0x7f6bd3acab28, expr0x7f6bd24d8c18, expr0x7f6bd241af48)
    in let expr0x7f6bd24389c0 = 
      Expr.component_ref(type0x7f6bd56be1f8, expr0x7f6bd244b230, expr0x7f6bd3acb980)
    in let expr0x7f6bd244c120 = 
      Expr.ssa("_27", 27, Expr.nothing(type0x7f6bd6bf4930))
    in let expr0x7f6bd244b2a8 = 
      Expr.memory_ref(type0x7f6bd3acab28, expr0x7f6bd24d8c18, expr0x7f6bd241af48)
    in let expr0x7f6bd24389f0 = 
      Expr.component_ref(type0x7f6bd56be1f8, expr0x7f6bd244b2a8, expr0x7f6bd3acb8e8)
    in let expr0x7f6bd244c168 = 
      Expr.ssa("_28", 28, Expr.nothing(type0x7f6bd6bf4930))
    in let expr0x7f6bd244b320 = 
      Expr.memory_ref(type0x7f6bd3acab28, expr0x7f6bd24d8c18, expr0x7f6bd241af48)
    in let expr0x7f6bd2438a20 = 
      Expr.component_ref(type0x7f6bd56be1f8, expr0x7f6bd244b320, expr0x7f6bd3acb980)
    in let expr0x7f6bd244c1b0 = 
      Expr.ssa("_29", 29, Expr.nothing(type0x7f6bd6bf4930))
    in let expr0x7f6bd244b398 = 
      Expr.memory_ref(type0x7f6bd3acab28, expr0x7f6bd24d8c18, expr0x7f6bd241af48)
    in let expr0x7f6bd2438a50 = 
      Expr.component_ref(type0x7f6bd56be1f8, expr0x7f6bd244b398, expr0x7f6bd3acba18)
    in let expr0x7f6bd244c1f8 = 
      Expr.ssa("_30", 30, Expr.nothing(type0x7f6bd6bf4930))
    in let expr0x7f6bd244b410 = 
      Expr.memory_ref(type0x7f6bd3acab28, expr0x7f6bd24d8c18, expr0x7f6bd241af48)
    in let expr0x7f6bd2438a80 = 
      Expr.component_ref(type0x7f6bd56be1f8, expr0x7f6bd244b410, expr0x7f6bd3acbab0)
    in let expr0x7f6bd4d91990 = 
      Expr.u_int_cst(type0x7f6bd6bf4690, Z.of_string "2")
    in let expr0x7f6bd244c240 = 
      Expr.ssa("_31", 31, Expr.nothing(type0x7f6bd6bf47e0))
    in let expr0x7f6bd3acbed8 = 
      Expr.field_decl(type0x7f6bd56be0a8, FieldDecl.make("auxv_size", "32", 32, "96", 128, 0, false))
    in let expr0x7f6bd244b4d8 = 
      Expr.memory_ref(type0x7f6bd3acab28, expr0x7f6bd24d8c18, expr0x7f6bd241af48)
    in let expr0x7f6bd2438ab0 = 
      Expr.component_ref(type0x7f6bd56be0a8, expr0x7f6bd244b4d8, expr0x7f6bd3acbed8)
    in let expr0x7f6bd3acbe40 = 
      Expr.field_decl(type0x7f6bd56c9540, FieldDecl.make("auxv", "64", 64, "80", 128, 64, false))
    in let expr0x7f6bd244b550 = 
      Expr.memory_ref(type0x7f6bd3acab28, expr0x7f6bd24d8c18, expr0x7f6bd241af48)
    in let expr0x7f6bd2438b40 = 
      Expr.component_ref(type0x7f6bd56c9540, expr0x7f6bd244b550, expr0x7f6bd3acbe40)
    in let expr0x7f6bd244b5c8 = 
      Expr.memory_ref(type0x7f6bd3acab28, expr0x7f6bd24d8c18, expr0x7f6bd241af48)
    in let expr0x7f6bd2438b70 = 
      Expr.component_ref(type0x7f6bd56be0a8, expr0x7f6bd244b5c8, expr0x7f6bd3acbed8)
    in let expr0x7f6bd3ae2000 = 
      Expr.field_decl(type0x7f6bd56be0a8, FieldDecl.make("exe_fd", "32", 32, "96", 128, 32, false))
    in let expr0x7f6bd244b640 = 
      Expr.memory_ref(type0x7f6bd3acab28, expr0x7f6bd24d8c18, expr0x7f6bd241af48)
    in let expr0x7f6bd2438ba0 = 
      Expr.component_ref(type0x7f6bd56be0a8, expr0x7f6bd244b640, expr0x7f6bd3ae2000)
    in let expr0x7f6bd244c438 = 
      Expr.ssa("__warned.163_38", 38, Expr.nothing(type0x7f6bd6bf4b28))
    in let expr0x7f6bd29f8e10 = 
      Expr.variable_decl(type0x7f6bd56ce690, VarDecl.make("__warned", 8, 8))
    in let expr0x7f6bd24db1f8 = 
      Expr.ssa("iftmp.162_92", 92, Expr.nothing(type0x7f6bd6bf45e8))
    in let expr0x7f6bd24db240 = 
      Expr.ssa("iftmp.162_93", 93, Expr.nothing(type0x7f6bd6bf45e8))
    in let expr0x7f6bd244c4c8 = 
      Expr.ssa("_40", 40, Expr.nothing(type0x7f6bd54be930))
    in let expr0x7f6bd24db2d0 = 
      Expr.ssa("_95", 95, Expr.nothing(type0x7f6bd3f827e0))
    in let expr0x7f6bd3f86ed8 = 
      Expr.field_decl(type0x7f6bd3f827e0, FieldDecl.make("cred", "64", 64, "9856", 512, 448, false))
    in let expr0x7f6bd244b780 = 
      Expr.memory_ref(type0x7f6bd54be5e8, expr0x7f6bd244c4c8, expr0x7f6bd4e0b6a8)
    in let expr0x7f6bd2a163f0 = 
      Expr.component_ref(type0x7f6bd3f820a8, expr0x7f6bd244b780, expr0x7f6bd3f97688)
    in let expr0x7f6bd2a16420 = 
      Expr.component_ref(type0x7f6bd3f827e0, expr0x7f6bd2a163f0, expr0x7f6bd3f86ed8)
    in let expr0x7f6bd244c510 = 
      Expr.ssa("_41", 41, Expr.nothing(type0x7f6bd4c41f18))
    in let expr0x7f6bd3bb62f8 = 
      Expr.field_decl(type0x7f6bd4c41f18, FieldDecl.make("user_ns", "64", 64, "128", 128, 64, false))
    in let expr0x7f6bd3c34c30 = 
      Expr.u_int_cst(type0x7f6bd3f827e0, Z.of_string "0")
    in let expr0x7f6bd244b7d0 = 
      Expr.memory_ref(type0x7f6bd3f82738, expr0x7f6bd24db2d0, expr0x7f6bd3c34c30)
    in let expr0x7f6bd2438cc0 = 
      Expr.component_ref(type0x7f6bd33d17e0, expr0x7f6bd244b7d0, expr0x7f6bd3bb62f8)
    in let expr0x7f6bd5798ed0 = 
      Expr.s_int_cst(type0x7f6bd6bf45e8, Z.of_string "21")
    in let expr0x7f6bd244c558 = 
      Expr.ssa("_42", 42, Expr.nothing(type0x7f6bd6bf4b28))
    in let expr0x7f6bd2a00500 = 
      Expr.label_decl(type0x7f6bd6bf4f18, "out")
    in let expr0x7f6bd24db438 = 
      Expr.ssa("_100", 100, Expr.nothing(type0x7f6bd6bf45e8))
    in let call0x7f6bd2443480 = Expr.call(
      type0x7f6bd54be930,
      "get_current", [|
    |])
    in let call0x7f6bd243d990 = Expr.call(
      type0x7f6bd6bf45e8,
      "test_ti_thread_flag", [|
        (Expr.parameter("ti", 0, expr0x7f6bd243a990));
        (Expr.parameter("flag", 1, expr0x7f6bd5798d68));
    |])
    in let call0x7f6bd2443600 = Expr.call(
      type0x7f6bd54be930,
      "get_current", [|
    |])
    in let call0x7f6bd243db40 = Expr.call(
      type0x7f6bd56ce690,
      "_static_cpu_has", [|
        (Expr.parameter("bit", 0, expr0x7f6bd4ca7bd0));
    |])
    in let call0x7f6bd2443a00 = Expr.call(
      type0x7f6bd54be930,
      "get_current", [|
    |])
    in let call0x7f6bd243dea0 = Expr.call(
      type0x7f6bd6bf47e0,
      "rlimit", [|
        (Expr.parameter("limit", 0, expr0x7f6bd4d91990));
    |])
    in let call0x7f6bd243e930 = Expr.call(
      type0x7f6bd6bf45e8,
      "check_data_rlimit", [|
        (Expr.parameter("rlim", 0, expr0x7f6bd244c240));
        (Expr.parameter("new", 1, expr0x7f6bd244c1f8));
        (Expr.parameter("start", 2, expr0x7f6bd244c1b0));
        (Expr.parameter("end_data", 3, expr0x7f6bd244c168));
        (Expr.parameter("start_data", 4, expr0x7f6bd244c120));
    |])
    in let call0x7f6bd244a900 = Expr.call(
      type0x7f6bd6bf45e8,
      "debug_lockdep_rcu_enabled", [|
    |])
    in let call0x7f6bd244ab80 = Expr.call(
      type0x7f6bd54be930,
      "get_current", [|
    |])
    in let call0x7f6bd2450000 = Expr.call(
      type0x7f6bd56ce690,
      "ns_capable", [|
        (Expr.parameter("p1", 0, expr0x7f6bd244c510));
        (Expr.parameter("p2", 1, expr0x7f6bd5798ed0));
    |])
    in let block_0 = 
      let step_0_0 = Action.start 
      in Block.block (
        0,
        [| step_0_0 |],
        [||],
        [| "<ENTRY>" |]
      )
    in let block_2 = 
      let step_2_1 = 
        Action.call(call0x7f6bd2443480)
      in let step_2_2 = 
        Action.assign(expr0x7f6bd243a990, call0x7f6bd2443480)
      in let step_2_3 = 
        Action.call(call0x7f6bd243d990)
      in let step_2_4 = 
        Action.assign(expr0x7f6bd243a9d8, call0x7f6bd243d990)
      in Block.block(
        2,
        [|
          step_2_1;
          step_2_2;
          step_2_3;
          step_2_4;
        |],
        [|
          ("get_current", 1);
          ("test_ti_thread_flag", 1);
        |],
        [|
          "# .MEM_58 = VDEF <.MEM_57(D)>\n_1 = get_current ();";
          "<CAPTURES RETURN>";
          "# .MEM_59 = VDEF <.MEM_58>\n_2 = test_ti_thread_flag (_1, 29);";
          "<CAPTURES RETURN>";
        |]
      )
    in let block_3 = 
      let step_3_5 = 
        Action.assume(2, Expr.bneq(GccType.boolean, expr0x7f6bd243a9d8, expr0x7f6bd6bf9078))
      in let step_3_6 = 
        Action.call(call0x7f6bd2443600)
      in let step_3_7 = 
        Action.assign(expr0x7f6bd243aa20, call0x7f6bd2443600)
      in let step_3_8 = 
        Action.assign(expr0x7f6bd243aa68, expr0x7f6bd2438600)
      in let step_3_9 = 
        Action.assign(expr0x7f6bd243aab0, Expr.bit_and(
          type0x7f6bd6bf4690, expr0x7f6bd243aa68, expr0x7f6bd3d29ba0))
      in Block.block(
        3,
        [|
          step_3_5;
          step_3_6;
          step_3_7;
          step_3_8;
          step_3_9;
        |],
        [|
          ("get_current", 1);
        |],
        [|
          "assume TRUE (_2 != 0)";
          "# .MEM_63 = VDEF <.MEM_59>\n_3 = get_current ();";
          "<CAPTURES RETURN>";
          "# VUSE <.MEM_63>\n_4 = _3->D.22862.personality;";
          "_5 = _4 & 134217728;";
        |]
      )
    in let block_4 = 
      let step_4_10 = 
        Action.assume(3, Expr.bneq(GccType.boolean, expr0x7f6bd243aab0, expr0x7f6bd6bdcf48))
      in let step_4_11 = 
        Action.assign(expr0x7f6bd24d8a20, expr0x7f6bd29ff630)
      in let step_4_12 = 
        Action.assign(expr0x7f6bd24d8510, expr0x7f6bd24d8a20)
      in Block.block(
        4,
        [|
          step_4_10;
          step_4_11;
          step_4_12;
        |],
        [|
          (* no calls *)
        |],
        [|
          "assume TRUE (_5 != 0)";
          "iftmp.153_65 = 3221225472;";
          "iftmp.153_47 = iftmp.153_65";
        |]
      )
    in let block_5 = 
      let step_5_13 = 
        Action.assume(3, Expr.beq(GccType.boolean, expr0x7f6bd243aab0, expr0x7f6bd6bdcf48))
      in let step_5_14 = 
        Action.assign(expr0x7f6bd24d89d8, expr0x7f6bd29ff780)
      in let step_5_15 = 
        Action.assign(expr0x7f6bd24d8510, expr0x7f6bd24d89d8)
      in Block.block(
        5,
        [|
          step_5_13;
          step_5_14;
          step_5_15;
        |],
        [|
          (* no calls *)
        |],
        [|
          "assume FALSE (_5 != 0)";
          "iftmp.153_64 = 4294959104;";
          "iftmp.153_47 = iftmp.153_64";
        |]
      )
    in let block_6 = 
      let step_6_16 = 
        Action.assign(expr0x7f6bd24d8a68, expr0x7f6bd24d8510)
      in let step_6_17 = 
        Action.assign(expr0x7f6bd24d84c8, expr0x7f6bd24d8a68)
      in Block.block(
        6,
        [|
          step_6_16;
          step_6_17;
        |],
        [|
          (* no calls *)
        |],
        [|
          "iftmp.152_66 = iftmp.153_47;";
          "iftmp.152_46 = iftmp.152_66";
        |]
      )
    in let block_7 = 
      let step_7_18 = 
        Action.assume(2, Expr.beq(GccType.boolean, expr0x7f6bd243a9d8, expr0x7f6bd6bf9078))
      in let step_7_19 = 
        Action.call(call0x7f6bd243db40)
      in let step_7_20 = 
        Action.assign(expr0x7f6bd243aaf8, call0x7f6bd243db40)
      in Block.block(
        7,
        [|
          step_7_18;
          step_7_19;
          step_7_20;
        |],
        [|
          ("_static_cpu_has", 1);
        |],
        [|
          "assume FALSE (_2 != 0)";
          "# VUSE <.MEM_59>\n_6 = _static_cpu_has (528);";
          "<CAPTURES RETURN>";
        |]
      )
    in let block_8 = 
      let step_8_21 = 
        Action.assume(7, Expr.bneq(GccType.boolean, expr0x7f6bd243aaf8, expr0x7f6bd6bf9030))
      in let step_8_22 = 
        Action.assign(expr0x7f6bd24d8900, expr0x7f6bd2a95048)
      in let step_8_23 = 
        Action.assign(expr0x7f6bd24d8558, expr0x7f6bd24d8900)
      in Block.block(
        8,
        [|
          step_8_21;
          step_8_22;
          step_8_23;
        |],
        [|
          (* no calls *)
        |],
        [|
          "assume TRUE (_6 != 0)";
          "iftmp.154_61 = 72057594037923840;";
          "iftmp.154_48 = iftmp.154_61";
        |]
      )
    in let block_9 = 
      let step_9_24 = 
        Action.assume(7, Expr.beq(GccType.boolean, expr0x7f6bd243aaf8, expr0x7f6bd6bf9030))
      in let step_9_25 = 
        Action.assign(expr0x7f6bd24d88b8, expr0x7f6bd2a95060)
      in let step_9_26 = 
        Action.assign(expr0x7f6bd24d8558, expr0x7f6bd24d88b8)
      in Block.block(
        9,
        [|
          step_9_24;
          step_9_25;
          step_9_26;
        |],
        [|
          (* no calls *)
        |],
        [|
          "assume FALSE (_6 != 0)";
          "iftmp.154_60 = 140737488351232;";
          "iftmp.154_48 = iftmp.154_60";
        |]
      )
    in let block_10 = 
      let step_10_27 = 
        Action.assign(expr0x7f6bd24d8948, expr0x7f6bd24d8558)
      in let step_10_28 = 
        Action.assign(expr0x7f6bd24d84c8, expr0x7f6bd24d8948)
      in Block.block(
        10,
        [|
          step_10_27;
          step_10_28;
        |],
        [|
          (* no calls *)
        |],
        [|
          "iftmp.152_62 = iftmp.154_48;";
          "iftmp.152_46 = iftmp.152_62";
        |]
      )
    in let block_11 = 
      let step_11_29 = 
        Action.assign(expr0x7f6bd24d8ab0, expr0x7f6bd24d84c8)
      in let step_11_30 = 
        Action.call(call0x7f6bd2443a00)
      in let step_11_31 = 
        Action.assign(expr0x7f6bd243ab40, call0x7f6bd2443a00)
      in let step_11_32 = 
        Action.assign(expr0x7f6bd24d8b40, expr0x7f6bd2a036c0)
      in let step_11_33 = 
        Action.assign(expr0x7f6bd24d8b88, expr0x7f6bd2b47a98)
      in let step_11_34 = 
        Action.assign(expr0x7f6bd24d8bd0, expr0x7f6bd6bf9078)
      in let step_11_35 = 
        Action.assign(expr0x7f6bd24d8480, expr0x7f6bd24d8bd0)
      in Block.block(
        11,
        [|
          step_11_29;
          step_11_30;
          step_11_31;
          step_11_32;
          step_11_33;
          step_11_34;
          step_11_35;
        |],
        [|
          ("get_current", 1);
        |],
        [|
          "mmap_max_addr_67 = iftmp.152_46;";
          "# .MEM_68 = VDEF <.MEM_54>\n_7 = get_current ();";
          "<CAPTURES RETURN>";
          "# VUSE <.MEM_68>\nmm_69 = _7->D.22862.mm;";
          "error_70 = -22;";
          "i_71 = 0;";
          "i_45 = i_71";
        |]
      )
    in let block_12 = 
      let step_12_36 = 
        Action.assume(15, Expr.blte(GccType.boolean, expr0x7f6bd243aca8, expr0x7f6bd48acf18))
      in let step_12_37 = 
        Action.assign(expr0x7f6bd243ab88, expr0x7f6bd24480a8)
      in let step_12_38 = 
        Action.assign(expr0x7f6bd243abd0, expr0x7f6bd243ab88)
      in let step_12_39 = 
        Action.assign(expr0x7f6bd243ac18, Expr.pointer_plus(
          type0x7f6bd5406a80, expr0x7f6bd24d8c18, expr0x7f6bd243abd0))
      in let step_12_40 = 
        Action.assign(expr0x7f6bd24db3a8, expr0x7f6bd2445f50)
      in let step_12_41 = 
        Action.assign(expr0x7f6bd24d8438, expr0x7f6bd24d8b88)
      in Block.block(
        12,
        [|
          step_12_36;
          step_12_37;
          step_12_38;
          step_12_39;
          step_12_40;
          step_12_41;
        |],
        [|
          (* no calls *)
        |],
        [|
          "assume TRUE (i.156_12 <= 10)";
          "# VUSE <.MEM_68>\n_8 = offsets[i_45];";
          "_9 = (sizetype) _8;";
          "_10 = prctl_map_72(D) + _9;";
          "# VUSE <.MEM_68>\nval_98 = *_10;";
          "error_44 = error_70";
        |]
      )
    in let block_13 = 
      let step_13_42 = 
        Action.assume(12, Expr.blt(GccType.boolean, expr0x7f6bd24db3a8, expr0x7f6bd24d8ab0))
      in let step_13_43 = 
        Action.assign(expr0x7f6bd243ac60, expr0x7f6bd31c8630)
      in let step_13_44 = 
        Action.assign(expr0x7f6bd24d8438, expr0x7f6bd24d8b88)
      in Block.block(
        13,
        [|
          step_13_42;
          step_13_43;
          step_13_44;
        |],
        [|
          (* no calls *)
        |],
        [|
          "assume FALSE (val_98 >= mmap_max_addr_67)";
          "# VUSE <.MEM_68>\nmmap_min_addr.155_11 = mmap_min_addr;";
          "error_44 = error_70";
        |]
      )
    in let block_14 = 
      let step_14_45 = 
        Action.assume(13, Expr.bgte(GccType.boolean, expr0x7f6bd24db3a8, expr0x7f6bd243ac60))
      in let step_14_46 = 
        Action.assign(expr0x7f6bd24db3f0, Expr.plus(
          type0x7f6bd6bf45e8, expr0x7f6bd24d8480, expr0x7f6bd6bf9090))
      in let step_14_47 = 
        Action.assign(expr0x7f6bd24d8480, expr0x7f6bd24db3f0)
      in Block.block(
        14,
        [|
          step_14_45;
          step_14_46;
          step_14_47;
        |],
        [|
          (* no calls *)
        |],
        [|
          "assume FALSE (val_98 < mmap_min_addr.155_11)";
          "i_99 = i_45 + 1;";
          "i_45 = i_99";
        |]
      )
    in let block_15 = 
      let step_15_48 = 
        Action.assign(expr0x7f6bd243aca8, expr0x7f6bd24d8480)
      in Block.block(
        15,
        [|
          step_15_48;
        |],
        [|
          (* no calls *)
        |],
        [|
          "i.156_12 = (unsigned int) i_45;";
        |]
      )
    in let block_16 = 
      let step_16_49 = 
        Action.assume(15, Expr.bgt(GccType.boolean, expr0x7f6bd243aca8, expr0x7f6bd48acf18))
      in let step_16_50 = 
        Action.assign(expr0x7f6bd243acf0, expr0x7f6bd24386f0)
      in let step_16_51 = 
        Action.assign(expr0x7f6bd243ad38, expr0x7f6bd2438720)
      in Block.block(
        16,
        [|
          step_16_49;
          step_16_50;
          step_16_51;
        |],
        [|
          (* no calls *)
        |],
        [|
          "assume FALSE (i.156_12 <= 10)";
          "# VUSE <.MEM_68>\n_13 = prctl_map_72(D)->start_code;";
          "# VUSE <.MEM_68>\n_14 = prctl_map_72(D)->end_code;";
        |]
      )
    in let block_17 = 
      let step_17_52 = 
        Action.assume(16, Expr.blt(GccType.boolean, expr0x7f6bd243acf0, expr0x7f6bd243ad38))
      in let step_17_53 = 
        Action.assign(expr0x7f6bd24d8ca8, expr0x7f6bd6bf9078)
      in let step_17_54 = 
        Action.assign(expr0x7f6bd24d85a0, expr0x7f6bd24d8ca8)
      in Block.block(
        17,
        [|
          step_17_52;
          step_17_53;
          step_17_54;
        |],
        [|
          (* no calls *)
        |],
        [|
          "assume TRUE (_13 < _14)";
          "iftmp.157_74 = 0;";
          "iftmp.157_49 = iftmp.157_74";
        |]
      )
    in let block_18 = 
      let step_18_55 = 
        Action.assume(16, Expr.bgte(GccType.boolean, expr0x7f6bd243acf0, expr0x7f6bd243ad38))
      in let step_18_56 = 
        Action.assign(expr0x7f6bd24d8c60, expr0x7f6bd2b47a98)
      in let step_18_57 = 
        Action.assign(expr0x7f6bd24d85a0, expr0x7f6bd24d8c60)
      in Block.block(
        18,
        [|
          step_18_55;
          step_18_56;
          step_18_57;
        |],
        [|
          (* no calls *)
        |],
        [|
          "assume FALSE (_13 < _14)";
          "iftmp.157_73 = -22;";
          "iftmp.157_49 = iftmp.157_73";
        |]
      )
    in let block_19 = 
      let step_19_58 = 
        Action.assign(expr0x7f6bd24d8cf0, expr0x7f6bd24d85a0)
      in let step_19_59 = 
        Action.assign(expr0x7f6bd243ad80, expr0x7f6bd2438750)
      in let step_19_60 = 
        Action.assign(expr0x7f6bd243adc8, expr0x7f6bd2438780)
      in Block.block(
        19,
        [|
          step_19_58;
          step_19_59;
          step_19_60;
        |],
        [|
          (* no calls *)
        |],
        [|
          "error_75 = iftmp.157_49;";
          "# VUSE <.MEM_68>\n_15 = prctl_map_72(D)->start_data;";
          "# VUSE <.MEM_68>\n_16 = prctl_map_72(D)->end_data;";
        |]
      )
    in let block_20 = 
      let step_20_61 = 
        Action.assume(19, Expr.blt(GccType.boolean, expr0x7f6bd243ad80, expr0x7f6bd243adc8))
      in let step_20_62 = 
        Action.assign(expr0x7f6bd24d8d80, expr0x7f6bd6bf9078)
      in let step_20_63 = 
        Action.assign(expr0x7f6bd24d85e8, expr0x7f6bd24d8d80)
      in Block.block(
        20,
        [|
          step_20_61;
          step_20_62;
          step_20_63;
        |],
        [|
          (* no calls *)
        |],
        [|
          "assume TRUE (_15 < _16)";
          "iftmp.158_77 = 0;";
          "iftmp.158_50 = iftmp.158_77";
        |]
      )
    in let block_21 = 
      let step_21_64 = 
        Action.assume(19, Expr.bgte(GccType.boolean, expr0x7f6bd243ad80, expr0x7f6bd243adc8))
      in let step_21_65 = 
        Action.assign(expr0x7f6bd24d8d38, expr0x7f6bd2b47a98)
      in let step_21_66 = 
        Action.assign(expr0x7f6bd24d85e8, expr0x7f6bd24d8d38)
      in Block.block(
        21,
        [|
          step_21_64;
          step_21_65;
          step_21_66;
        |],
        [|
          (* no calls *)
        |],
        [|
          "assume FALSE (_15 < _16)";
          "iftmp.158_76 = -22;";
          "iftmp.158_50 = iftmp.158_76";
        |]
      )
    in let block_22 = 
      let step_22_67 = 
        Action.assign(expr0x7f6bd24d8dc8, Expr.bit_or(
          type0x7f6bd6bf45e8, expr0x7f6bd24d85e8, expr0x7f6bd24d8cf0))
      in let step_22_68 = 
        Action.assign(expr0x7f6bd243ae10, expr0x7f6bd24387b0)
      in let step_22_69 = 
        Action.assign(expr0x7f6bd243ae58, expr0x7f6bd24387e0)
      in Block.block(
        22,
        [|
          step_22_67;
          step_22_68;
          step_22_69;
        |],
        [|
          (* no calls *)
        |],
        [|
          "error_78 = iftmp.158_50 | error_75;";
          "# VUSE <.MEM_68>\n_17 = prctl_map_72(D)->start_brk;";
          "# VUSE <.MEM_68>\n_18 = prctl_map_72(D)->brk;";
        |]
      )
    in let block_23 = 
      let step_23_70 = 
        Action.assume(22, Expr.blte(GccType.boolean, expr0x7f6bd243ae10, expr0x7f6bd243ae58))
      in let step_23_71 = 
        Action.assign(expr0x7f6bd24d8e58, expr0x7f6bd6bf9078)
      in let step_23_72 = 
        Action.assign(expr0x7f6bd24d8630, expr0x7f6bd24d8e58)
      in Block.block(
        23,
        [|
          step_23_70;
          step_23_71;
          step_23_72;
        |],
        [|
          (* no calls *)
        |],
        [|
          "assume TRUE (_17 <= _18)";
          "iftmp.159_80 = 0;";
          "iftmp.159_51 = iftmp.159_80";
        |]
      )
    in let block_24 = 
      let step_24_73 = 
        Action.assume(22, Expr.bgt(GccType.boolean, expr0x7f6bd243ae10, expr0x7f6bd243ae58))
      in let step_24_74 = 
        Action.assign(expr0x7f6bd24d8e10, expr0x7f6bd2b47a98)
      in let step_24_75 = 
        Action.assign(expr0x7f6bd24d8630, expr0x7f6bd24d8e10)
      in Block.block(
        24,
        [|
          step_24_73;
          step_24_74;
          step_24_75;
        |],
        [|
          (* no calls *)
        |],
        [|
          "assume FALSE (_17 <= _18)";
          "iftmp.159_79 = -22;";
          "iftmp.159_51 = iftmp.159_79";
        |]
      )
    in let block_25 = 
      let step_25_76 = 
        Action.assign(expr0x7f6bd24d8ea0, Expr.bit_or(
          type0x7f6bd6bf45e8, expr0x7f6bd24d8630, expr0x7f6bd24d8dc8))
      in let step_25_77 = 
        Action.assign(expr0x7f6bd243aea0, expr0x7f6bd2438810)
      in let step_25_78 = 
        Action.assign(expr0x7f6bd243aee8, expr0x7f6bd2438840)
      in Block.block(
        25,
        [|
          step_25_76;
          step_25_77;
          step_25_78;
        |],
        [|
          (* no calls *)
        |],
        [|
          "error_81 = iftmp.159_51 | error_78;";
          "# VUSE <.MEM_68>\n_19 = prctl_map_72(D)->arg_start;";
          "# VUSE <.MEM_68>\n_20 = prctl_map_72(D)->arg_end;";
        |]
      )
    in let block_26 = 
      let step_26_79 = 
        Action.assume(25, Expr.blte(GccType.boolean, expr0x7f6bd243aea0, expr0x7f6bd243aee8))
      in let step_26_80 = 
        Action.assign(expr0x7f6bd24d8f30, expr0x7f6bd6bf9078)
      in let step_26_81 = 
        Action.assign(expr0x7f6bd24d8678, expr0x7f6bd24d8f30)
      in Block.block(
        26,
        [|
          step_26_79;
          step_26_80;
          step_26_81;
        |],
        [|
          (* no calls *)
        |],
        [|
          "assume TRUE (_19 <= _20)";
          "iftmp.160_83 = 0;";
          "iftmp.160_52 = iftmp.160_83";
        |]
      )
    in let block_27 = 
      let step_27_82 = 
        Action.assume(25, Expr.bgt(GccType.boolean, expr0x7f6bd243aea0, expr0x7f6bd243aee8))
      in let step_27_83 = 
        Action.assign(expr0x7f6bd24d8ee8, expr0x7f6bd2b47a98)
      in let step_27_84 = 
        Action.assign(expr0x7f6bd24d8678, expr0x7f6bd24d8ee8)
      in Block.block(
        27,
        [|
          step_27_82;
          step_27_83;
          step_27_84;
        |],
        [|
          (* no calls *)
        |],
        [|
          "assume FALSE (_19 <= _20)";
          "iftmp.160_82 = -22;";
          "iftmp.160_52 = iftmp.160_82";
        |]
      )
    in let block_28 = 
      let step_28_85 = 
        Action.assign(expr0x7f6bd24d8f78, Expr.bit_or(
          type0x7f6bd6bf45e8, expr0x7f6bd24d8678, expr0x7f6bd24d8ea0))
      in let step_28_86 = 
        Action.assign(expr0x7f6bd243af30, expr0x7f6bd2438870)
      in let step_28_87 = 
        Action.assign(expr0x7f6bd243af78, expr0x7f6bd24388a0)
      in Block.block(
        28,
        [|
          step_28_85;
          step_28_86;
          step_28_87;
        |],
        [|
          (* no calls *)
        |],
        [|
          "error_84 = iftmp.160_52 | error_81;";
          "# VUSE <.MEM_68>\n_21 = prctl_map_72(D)->env_start;";
          "# VUSE <.MEM_68>\n_22 = prctl_map_72(D)->env_end;";
        |]
      )
    in let block_29 = 
      let step_29_88 = 
        Action.assume(28, Expr.blte(GccType.boolean, expr0x7f6bd243af30, expr0x7f6bd243af78))
      in let step_29_89 = 
        Action.assign(expr0x7f6bd24db048, expr0x7f6bd6bf9078)
      in let step_29_90 = 
        Action.assign(expr0x7f6bd24d86c0, expr0x7f6bd24db048)
      in Block.block(
        29,
        [|
          step_29_88;
          step_29_89;
          step_29_90;
        |],
        [|
          (* no calls *)
        |],
        [|
          "assume TRUE (_21 <= _22)";
          "iftmp.161_86 = 0;";
          "iftmp.161_53 = iftmp.161_86";
        |]
      )
    in let block_30 = 
      let step_30_91 = 
        Action.assume(28, Expr.bgt(GccType.boolean, expr0x7f6bd243af30, expr0x7f6bd243af78))
      in let step_30_92 = 
        Action.assign(expr0x7f6bd24db000, expr0x7f6bd2b47a98)
      in let step_30_93 = 
        Action.assign(expr0x7f6bd24d86c0, expr0x7f6bd24db000)
      in Block.block(
        30,
        [|
          step_30_91;
          step_30_92;
          step_30_93;
        |],
        [|
          (* no calls *)
        |],
        [|
          "assume FALSE (_21 <= _22)";
          "iftmp.161_85 = -22;";
          "iftmp.161_53 = iftmp.161_85";
        |]
      )
    in let block_31 = 
      let step_31_94 = 
        Action.assign(expr0x7f6bd24db090, Expr.bit_or(
          type0x7f6bd6bf45e8, expr0x7f6bd24d86c0, expr0x7f6bd24d8f78))
      in let step_31_95 = 
        Action.assign(expr0x7f6bd24d8438, expr0x7f6bd24db090)
      in Block.block(
        31,
        [|
          step_31_94;
          step_31_95;
        |],
        [|
          (* no calls *)
        |],
        [|
          "error_87 = iftmp.161_53 | error_84;";
          "error_44 = error_87";
        |]
      )
    in let block_32 = 
      let step_32_96 = 
        Action.assume(31, Expr.beq(GccType.boolean, expr0x7f6bd24db090, expr0x7f6bd6bf9078))
      in let step_32_97 = 
        Action.assign(expr0x7f6bd24db0d8, expr0x7f6bd2b47a98)
      in let step_32_98 = 
        Action.assign(expr0x7f6bd244c000, expr0x7f6bd2438930)
      in let step_32_99 = 
        Action.assign(expr0x7f6bd244c048, expr0x7f6bd2438960)
      in let step_32_100 = 
        Action.assign(expr0x7f6bd24d8438, expr0x7f6bd24db0d8)
      in Block.block(
        32,
        [|
          step_32_96;
          step_32_97;
          step_32_98;
          step_32_99;
          step_32_100;
        |],
        [|
          (* no calls *)
        |],
        [|
          "assume FALSE (error_87 != 0)";
          "error_88 = -22;";
          "# VUSE <.MEM_68>\n_23 = prctl_map_72(D)->start_brk;";
          "# VUSE <.MEM_68>\n_24 = prctl_map_72(D)->end_data;";
          "error_44 = error_88";
        |]
      )
    in let block_33 = 
      let step_33_101 = 
        Action.assume(32, Expr.bgt(GccType.boolean, expr0x7f6bd244c000, expr0x7f6bd244c048))
      in let step_33_102 = 
        Action.assign(expr0x7f6bd244c090, expr0x7f6bd2438990)
      in let step_33_103 = 
        Action.assign(expr0x7f6bd244c0d8, expr0x7f6bd24389c0)
      in let step_33_104 = 
        Action.assign(expr0x7f6bd24d8438, expr0x7f6bd24db0d8)
      in Block.block(
        33,
        [|
          step_33_101;
          step_33_102;
          step_33_103;
          step_33_104;
        |],
        [|
          (* no calls *)
        |],
        [|
          "assume FALSE (_23 <= _24)";
          "# VUSE <.MEM_68>\n_25 = prctl_map_72(D)->brk;";
          "# VUSE <.MEM_68>\n_26 = prctl_map_72(D)->end_data;";
          "error_44 = error_88";
        |]
      )
    in let block_34 = 
      let step_34_105 = 
        Action.assume(33, Expr.bgt(GccType.boolean, expr0x7f6bd244c090, expr0x7f6bd244c0d8))
      in let step_34_106 = 
        Action.assign(expr0x7f6bd244c120, expr0x7f6bd24389f0)
      in let step_34_107 = 
        Action.assign(expr0x7f6bd244c168, expr0x7f6bd2438a20)
      in let step_34_108 = 
        Action.assign(expr0x7f6bd244c1b0, expr0x7f6bd2438a50)
      in let step_34_109 = 
        Action.assign(expr0x7f6bd244c1f8, expr0x7f6bd2438a80)
      in let step_34_110 = 
        Action.call(call0x7f6bd243dea0)
      in let step_34_111 = 
        Action.assign(expr0x7f6bd244c240, call0x7f6bd243dea0)
      in let step_34_112 = 
        Action.call(call0x7f6bd243e930)
      in let step_34_113 = 
        Action.assign(expr0x7f6bd244c288, call0x7f6bd243e930)
      in let step_34_114 = 
        Action.assign(expr0x7f6bd24d8438, expr0x7f6bd24db0d8)
      in Block.block(
        34,
        [|
          step_34_105;
          step_34_106;
          step_34_107;
          step_34_108;
          step_34_109;
          step_34_110;
          step_34_111;
          step_34_112;
          step_34_113;
          step_34_114;
        |],
        [|
          ("check_data_rlimit", 1);
          ("rlimit", 1);
        |],
        [|
          "assume FALSE (_25 <= _26)";
          "# VUSE <.MEM_68>\n_27 = prctl_map_72(D)->start_data;";
          "# VUSE <.MEM_68>\n_28 = prctl_map_72(D)->end_data;";
          "# VUSE <.MEM_68>\n_29 = prctl_map_72(D)->start_brk;";
          "# VUSE <.MEM_68>\n_30 = prctl_map_72(D)->brk;";
          "# .MEM_89 = VDEF <.MEM_68>\n_31 = rlimit (2);";
          "<CAPTURES RETURN>";
          "# .MEM_90 = VDEF <.MEM_89>\n_32 = check_data_rlimit (_31, _30, _29, _28, _27);";
          "<CAPTURES RETURN>";
          "error_44 = error_88";
        |]
      )
    in let block_35 = 
      let step_35_115 = 
        Action.assume(34, Expr.beq(GccType.boolean, expr0x7f6bd244c288, expr0x7f6bd6bf9078))
      in let step_35_116 = 
        Action.assign(expr0x7f6bd244c2d0, expr0x7f6bd2438ab0)
      in Block.block(
        35,
        [|
          step_35_115;
          step_35_116;
        |],
        [|
          (* no calls *)
        |],
        [|
          "assume FALSE (_32 != 0)";
          "# VUSE <.MEM_90>\n_33 = prctl_map_72(D)->auxv_size;";
        |]
      )
    in let block_36 = 
      let step_36_117 = 
        Action.assume(35, Expr.bneq(GccType.boolean, expr0x7f6bd244c2d0, expr0x7f6bd29ffbd0))
      in let step_36_118 = 
        Action.assign(expr0x7f6bd244c318, expr0x7f6bd2438b40)
      in let step_36_119 = 
        Action.assign(expr0x7f6bd24d8438, expr0x7f6bd24db0d8)
      in Block.block(
        36,
        [|
          step_36_117;
          step_36_118;
          step_36_119;
        |],
        [|
          (* no calls *)
        |],
        [|
          "assume TRUE (_33 != 0)";
          "# VUSE <.MEM_90>\n_34 = prctl_map_72(D)->auxv;";
          "error_44 = error_88";
        |]
      )
    in let block_37 = 
      let step_37_120 = 
        Action.assume(36, Expr.bneq(GccType.boolean, expr0x7f6bd244c318, expr0x7f6bd29ffbe8))
      in let step_37_121 = 
        Action.assign(expr0x7f6bd244c360, expr0x7f6bd2438b70)
      in let step_37_122 = 
        Action.assign(expr0x7f6bd24d8438, expr0x7f6bd24db0d8)
      in Block.block(
        37,
        [|
          step_37_120;
          step_37_121;
          step_37_122;
        |],
        [|
          (* no calls *)
        |],
        [|
          "assume FALSE (_34 == 0B)";
          "# VUSE <.MEM_90>\n_35 = prctl_map_72(D)->auxv_size;";
          "error_44 = error_88";
        |]
      )
    in let block_38 = 
      let step_38_123 = 
        Action.assume(35, Expr.beq(GccType.boolean, expr0x7f6bd244c2d0, expr0x7f6bd29ffbd0))
      in let step_38_124 = 
        Action.assume(37, Expr.blte(GccType.boolean, expr0x7f6bd244c360, expr0x7f6bd29ffc00))
      in let step_38_125 = 
        Action.assign(expr0x7f6bd244c3a8, expr0x7f6bd2438ba0)
      in Block.block(
        38,
        [|
          step_38_123;
          step_38_124;
          step_38_125;
        |],
        [|
          (* no calls *)
        |],
        [|
          "assume FALSE (_33 != 0)";
          "assume FALSE (_35 > 368)";
          "# VUSE <.MEM_90>\n_36 = prctl_map_72(D)->exe_fd;";
        |]
      )
    in let block_39 = 
      let step_39_126 = 
        Action.assume(38, Expr.bneq(GccType.boolean, expr0x7f6bd244c3a8, expr0x7f6bd29ffc48))
      in let step_39_127 = 
        Action.call(call0x7f6bd244a900)
      in let step_39_128 = 
        Action.assign(expr0x7f6bd244c3f0, call0x7f6bd244a900)
      in Block.block(
        39,
        [|
          step_39_126;
          step_39_127;
          step_39_128;
        |],
        [|
          ("debug_lockdep_rcu_enabled", 1);
        |],
        [|
          "assume TRUE (_36 != 4294967295)";
          "# .MEM_91 = VDEF <.MEM_90>\n_37 = debug_lockdep_rcu_enabled ();";
          "<CAPTURES RETURN>";
        |]
      )
    in let block_40 = 
      let step_40_129 = 
        Action.assume(39, Expr.bneq(GccType.boolean, expr0x7f6bd244c3f0, expr0x7f6bd6bf9078))
      in let step_40_130 = 
        Action.assign(expr0x7f6bd244c438, expr0x7f6bd29f8e10)
      in let step_40_131 = 
        Action.assign(expr0x7f6bd244c480, expr0x7f6bd244c438)
      in Block.block(
        40,
        [|
          step_40_129;
          step_40_130;
          step_40_131;
        |],
        [|
          (* no calls *)
        |],
        [|
          "assume TRUE (_37 != 0)";
          "# VUSE <.MEM_91>\n__warned.163_38 = __warned;";
          "_39 = ~__warned.163_38;";
        |]
      )
    in let block_41 = 
      let step_41_132 = 
        Action.assume(40, Expr.bneq(GccType.boolean, expr0x7f6bd244c480, expr0x7f6bd6bf9030))
      in let step_41_133 = 
        Action.assign(expr0x7f6bd24db1f8, expr0x7f6bd6bf9090)
      in Block.block(
        41,
        [|
          step_41_132;
          step_41_133;
        |],
        [|
          (* no calls *)
        |],
        [|
          "assume TRUE (_39 != 0)";
          "iftmp.162_92 = 1;";
        |]
      )
    in let block_42 = 
      let step_42_134 = 
        Action.assume(39, Expr.beq(GccType.boolean, expr0x7f6bd244c3f0, expr0x7f6bd6bf9078))
      in let step_42_135 = 
        Action.assume(40, Expr.beq(GccType.boolean, expr0x7f6bd244c480, expr0x7f6bd6bf9030))
      in let step_42_136 = 
        Action.assign(expr0x7f6bd24db240, expr0x7f6bd6bf9078)
      in Block.block(
        42,
        [|
          step_42_134;
          step_42_135;
          step_42_136;
        |],
        [|
          (* no calls *)
        |],
        [|
          "assume FALSE (_37 != 0)";
          "assume FALSE (_39 != 0)";
          "iftmp.162_93 = 0;";
        |]
      )
    in let block_43 = 
      let step_43_137 = 
        Action.call(call0x7f6bd244ab80)
      in let step_43_138 = 
        Action.assign(expr0x7f6bd244c4c8, call0x7f6bd244ab80)
      in let step_43_139 = 
        Action.assign(expr0x7f6bd24db2d0, expr0x7f6bd2a16420)
      in let step_43_140 = 
        Action.assign(expr0x7f6bd244c510, expr0x7f6bd2438cc0)
      in let step_43_141 = 
        Action.call(call0x7f6bd2450000)
      in let step_43_142 = 
        Action.assign(expr0x7f6bd244c558, call0x7f6bd2450000)
      in let step_43_143 = 
        Action.assign(expr0x7f6bd244c5a0, expr0x7f6bd244c558)
      in let step_43_144 = 
        Action.assign(expr0x7f6bd24d8438, expr0x7f6bd24db0d8)
      in Block.block(
        43,
        [|
          step_43_137;
          step_43_138;
          step_43_139;
          step_43_140;
          step_43_141;
          step_43_142;
          step_43_143;
          step_43_144;
        |],
        [|
          ("get_current", 1);
          ("ns_capable", 1);
        |],
        [|
          "# .MEM_94 = VDEF <.MEM_91>\n_40 = get_current ();";
          "<CAPTURES RETURN>";
          "# VUSE <.MEM_94>\n_95 = _40->D.22862.cred;";
          "# VUSE <.MEM_94>\n_41 = _95->user_ns;";
          "# .MEM_96 = VDEF <.MEM_94>\n_42 = ns_capable (_41, 21);";
          "<CAPTURES RETURN>";
          "_43 = ~_42;";
          "error_44 = error_88";
        |]
      )
    in let block_44 = 
      let step_44_145 = 
        Action.assume(38, Expr.beq(GccType.boolean, expr0x7f6bd244c3a8, expr0x7f6bd29ffc48))
      in let step_44_146 = 
        Action.assume(43, Expr.beq(GccType.boolean, expr0x7f6bd244c5a0, expr0x7f6bd6bf9030))
      in let step_44_147 = 
        Action.assign(expr0x7f6bd24db360, expr0x7f6bd6bf9078)
      in let step_44_148 = 
        Action.assign(expr0x7f6bd24d8438, expr0x7f6bd24db360)
      in Block.block(
        44,
        [|
          step_44_145;
          step_44_146;
          step_44_147;
          step_44_148;
        |],
        [|
          (* no calls *)
        |],
        [|
          "assume FALSE (_36 != 4294967295)";
          "assume FALSE (_43 != 0)";
          "error_97 = 0;";
          "error_44 = error_97";
        |]
      )
    in let block_45 = 
      let step_45_149 = 
        Action.assume(12, Expr.bgte(GccType.boolean, expr0x7f6bd24db3a8, expr0x7f6bd24d8ab0))
      in let step_45_150 = 
        Action.assume(13, Expr.blt(GccType.boolean, expr0x7f6bd24db3a8, expr0x7f6bd243ac60))
      in let step_45_151 = 
        Action.assume(31, Expr.bneq(GccType.boolean, expr0x7f6bd24db090, expr0x7f6bd6bf9078))
      in let step_45_152 = 
        Action.assume(32, Expr.blte(GccType.boolean, expr0x7f6bd244c000, expr0x7f6bd244c048))
      in let step_45_153 = 
        Action.assume(33, Expr.blte(GccType.boolean, expr0x7f6bd244c090, expr0x7f6bd244c0d8))
      in let step_45_154 = 
        Action.assume(34, Expr.bneq(GccType.boolean, expr0x7f6bd244c288, expr0x7f6bd6bf9078))
      in let step_45_155 = 
        Action.assume(36, Expr.beq(GccType.boolean, expr0x7f6bd244c318, expr0x7f6bd29ffbe8))
      in let step_45_156 = 
        Action.assume(37, Expr.bgt(GccType.boolean, expr0x7f6bd244c360, expr0x7f6bd29ffc00))
      in let step_45_157 = 
        Action.assume(43, Expr.bneq(GccType.boolean, expr0x7f6bd244c5a0, expr0x7f6bd6bf9030))
      in let step_45_158 = 
        Action.observe(expr0x7f6bd2a00500)
      in let step_45_159 = 
        Action.assign(expr0x7f6bd24db438, expr0x7f6bd24d8438)
      in let step_45_160 = 
        Action.return(expr0x7f6bd24db438)
      in Block.block(
        45,
        [|
          step_45_149;
          step_45_150;
          step_45_151;
          step_45_152;
          step_45_153;
          step_45_154;
          step_45_155;
          step_45_156;
          step_45_157;
          step_45_158;
          step_45_159;
          step_45_160;
        |],
        [|
          (* no calls *)
        |],
        [|
          "assume TRUE (val_98 >= mmap_max_addr_67)";
          "assume TRUE (val_98 < mmap_min_addr.155_11)";
          "assume TRUE (error_87 != 0)";
          "assume TRUE (_23 <= _24)";
          "assume TRUE (_25 <= _26)";
          "assume TRUE (_32 != 0)";
          "assume TRUE (_34 == 0B)";
          "assume TRUE (_35 > 368)";
          "assume TRUE (_43 != 0)";
          "out [0.00%]:";
          "_100 = error_44;";
          "# VUSE <.MEM_56>\nreturn _100;";
        |]
      )
    in let block_1 = 
      let step_0_161 = Action.finish 
      in Block.block (
        1,
        [| step_0_161 |],
        [||],
        [| "<EXIT>" |]
      )
    in let cfg = Cfg.cfg (
      46,
      Z.of_string "5128",
      [|
        Cfg.vert ("[0]", block_0, [|
            Cfg.edge (2, "[2]", block_2, Z.of_string "0", Z.of_string "5127");
          |]
        );
        Cfg.vert ("[1]", block_1, [|
          |]
        );
        Cfg.vert ("[2]", block_2, [|
            Cfg.edge (3, "[3]", block_3, Z.of_string "0", Z.of_string "2563");
            Cfg.edge (7, "[7]", block_7, Z.of_string "2564", Z.of_string "5127");
          |]
        );
        Cfg.vert ("[3]", block_3, [|
            Cfg.edge (4, "[4]", block_4, Z.of_string "0", Z.of_string "1281");
            Cfg.edge (5, "[5]", block_5, Z.of_string "1282", Z.of_string "2563");
          |]
        );
        Cfg.vert ("[4]", block_4, [|
            Cfg.edge (6, "[6]", block_6, Z.of_string "0", Z.of_string "1281");
          |]
        );
        Cfg.vert ("[5]", block_5, [|
            Cfg.edge (6, "[6]", block_6, Z.of_string "0", Z.of_string "1281");
          |]
        );
        Cfg.vert ("[6]", block_6, [|
            Cfg.edge (11, "[11]", block_11, Z.of_string "0", Z.of_string "1281");
          |]
        );
        Cfg.vert ("[7]", block_7, [|
            Cfg.edge (8, "[8]", block_8, Z.of_string "0", Z.of_string "1281");
            Cfg.edge (9, "[9]", block_9, Z.of_string "1282", Z.of_string "2563");
          |]
        );
        Cfg.vert ("[8]", block_8, [|
            Cfg.edge (10, "[10]", block_10, Z.of_string "0", Z.of_string "1281");
          |]
        );
        Cfg.vert ("[9]", block_9, [|
            Cfg.edge (10, "[10]", block_10, Z.of_string "0", Z.of_string "1281");
          |]
        );
        Cfg.vert ("[10]", block_10, [|
            Cfg.edge (11, "[11]", block_11, Z.of_string "0", Z.of_string "1281");
          |]
        );
        Cfg.vert ("[11]", block_11, [|
            Cfg.edge (45, "[0 | 15]", block_15, Z.of_string "0", Z.of_string "1281");
          |]
        );
        Cfg.vert ("[16]", block_16, [|
            Cfg.edge (13, "[17]", block_17, Z.of_string "0", Z.of_string "319");
            Cfg.edge (14, "[18]", block_18, Z.of_string "320", Z.of_string "639");
          |]
        );
        Cfg.vert ("[17]", block_17, [|
            Cfg.edge (15, "[19]", block_19, Z.of_string "0", Z.of_string "319");
          |]
        );
        Cfg.vert ("[18]", block_18, [|
            Cfg.edge (15, "[19]", block_19, Z.of_string "0", Z.of_string "319");
          |]
        );
        Cfg.vert ("[19]", block_19, [|
            Cfg.edge (16, "[20]", block_20, Z.of_string "0", Z.of_string "159");
            Cfg.edge (17, "[21]", block_21, Z.of_string "160", Z.of_string "319");
          |]
        );
        Cfg.vert ("[20]", block_20, [|
            Cfg.edge (18, "[22]", block_22, Z.of_string "0", Z.of_string "159");
          |]
        );
        Cfg.vert ("[21]", block_21, [|
            Cfg.edge (18, "[22]", block_22, Z.of_string "0", Z.of_string "159");
          |]
        );
        Cfg.vert ("[22]", block_22, [|
            Cfg.edge (19, "[23]", block_23, Z.of_string "0", Z.of_string "79");
            Cfg.edge (20, "[24]", block_24, Z.of_string "80", Z.of_string "159");
          |]
        );
        Cfg.vert ("[23]", block_23, [|
            Cfg.edge (21, "[25]", block_25, Z.of_string "0", Z.of_string "79");
          |]
        );
        Cfg.vert ("[24]", block_24, [|
            Cfg.edge (21, "[25]", block_25, Z.of_string "0", Z.of_string "79");
          |]
        );
        Cfg.vert ("[25]", block_25, [|
            Cfg.edge (22, "[26]", block_26, Z.of_string "0", Z.of_string "39");
            Cfg.edge (23, "[27]", block_27, Z.of_string "40", Z.of_string "79");
          |]
        );
        Cfg.vert ("[26]", block_26, [|
            Cfg.edge (24, "[28]", block_28, Z.of_string "0", Z.of_string "39");
          |]
        );
        Cfg.vert ("[27]", block_27, [|
            Cfg.edge (24, "[28]", block_28, Z.of_string "0", Z.of_string "39");
          |]
        );
        Cfg.vert ("[28]", block_28, [|
            Cfg.edge (25, "[29]", block_29, Z.of_string "0", Z.of_string "19");
            Cfg.edge (26, "[30]", block_30, Z.of_string "20", Z.of_string "39");
          |]
        );
        Cfg.vert ("[29]", block_29, [|
            Cfg.edge (27, "[31]", block_31, Z.of_string "0", Z.of_string "19");
          |]
        );
        Cfg.vert ("[30]", block_30, [|
            Cfg.edge (27, "[31]", block_31, Z.of_string "0", Z.of_string "19");
          |]
        );
        Cfg.vert ("[31]", block_31, [|
            Cfg.edge (28, "[32]", block_32, Z.of_string "0", Z.of_string "18");
            Cfg.edge (41, "[45]", block_45, Z.of_string "19", Z.of_string "19");
          |]
        );
        Cfg.vert ("[32]", block_32, [|
            Cfg.edge (29, "[33]", block_33, Z.of_string "0", Z.of_string "17");
            Cfg.edge (41, "[45]", block_45, Z.of_string "18", Z.of_string "18");
          |]
        );
        Cfg.vert ("[33]", block_33, [|
            Cfg.edge (30, "[34]", block_34, Z.of_string "0", Z.of_string "16");
            Cfg.edge (41, "[45]", block_45, Z.of_string "17", Z.of_string "17");
          |]
        );
        Cfg.vert ("[34]", block_34, [|
            Cfg.edge (31, "[35]", block_35, Z.of_string "0", Z.of_string "15");
            Cfg.edge (41, "[45]", block_45, Z.of_string "16", Z.of_string "16");
          |]
        );
        Cfg.vert ("[35]", block_35, [|
            Cfg.edge (32, "[36]", block_36, Z.of_string "0", Z.of_string "8");
            Cfg.edge (34, "[38]", block_38, Z.of_string "9", Z.of_string "15");
          |]
        );
        Cfg.vert ("[36]", block_36, [|
            Cfg.edge (33, "[37]", block_37, Z.of_string "0", Z.of_string "7");
            Cfg.edge (41, "[45]", block_45, Z.of_string "8", Z.of_string "8");
          |]
        );
        Cfg.vert ("[37]", block_37, [|
            Cfg.edge (34, "[38]", block_38, Z.of_string "0", Z.of_string "6");
            Cfg.edge (41, "[45]", block_45, Z.of_string "7", Z.of_string "7");
          |]
        );
        Cfg.vert ("[38]", block_38, [|
            Cfg.edge (35, "[39]", block_39, Z.of_string "0", Z.of_string "5");
            Cfg.edge (40, "[44]", block_44, Z.of_string "6", Z.of_string "6");
          |]
        );
        Cfg.vert ("[39]", block_39, [|
            Cfg.edge (36, "[40]", block_40, Z.of_string "0", Z.of_string "3");
            Cfg.edge (38, "[42]", block_42, Z.of_string "4", Z.of_string "5");
          |]
        );
        Cfg.vert ("[40]", block_40, [|
            Cfg.edge (37, "[41]", block_41, Z.of_string "0", Z.of_string "1");
            Cfg.edge (38, "[42]", block_42, Z.of_string "2", Z.of_string "3");
          |]
        );
        Cfg.vert ("[41]", block_41, [|
            Cfg.edge (39, "[43]", block_43, Z.of_string "0", Z.of_string "1");
          |]
        );
        Cfg.vert ("[42]", block_42, [|
            Cfg.edge (39, "[43]", block_43, Z.of_string "0", Z.of_string "1");
          |]
        );
        Cfg.vert ("[43]", block_43, [|
            Cfg.edge (40, "[44]", block_44, Z.of_string "0", Z.of_string "0");
            Cfg.edge (41, "[45]", block_45, Z.of_string "1", Z.of_string "1");
          |]
        );
        Cfg.vert ("[44]", block_44, [|
            Cfg.edge (41, "[45]", block_45, Z.of_string "0", Z.of_string "0");
          |]
        );
        Cfg.vert ("[45]", block_45, [|
            Cfg.edge (1, "[1]", block_1, Z.of_string "0", Z.of_string "0");
          |]
        );
        Cfg.vert ("[0 | 12]", block_12, [|
            Cfg.edge (43, "[0 | 13]", block_13, Z.of_string "0", Z.of_string "640");
            Cfg.edge (41, "[45]", block_45, Z.of_string "641", Z.of_string "641");
          |]
        );
        Cfg.vert ("[0 | 13]", block_13, [|
            Cfg.edge (44, "[0 | 14]", block_14, Z.of_string "0", Z.of_string "639");
            Cfg.edge (41, "[45]", block_45, Z.of_string "640", Z.of_string "640");
          |]
        );
        Cfg.vert ("[0 | 14]", block_14, [|
            Cfg.edge (46, "[1 | 15]", block_15, Z.of_string "0", Z.of_string "639");
          |]
        );
        Cfg.vert ("[0 | 15]", block_15, [|
            Cfg.edge (42, "[0 | 12]", block_12, Z.of_string "0", Z.of_string "641");
            Cfg.edge (12, "[16]", block_16, Z.of_string "642", Z.of_string "1281");
          |]
        );
        Cfg.vert ("[1 | 15]", block_15, [|
            Cfg.edge (12, "[16]", block_16, Z.of_string "0", Z.of_string "639");
          |]
        );
      |]
    )
    in Proc.proc(
     "validate_prctl_map",
      3563,
     "/target/linux",
     "kernel/sys.c",
     "sys.c",
      cfg
    )
  in Driver.execute main;;
  