(* AUTO-GENERATED by c2ocaml plugin 1.0 *)

open Lsee;;
open Utils;;
open State;;
open Driver;;
open Blocks;;
open Actions;;
open GccTypes;;
open Procedures;;
open Expressions;;

let main = 
  (*-------------------------------------------------------- 
    // working_directory: /target/hexchat/build
    // source_file_name: ../src/common/server.c
    // base_name: server.c
    // name: ssl_do_connect
    // fid: 993
    ---------------------------------------------------------*)
  
    let _typeSELF = GccType.pointer(GccType.self)
    in let type0x7f9e66d6c5e8 = 
      GccType.integer(true, 32, 32, Z.of_string "-2147483648", Z.of_string "2147483647")
    in let type0x7f9e66d6c690 = 
      GccType.integer(false, 32, 32, Z.of_string "0", Z.of_string "4294967295")
    in let type0x7f9e66d6c3f0 = 
      GccType.integer(false, 8, 8, Z.of_string "0", Z.of_string "255")
    in let type0x7f9e66d77f18 = 
      GccType.pointer(type0x7f9e66d6c3f0)
    in let type0x7f9e66d6c348 = 
      GccType.integer(false, 8, 8, Z.of_string "0", Z.of_string "255")
    in let type0x7f9e64e3fc78 = 
      GccType.record("SSL_SESSION", [|
          (* var decls *)
        |], [|
          (* field decls *)
        |], [|
          (* type decls *)
        |], [|
          (* const decls *)
        |])
    in let type0x7f9e64a70348 = 
      GccType.pointer(type0x7f9e64e3fc78)
    in let type0x7f9e66d6c738 = 
      GccType.integer(true, 64, 64, Z.of_string "-9223372036854775808", Z.of_string "9223372036854775807")
    in let type0x7f9e64b5a348 = 
      GccType.record("session", [|
          (* var decls *)
        |], [|
          (* field decls *)
        |], [|
          (* type decls *)
        |], [|
          (* const decls *)
        |])
    in let type0x7f9e64b5a3f0 = 
      GccType.pointer(type0x7f9e64b5a348)
    in let type0x7f9e64bb9000 = 
      GccType.record("server", [|
          (* var decls *)
        |], [|
          (* field decls *)
        |], [|
          (* type decls *)
        |], [|
          (* const decls *)
        |])
    in let type0x7f9e64bc1000 = 
      GccType.pointer(type0x7f9e64bb9000)
    in let type0x7f9e64f23690 = 
      GccType.integer(true, 64, 64, Z.of_string "0", Z.of_string "127")
    in let type0x7f9e64b5ac78 = 
      GccType.array(type0x7f9e66d6c3f0, type0x7f9e64f23690)
    in let type0x7f9e648642a0 = 
      GccType.pointer(type0x7f9e64b5ac78)
    in let type0x7f9e65407e70 = 
      GccType.record("SSL", [|
          (* var decls *)
        |], [|
          (* field decls *)
        |], [|
          (* type decls *)
        |], [|
          (* const decls *)
        |])
    in let type0x7f9e64e53498 = 
      GccType.pointer(type0x7f9e65407e70)
    in let type0x7f9e66d6c7e0 = 
      GccType.integer(false, 64, 64, Z.of_string "0", Z.of_string "18446744073709551615")
    in let type0x7f9e660ccbd0 = 
      GccType.integer(true, 32, 32, Z.of_string "-2147483648", Z.of_string "2147483647")
    in let type0x7f9e65d94d20 = 
      GccType.integer(true, 64, 64, Z.of_string "0", Z.of_string "255")
    in let type0x7f9e65d94dc8 = 
      GccType.array(type0x7f9e66d6c3f0, type0x7f9e65d94d20)
    in let type0x7f9e64864930 = 
      GccType.pointer(type0x7f9e65d94dc8)
    in let type0x7f9e66edd930 = 
      GccType.integer(true, 64, 64, Z.of_string "0", Z.of_string "7")
    in let type0x7f9e66edd9d8 = 
      GccType.array(type0x7f9e66d6c3f0, type0x7f9e66edd930)
    in let type0x7f9e6484d2a0 = 
      GccType.pointer(type0x7f9e66edd9d8)
    in let type0x7f9e66d6cf18 = 
      GccType.void
    in let type0x7f9e66f399d8 = 
      GccType.integer(true, 64, 64, Z.of_string "-9223372036854775808", Z.of_string "9223372036854775807")
    in let type0x7f9e66d78348 = 
      GccType.integer(false, 8, 8, Z.of_string "0", Z.of_string "255")
    in let type0x7f9e66d783f0 = 
      GccType.pointer(type0x7f9e66d78348)
    in let type0x7f9e64bf0f18 = 
      GccType.integer(true, 64, 64, Z.of_string "0", Z.of_string "52")
    in let type0x7f9e64856bd0 = 
      GccType.array(type0x7f9e66d6c3f0, type0x7f9e64bf0f18)
    in let type0x7f9e64856c78 = 
      GccType.pointer(type0x7f9e64856bd0)
    in let type0x7f9e64b5ab28 = 
      GccType.record("hexchatprefs", [|
          (* var decls *)
        |], [|
          (* field decls *)
        |], [|
          (* type decls *)
        |], [|
          (* const decls *)
        |])
    in let type0x7f9e6483b0a8 = 
      GccType.record("cert_info", [|
          (* var decls *)
        |], [|
          (* field decls *)
        |], [|
          (* type decls *)
        |], [|
          (* const decls *)
        |])
    in let type0x7f9e648413f0 = 
      GccType.pointer(type0x7f9e6483b0a8)
    in let type0x7f9e6486c2a0 = 
      GccType.integer(true, 64, 64, Z.of_string "0", Z.of_string "21")
    in let type0x7f9e6486c348 = 
      GccType.array(type0x7f9e66d6c3f0, type0x7f9e6486c2a0)
    in let type0x7f9e6486c3f0 = 
      GccType.pointer(type0x7f9e6486c348)
    in let type0x7f9e65f77f18 = 
      GccType.integer(true, 64, 64, Z.of_string "0", Z.of_string "10")
    in let type0x7f9e65f77e70 = 
      GccType.array(type0x7f9e66d6c3f0, type0x7f9e65f77f18)
    in let type0x7f9e6486c498 = 
      GccType.pointer(type0x7f9e65f77e70)
    in let type0x7f9e66013348 = 
      GccType.integer(true, 64, 64, Z.of_string "0", Z.of_string "11")
    in let type0x7f9e6483b150 = 
      GccType.array(type0x7f9e66d77f18, type0x7f9e66013348)
    in let type0x7f9e65f63348 = 
      GccType.integer(true, 64, 64, Z.of_string "0", Z.of_string "6")
    in let type0x7f9e65f9e0a8 = 
      GccType.array(type0x7f9e66d6c3f0, type0x7f9e65f63348)
    in let type0x7f9e6484d498 = 
      GccType.pointer(type0x7f9e65f9e0a8)
    in let type0x7f9e66edd000 = 
      GccType.integer(true, 64, 64, Z.of_string "0", Z.of_string "9")
    in let type0x7f9e66edd0a8 = 
      GccType.array(type0x7f9e66d6c3f0, type0x7f9e66edd000)
    in let type0x7f9e6486c7e0 = 
      GccType.pointer(type0x7f9e66edd0a8)
    in let type0x7f9e6486c888 = 
      GccType.integer(true, 64, 64, Z.of_string "0", Z.of_string "36")
    in let type0x7f9e6486c9d8 = 
      GccType.array(type0x7f9e66d6c3f0, type0x7f9e6486c888)
    in let type0x7f9e6486ca80 = 
      GccType.pointer(type0x7f9e6486c9d8)
    in let type0x7f9e65f68348 = 
      GccType.integer(true, 64, 64, Z.of_string "0", Z.of_string "31")
    in let type0x7f9e65f683f0 = 
      GccType.array(type0x7f9e66d6c3f0, type0x7f9e65f68348)
    in let type0x7f9e6486cbd0 = 
      GccType.pointer(type0x7f9e65f683f0)
    in let type0x7f9e66ebe1f8 = 
      GccType.integer(true, 64, 64, Z.of_string "0", Z.of_string "19")
    in let type0x7f9e66ebe930 = 
      GccType.array(type0x7f9e66d6c3f0, type0x7f9e66ebe1f8)
    in let type0x7f9e6486cc78 = 
      GccType.pointer(type0x7f9e66ebe930)
    in let type0x7f9e66039000 = 
      GccType.integer(true, 64, 64, Z.of_string "0", Z.of_string "22")
    in let type0x7f9e648730a8 = 
      GccType.array(type0x7f9e66d6c3f0, type0x7f9e66039000)
    in let type0x7f9e64873150 = 
      GccType.pointer(type0x7f9e648730a8)
    in let type0x7f9e66ee5bd0 = 
      GccType.integer(true, 64, 64, Z.of_string "0", Z.of_string "14")
    in let type0x7f9e66ee5c78 = 
      GccType.array(type0x7f9e66d6c3f0, type0x7f9e66ee5bd0)
    in let type0x7f9e64873348 = 
      GccType.pointer(type0x7f9e66ee5c78)
    in let type0x7f9e6483b7e0 = 
      GccType.record("chiper_info", [|
          (* var decls *)
        |], [|
          (* field decls *)
        |], [|
          (* type decls *)
        |], [|
          (* const decls *)
        |])
    in let type0x7f9e648415e8 = 
      GccType.pointer(type0x7f9e6483b7e0)
    in let type0x7f9e65f609d8 = 
      GccType.integer(true, 64, 64, Z.of_string "0", Z.of_string "47")
    in let type0x7f9e65f60a80 = 
      GccType.array(type0x7f9e66d6c3f0, type0x7f9e65f609d8)
    in let type0x7f9e64873930 = 
      GccType.pointer(type0x7f9e65f60a80)
    in let type0x7f9e66ee5888 = 
      GccType.integer(true, 64, 64, Z.of_string "0", Z.of_string "15")
    in let type0x7f9e66ee5930 = 
      GccType.array(type0x7f9e66d6c3f0, type0x7f9e66ee5888)
    in let type0x7f9e64873888 = 
      GccType.pointer(type0x7f9e66ee5930)
    in let type0x7f9e65c4c690 = 
      GccType.integer(true, 64, 64, Z.of_string "0", Z.of_string "34")
    in let type0x7f9e65c4c738 = 
      GccType.array(type0x7f9e66d6c3f0, type0x7f9e65c4c690)
    in let type0x7f9e648737e0 = 
      GccType.pointer(type0x7f9e65c4c738)
    in let type0x7f9e65402930 = 
      GccType.record("X509", [|
          (* var decls *)
        |], [|
          (* field decls *)
        |], [|
          (* type decls *)
        |], [|
          (* const decls *)
        |])
    in let type0x7f9e64f80b28 = 
      GccType.pointer(type0x7f9e65402930)
    in let type0x7f9e66092888 = 
      GccType.array(type0x7f9e66d6c3f0, type0x7f9e66013348)
    in let type0x7f9e64873000 = 
      GccType.pointer(type0x7f9e66092888)
    in let type0x7f9e66d77dc8 = 
      GccType.integer(true, 64, 64, Z.of_string "0", Z.of_string "0")
    in let type0x7f9e66ebe2a0 = 
      GccType.array(type0x7f9e66d6c3f0, type0x7f9e66d77dc8)
    in let type0x7f9e648731f8 = 
      GccType.pointer(type0x7f9e66ebe2a0)
    in let type0x7f9e65c52150 = 
      GccType.integer(true, 64, 64, Z.of_string "0", Z.of_string "32")
    in let type0x7f9e65c521f8 = 
      GccType.array(type0x7f9e66d6c3f0, type0x7f9e65c52150)
    in let type0x7f9e648732a0 = 
      GccType.pointer(type0x7f9e65c521f8)
    in let type0x7f9e660b2b28 = 
      GccType.pointer(type0x7f9e66f399d8)
    in let type0x7f9e66027888 = 
      GccType.integer(true, 64, 64, Z.of_string "0", Z.of_string "23")
    in let type0x7f9e64873f18 = 
      GccType.array(type0x7f9e66d6c3f0, type0x7f9e66027888)
    in let type0x7f9e64873e70 = 
      GccType.pointer(type0x7f9e64873f18)
    in let expr0x7f9e64931708 = 
      Expr.ssa("_5", 5, Expr.nothing(type0x7f9e66d6c5e8))
    in let expr0x7f9e66d71078 = 
      Expr.s_int_cst(type0x7f9e66d6c5e8, Z.of_string "0")
    in let expr0x7f9e6486e090 = 
      Expr.variable_decl(type0x7f9e66d6c5e8, VarDecl.make("err", 32, 32))
    in let expr0x7f9e64a148b8 = 
      Expr.ssa("err_83", 83, expr0x7f9e6486e090)
    in let expr0x7f9e64931828 = 
      Expr.ssa("_9", 9, Expr.nothing(type0x7f9e66d6c5e8))
    in let expr0x7f9e65f32ca8 = 
      Expr.s_int_cst(type0x7f9e66d6c5e8, Z.of_string "267")
    in let expr0x7f9e64931948 = 
      Expr.ssa("_12", 12, Expr.nothing(type0x7f9e66d6c690))
    in let expr0x7f9e66d54f48 = 
      Expr.u_int_cst(type0x7f9e66d6c690, Z.of_string "0")
    in let expr0x7f9e649319d8 = 
      Expr.ssa("_14", 14, Expr.nothing(type0x7f9e66d6c5e8))
    in let expr0x7f9e64931a68 = 
      Expr.ssa("_16", 16, Expr.nothing(type0x7f9e66d6c5e8))
    in let expr0x7f9e6486e2d0 = 
      Expr.variable_decl(type0x7f9e66d6c5e8, VarDecl.make("i", 32, 32))
    in let expr0x7f9e64a141f8 = 
      Expr.ssa("i_59", 59, expr0x7f9e6486e2d0)
    in let expr0x7f9e64a17120 = 
      Expr.ssa("i_112", 112, expr0x7f9e6486e2d0)
    in let expr0x7f9e64a17558 = 
      Expr.ssa("i_127", 127, expr0x7f9e6486e2d0)
    in let expr0x7f9e64931bd0 = 
      Expr.ssa("_21", 21, Expr.nothing(type0x7f9e66d77f18))
    in let expr0x7f9e66f00480 = 
      Expr.u_int_cst(type0x7f9e66d77f18, Z.of_string "0")
    in let expr0x7f9e64a14240 = 
      Expr.ssa("i_60", 60, expr0x7f9e6486e2d0)
    in let expr0x7f9e64a171f8 = 
      Expr.ssa("i_115", 115, expr0x7f9e6486e2d0)
    in let expr0x7f9e64a17480 = 
      Expr.ssa("i_124", 124, expr0x7f9e6486e2d0)
    in let expr0x7f9e64931cf0 = 
      Expr.ssa("_25", 25, Expr.nothing(type0x7f9e66d77f18))
    in let expr0x7f9e6486e240 = 
      Expr.variable_decl(type0x7f9e66d6c5e8, VarDecl.make("verify_error", 32, 32))
    in let expr0x7f9e64a17798 = 
      Expr.ssa("verify_error_135", 135, expr0x7f9e6486e240)
    in let expr0x7f9e66f00e58 = 
      Expr.s_int_cst(type0x7f9e66d6c5e8, Z.of_string "10")
    in let expr0x7f9e65fd3210 = 
      Expr.s_int_cst(type0x7f9e66d6c5e8, Z.of_string "18")
    in let expr0x7f9e65fd37f8 = 
      Expr.s_int_cst(type0x7f9e66d6c5e8, Z.of_string "21")
    in let expr0x7f9e6486e3f0 = 
      Expr.variable_decl(type0x7f9e66d6c5e8, VarDecl.make("hostname_err", 32, 32))
    in let expr0x7f9e64a17990 = 
      Expr.ssa("hostname_err_142", 142, expr0x7f9e6486e3f0)
    in let expr0x7f9e649420d8 = 
      Expr.ssa("_41", 41, Expr.nothing(type0x7f9e66d6c348))
    in let expr0x7f9e66d54df8 = 
      Expr.u_int_cst(type0x7f9e66d6c348, Z.of_string "0")
    in let expr0x7f9e64a14318 = 
      Expr.ssa("iftmp.10_63", 63, Expr.nothing(type0x7f9e66d77f18))
    in let expr0x7f9e64a17a20 = 
      Expr.ssa("iftmp.10_144", 144, Expr.nothing(type0x7f9e66d77f18))
    in let expr0x7f9e64a179d8 = 
      Expr.ssa("iftmp.10_143", 143, Expr.nothing(type0x7f9e66d77f18))
    in let expr0x7f9e64942168 = 
      Expr.ssa("_43", 43, Expr.nothing(type0x7f9e66d6c348))
    in let expr0x7f9e64942240 = 
      Expr.ssa("_46", 46, Expr.nothing(type0x7f9e66d6c348))
    in let expr0x7f9e64a14288 = 
      Expr.ssa("_61", 61, Expr.nothing(type0x7f9e66d6c5e8))
    in let expr0x7f9e64a17cf0 = 
      Expr.ssa("_154", 154, Expr.nothing(type0x7f9e66d6c5e8))
    in let expr0x7f9e64a17b88 = 
      Expr.ssa("_149", 149, Expr.nothing(type0x7f9e66d6c5e8))
    in let expr0x7f9e6486e480 = 
      Expr.variable_decl(type0x7f9e64a70348, VarDecl.make("session", 64, 64))
    in let expr0x7f9e64a14ca8 = 
      Expr.ssa("session_97", 97, expr0x7f9e6486e480)
    in let expr0x7f9e64875270 = 
      Expr.u_int_cst(type0x7f9e64a70348, Z.of_string "0")
    in let expr0x7f9e649424c8 = 
      Expr.ssa("_55", 55, Expr.nothing(type0x7f9e66d6c738))
    in let expr0x7f9e64942510 = 
      Expr.ssa("_56", 56, Expr.nothing(type0x7f9e66d6c738))
    in let expr0x7f9e649425a0 = 
      Expr.ssa("_58", 58, Expr.nothing(type0x7f9e66d6c690))
    in let expr0x7f9e64a142d0 = 
      Expr.ssa("_62", 62, Expr.nothing(type0x7f9e66d6c5e8))
    in let expr0x7f9e64a14b40 = 
      Expr.ssa("_92", 92, Expr.nothing(type0x7f9e66d6c5e8))
    in let expr0x7f9e64a14ea0 = 
      Expr.ssa("_104", 104, Expr.nothing(type0x7f9e66d6c5e8))
    in let expr0x7f9e64a14ee8 = 
      Expr.ssa("_105", 105, Expr.nothing(type0x7f9e66d6c5e8))
    in let expr0x7f9e649315e8 = 
      Expr.ssa("_1", 1, Expr.nothing(type0x7f9e64b5a3f0))
    in let expr0x7f9e64ba7720 = 
      Expr.field_decl(type0x7f9e64b5a3f0, FieldDecl.make("server_session", "64", 64, "2960", 128, 0, false))
    in let expr0x7f9e648dcd38 = 
      Expr.u_int_cst(type0x7f9e64bc1000, Z.of_string "0")
    in let expr0x7f9e64861580 = 
      Expr.parameter_decl(type0x7f9e64bc1000, "serv", type0x7f9e64bc1000)
    in let expr0x7f9e64a14708 = 
      Expr.ssa("serv_77(D)", 77, expr0x7f9e64861580)
    in let expr0x7f9e6493a758 = 
      Expr.memory_ref(type0x7f9e64bb9000, expr0x7f9e64a14708, expr0x7f9e648dcd38)
    in let expr0x7f9e64918fc0 = 
      Expr.component_ref(type0x7f9e64b5a3f0, expr0x7f9e6493a758, expr0x7f9e64ba7720)
    in let expr0x7f9e64c43990 = 
      Expr.variable_decl(type0x7f9e64b5a3f0, VarDecl.make("g_sess", 64, 64))
    in let expr0x7f9e64931630 = 
      Expr.ssa("_2", 2, Expr.nothing(type0x7f9e648642a0))
    in let expr0x7f9e64ba4980 = 
      Expr.field_decl(type0x7f9e64b5ac78, FieldDecl.make("hostname", "1024", 8, "368", 128, 96, false))
    in let expr0x7f9e6493a7d0 = 
      Expr.memory_ref(type0x7f9e64bb9000, expr0x7f9e64a14708, expr0x7f9e648dcd38)
    in let expr0x7f9e64918510 = 
      Expr.component_ref(type0x7f9e64b5ac78, expr0x7f9e6493a7d0, expr0x7f9e64ba4980)
    in let expr0x7f9e6493b280 = 
      Expr.address_of(type0x7f9e648642a0, expr0x7f9e64918510)
    in let expr0x7f9e64931678 = 
      Expr.ssa("_3", 3, Expr.nothing(type0x7f9e64e53498))
    in let expr0x7f9e64ba44c0 = 
      Expr.field_decl(type0x7f9e64e53498, FieldDecl.make("ssl", "64", 64, "336", 128, 64, false))
    in let expr0x7f9e6493a848 = 
      Expr.memory_ref(type0x7f9e64bb9000, expr0x7f9e64a14708, expr0x7f9e648dcd38)
    in let expr0x7f9e64918db0 = 
      Expr.component_ref(type0x7f9e64e53498, expr0x7f9e6493a848, expr0x7f9e64ba44c0)
    in let expr0x7f9e6605c048 = 
      Expr.s_int_cst(type0x7f9e66d6c5e8, Z.of_string "55")
    in let expr0x7f9e66eaffc0 = 
      Expr.s_int_cst(type0x7f9e66d6c738, Z.of_string "0")
    in let expr0x7f9e649316c0 = 
      Expr.ssa("_4", 4, Expr.nothing(type0x7f9e64e53498))
    in let expr0x7f9e6493a8c0 = 
      Expr.memory_ref(type0x7f9e64bb9000, expr0x7f9e64a14708, expr0x7f9e648dcd38)
    in let expr0x7f9e64918f60 = 
      Expr.component_ref(type0x7f9e64e53498, expr0x7f9e6493a8c0, expr0x7f9e64ba44c0)
    in let expr0x7f9e6482f6d8 = 
      Expr.u_int_cst(type0x7f9e64b5a3f0, Z.of_string "0")
    in let expr0x7f9e64931750 = 
      Expr.ssa("_6", 6, Expr.nothing(type0x7f9e66d6c7e0))
    in let expr0x7f9e64931798 = 
      Expr.ssa("_7", 7, Expr.nothing(type0x7f9e66d6c7e0))
    in let expr0x7f9e6486e000 = 
      Expr.variable_decl(type0x7f9e64b5ac78, VarDecl.make("err_buf", 1024, 8))
    in let expr0x7f9e6486b740 = 
      Expr.address_of(type0x7f9e648642a0, expr0x7f9e6486e000)
    in let expr0x7f9e6484acf0 = 
      Expr.variable_decl(type0x7f9e65d94dc8, VarDecl.make("buf", 2048, 8))
    in let expr0x7f9e6486b7c0 = 
      Expr.address_of(type0x7f9e64864930, expr0x7f9e6484acf0)
    in let expr0x7f9e64862678 = 
      Expr.u_int_cst(type0x7f9e66d6c7e0, Z.of_string "256")
    in let expr0x7f9e6486b800 = 
      Expr.string_cst(type0x7f9e66edd9d8, 8, "\"(%d) %s\"")
    in let expr0x7f9e6486b820 = 
      Expr.address_of(type0x7f9e6484d2a0, expr0x7f9e6486b800)
    in let expr0x7f9e6486b860 = 
      Expr.address_of(type0x7f9e648642a0, expr0x7f9e6486e000)
    in let expr0x7f9e649317e0 = 
      Expr.ssa("_8", 8, Expr.nothing(type0x7f9e64b5a3f0))
    in let expr0x7f9e6493a9b0 = 
      Expr.memory_ref(type0x7f9e64bb9000, expr0x7f9e64a14708, expr0x7f9e648dcd38)
    in let expr0x7f9e6493e030 = 
      Expr.component_ref(type0x7f9e64b5a3f0, expr0x7f9e6493a9b0, expr0x7f9e64ba7720)
    in let expr0x7f9e66046de0 = 
      Expr.s_int_cst(type0x7f9e66d6c5e8, Z.of_string "39")
    in let expr0x7f9e6486b920 = 
      Expr.address_of(type0x7f9e64864930, expr0x7f9e6484acf0)
    in let expr0x7f9e648621b0 = 
      Expr.s_int_cst(type0x7f9e66f399d8, Z.of_string "0")
    in let expr0x7f9e66f3a4e0 = 
      Expr.s_int_cst(type0x7f9e66d6c5e8, Z.of_string "4095")
    in let expr0x7f9e64862948 = 
      Expr.u_int_cst(type0x7f9e66d783f0, Z.of_string "0")
    in let expr0x7f9e64854730 = 
      Expr.string_cst(type0x7f9e64856bd0, 53, "\"Are you sure this is a SSL capable server and port?\\n\"")
    in let expr0x7f9e6493b540 = 
      Expr.address_of(type0x7f9e64856c78, expr0x7f9e64854730)
    in let expr0x7f9e66d71408 = 
      Expr.s_int_cst(type0x7f9e66d6c5e8, Z.of_string "5")
    in let expr0x7f9e64931870 = 
      Expr.ssa("_10", 10, Expr.nothing(type0x7f9e66d77f18))
    in let expr0x7f9e64931900 = 
      Expr.ssa("_11", 11, Expr.nothing(type0x7f9e64b5a3f0))
    in let expr0x7f9e6493aaa0 = 
      Expr.memory_ref(type0x7f9e64bb9000, expr0x7f9e64a14708, expr0x7f9e648dcd38)
    in let expr0x7f9e6493e060 = 
      Expr.component_ref(type0x7f9e64b5a3f0, expr0x7f9e6493aaa0, expr0x7f9e64ba7720)
    in let expr0x7f9e64b6a850 = 
      Expr.field_decl(type0x7f9e66d6c690, FieldDecl.make("hex_net_auto_reconnectonfail", "32", 32, "352", 128, 32, false))
    in let expr0x7f9e64c02090 = 
      Expr.variable_decl(type0x7f9e64b5ab28, VarDecl.make("prefs", 46656, 32))
    in let expr0x7f9e6493e090 = 
      Expr.component_ref(type0x7f9e66d6c690, expr0x7f9e64c02090, expr0x7f9e64b6a850)
    in let expr0x7f9e66d710c0 = 
      Expr.s_int_cst(type0x7f9e66d6c5e8, Z.of_string "-1")
    in let expr0x7f9e6493c450 = 
      Expr.constructor(type0x7f9e64b5ac78)
    in let expr0x7f9e6493c438 = 
      Expr.constructor(type0x7f9e64b5ac78)
    in let expr0x7f9e64931990 = 
      Expr.ssa("_13", 13, Expr.nothing(type0x7f9e64e53498))
    in let expr0x7f9e6493ab40 = 
      Expr.memory_ref(type0x7f9e64bb9000, expr0x7f9e64a14708, expr0x7f9e648dcd38)
    in let expr0x7f9e6493e0c0 = 
      Expr.component_ref(type0x7f9e64e53498, expr0x7f9e6493ab40, expr0x7f9e64ba44c0)
    in let expr0x7f9e64931a20 = 
      Expr.ssa("_15", 15, Expr.nothing(type0x7f9e64e53498))
    in let expr0x7f9e6493abe0 = 
      Expr.memory_ref(type0x7f9e64bb9000, expr0x7f9e64a14708, expr0x7f9e648dcd38)
    in let expr0x7f9e6493e0f0 = 
      Expr.component_ref(type0x7f9e64e53498, expr0x7f9e6493abe0, expr0x7f9e64ba44c0)
    in let expr0x7f9e6486e120 = 
      Expr.variable_decl(type0x7f9e6483b0a8, VarDecl.make("cert_info", 6784, 64))
    in let expr0x7f9e6493b740 = 
      Expr.address_of(type0x7f9e648413f0, expr0x7f9e6486e120)
    in let expr0x7f9e6486bca0 = 
      Expr.address_of(type0x7f9e64864930, expr0x7f9e6484acf0)
    in let expr0x7f9e6486a480 = 
      Expr.string_cst(type0x7f9e6486c348, 22, "\"* Certification info:\"")
    in let expr0x7f9e6486bce0 = 
      Expr.address_of(type0x7f9e6486c3f0, expr0x7f9e6486a480)
    in let expr0x7f9e64931ab0 = 
      Expr.ssa("_17", 17, Expr.nothing(type0x7f9e64b5a3f0))
    in let expr0x7f9e6493ac80 = 
      Expr.memory_ref(type0x7f9e64bb9000, expr0x7f9e64a14708, expr0x7f9e648dcd38)
    in let expr0x7f9e6493e120 = 
      Expr.component_ref(type0x7f9e64b5a3f0, expr0x7f9e6493ac80, expr0x7f9e64ba7720)
    in let expr0x7f9e6605ccd8 = 
      Expr.s_int_cst(type0x7f9e66d6c5e8, Z.of_string "125")
    in let expr0x7f9e6486bda0 = 
      Expr.address_of(type0x7f9e64864930, expr0x7f9e6484acf0)
    in let expr0x7f9e6486be20 = 
      Expr.address_of(type0x7f9e64864930, expr0x7f9e6484acf0)
    in let expr0x7f9e6486be60 = 
      Expr.string_cst(type0x7f9e65f77e70, 11, "\"  Subject:\"")
    in let expr0x7f9e6486be80 = 
      Expr.address_of(type0x7f9e6486c498, expr0x7f9e6486be60)
    in let expr0x7f9e64931af8 = 
      Expr.ssa("_18", 18, Expr.nothing(type0x7f9e64b5a3f0))
    in let expr0x7f9e6493acf8 = 
      Expr.memory_ref(type0x7f9e64bb9000, expr0x7f9e64a14708, expr0x7f9e648dcd38)
    in let expr0x7f9e6493e150 = 
      Expr.component_ref(type0x7f9e64b5a3f0, expr0x7f9e6493acf8, expr0x7f9e64ba7720)
    in let expr0x7f9e6486bf40 = 
      Expr.address_of(type0x7f9e64864930, expr0x7f9e6484acf0)
    in let expr0x7f9e64931b40 = 
      Expr.ssa("_19", 19, Expr.nothing(type0x7f9e66d77f18))
    in let expr0x7f9e6482b428 = 
      Expr.field_decl(type0x7f9e6483b150, FieldDecl.make("subject_word", "768", 64, "256", 128, 0, false))
    in let expr0x7f9e6493e180 = 
      Expr.component_ref(type0x7f9e6483b150, expr0x7f9e6486e120, expr0x7f9e6482b428)
    in let expr0x7f9e6493f1c0 = 
      Expr.array_ref(type0x7f9e66d77f18, expr0x7f9e6493e180, expr0x7f9e64a141f8)
    in let expr0x7f9e6486f020 = 
      Expr.address_of(type0x7f9e64864930, expr0x7f9e6484acf0)
    in let expr0x7f9e6486f060 = 
      Expr.string_cst(type0x7f9e65f9e0a8, 7, "\"    %s\"")
    in let expr0x7f9e6486f080 = 
      Expr.address_of(type0x7f9e6484d498, expr0x7f9e6486f060)
    in let expr0x7f9e64931b88 = 
      Expr.ssa("_20", 20, Expr.nothing(type0x7f9e64b5a3f0))
    in let expr0x7f9e6493ad98 = 
      Expr.memory_ref(type0x7f9e64bb9000, expr0x7f9e64a14708, expr0x7f9e648dcd38)
    in let expr0x7f9e6493e1b0 = 
      Expr.component_ref(type0x7f9e64b5a3f0, expr0x7f9e6493ad98, expr0x7f9e64ba7720)
    in let expr0x7f9e6486f140 = 
      Expr.address_of(type0x7f9e64864930, expr0x7f9e6484acf0)
    in let expr0x7f9e66d71090 = 
      Expr.s_int_cst(type0x7f9e66d6c5e8, Z.of_string "1")
    in let expr0x7f9e6493e1e0 = 
      Expr.component_ref(type0x7f9e6483b150, expr0x7f9e6486e120, expr0x7f9e6482b428)
    in let expr0x7f9e6493f230 = 
      Expr.array_ref(type0x7f9e66d77f18, expr0x7f9e6493e1e0, expr0x7f9e64a141f8)
    in let expr0x7f9e6486f280 = 
      Expr.address_of(type0x7f9e64864930, expr0x7f9e6484acf0)
    in let expr0x7f9e6486f2c0 = 
      Expr.string_cst(type0x7f9e66edd0a8, 10, "\"  Issuer:\"")
    in let expr0x7f9e6486f2e0 = 
      Expr.address_of(type0x7f9e6486c7e0, expr0x7f9e6486f2c0)
    in let expr0x7f9e64931c18 = 
      Expr.ssa("_22", 22, Expr.nothing(type0x7f9e64b5a3f0))
    in let expr0x7f9e6493ae88 = 
      Expr.memory_ref(type0x7f9e64bb9000, expr0x7f9e64a14708, expr0x7f9e648dcd38)
    in let expr0x7f9e6493e210 = 
      Expr.component_ref(type0x7f9e64b5a3f0, expr0x7f9e6493ae88, expr0x7f9e64ba7720)
    in let expr0x7f9e6486f3a0 = 
      Expr.address_of(type0x7f9e64864930, expr0x7f9e6484acf0)
    in let expr0x7f9e64931c60 = 
      Expr.ssa("_23", 23, Expr.nothing(type0x7f9e66d77f18))
    in let expr0x7f9e6482b558 = 
      Expr.field_decl(type0x7f9e6483b150, FieldDecl.make("issuer_word", "768", 64, "608", 128, 0, false))
    in let expr0x7f9e6493e240 = 
      Expr.component_ref(type0x7f9e6483b150, expr0x7f9e6486e120, expr0x7f9e6482b558)
    in let expr0x7f9e6493f310 = 
      Expr.array_ref(type0x7f9e66d77f18, expr0x7f9e6493e240, expr0x7f9e64a14240)
    in let expr0x7f9e6486f420 = 
      Expr.address_of(type0x7f9e64864930, expr0x7f9e6484acf0)
    in let expr0x7f9e6486f460 = 
      Expr.string_cst(type0x7f9e65f9e0a8, 7, "\"    %s\"")
    in let expr0x7f9e6486f480 = 
      Expr.address_of(type0x7f9e6484d498, expr0x7f9e6486f460)
    in let expr0x7f9e64931ca8 = 
      Expr.ssa("_24", 24, Expr.nothing(type0x7f9e64b5a3f0))
    in let expr0x7f9e6493af28 = 
      Expr.memory_ref(type0x7f9e64bb9000, expr0x7f9e64a14708, expr0x7f9e648dcd38)
    in let expr0x7f9e6493e270 = 
      Expr.component_ref(type0x7f9e64b5a3f0, expr0x7f9e6493af28, expr0x7f9e64ba7720)
    in let expr0x7f9e6486f540 = 
      Expr.address_of(type0x7f9e64864930, expr0x7f9e6484acf0)
    in let expr0x7f9e6493e2a0 = 
      Expr.component_ref(type0x7f9e6483b150, expr0x7f9e6486e120, expr0x7f9e6482b558)
    in let expr0x7f9e6493f380 = 
      Expr.array_ref(type0x7f9e66d77f18, expr0x7f9e6493e2a0, expr0x7f9e64a14240)
    in let expr0x7f9e64931d38 = 
      Expr.ssa("_26", 26, Expr.nothing(type0x7f9e66d6c5e8))
    in let expr0x7f9e6482b688 = 
      Expr.field_decl(type0x7f9e66d6c5e8, FieldDecl.make("algorithm_bits", "32", 32, "736", 128, 0, false))
    in let expr0x7f9e6493e2d0 = 
      Expr.component_ref(type0x7f9e66d6c5e8, expr0x7f9e6486e120, expr0x7f9e6482b688)
    in let expr0x7f9e6486f680 = 
      Expr.address_of(type0x7f9e64864930, expr0x7f9e6484acf0)
    in let expr0x7f9e64adcac0 = 
      Expr.string_cst(type0x7f9e6486c9d8, 37, "\"  Public key algorithm: %s (%d bits)\"")
    in let expr0x7f9e6486f6c0 = 
      Expr.address_of(type0x7f9e6486ca80, expr0x7f9e64adcac0)
    in let expr0x7f9e6482b5f0 = 
      Expr.field_decl(type0x7f9e65f683f0, FieldDecl.make("algorithm", "256", 8, "704", 128, 0, false))
    in let expr0x7f9e6486a6c0 = 
      Expr.component_ref(type0x7f9e65f683f0, expr0x7f9e6486e120, expr0x7f9e6482b5f0)
    in let expr0x7f9e6486f700 = 
      Expr.address_of(type0x7f9e6486cbd0, expr0x7f9e6486a6c0)
    in let expr0x7f9e64931d80 = 
      Expr.ssa("_27", 27, Expr.nothing(type0x7f9e64b5a3f0))
    in let expr0x7f9e6493a168 = 
      Expr.memory_ref(type0x7f9e64bb9000, expr0x7f9e64a14708, expr0x7f9e648dcd38)
    in let expr0x7f9e6493e300 = 
      Expr.component_ref(type0x7f9e64b5a3f0, expr0x7f9e6493a168, expr0x7f9e64ba7720)
    in let expr0x7f9e6486f7c0 = 
      Expr.address_of(type0x7f9e64864930, expr0x7f9e6484acf0)
    in let expr0x7f9e6486f840 = 
      Expr.address_of(type0x7f9e64864930, expr0x7f9e6484acf0)
    in let expr0x7f9e6486a750 = 
      Expr.string_cst(type0x7f9e66ebe930, 20, "\"  Sign algorithm %s\"")
    in let expr0x7f9e6486f880 = 
      Expr.address_of(type0x7f9e6486cc78, expr0x7f9e6486a750)
    in let expr0x7f9e6482b720 = 
      Expr.field_decl(type0x7f9e65f683f0, FieldDecl.make("sign_algorithm", "256", 8, "736", 128, 32, false))
    in let expr0x7f9e6486a780 = 
      Expr.component_ref(type0x7f9e65f683f0, expr0x7f9e6486e120, expr0x7f9e6482b720)
    in let expr0x7f9e6486f8c0 = 
      Expr.address_of(type0x7f9e6486cbd0, expr0x7f9e6486a780)
    in let expr0x7f9e64931dc8 = 
      Expr.ssa("_28", 28, Expr.nothing(type0x7f9e64b5a3f0))
    in let expr0x7f9e6493a258 = 
      Expr.memory_ref(type0x7f9e64bb9000, expr0x7f9e64a14708, expr0x7f9e648dcd38)
    in let expr0x7f9e6493e330 = 
      Expr.component_ref(type0x7f9e64b5a3f0, expr0x7f9e6493a258, expr0x7f9e64ba7720)
    in let expr0x7f9e6486f980 = 
      Expr.address_of(type0x7f9e64864930, expr0x7f9e6484acf0)
    in let expr0x7f9e6486fa00 = 
      Expr.address_of(type0x7f9e64864930, expr0x7f9e6484acf0)
    in let expr0x7f9e6486a7e0 = 
      Expr.string_cst(type0x7f9e648730a8, 23, "\"  Valid since %s to %s\"")
    in let expr0x7f9e6486fa40 = 
      Expr.address_of(type0x7f9e64873150, expr0x7f9e6486a7e0)
    in let expr0x7f9e6482b850 = 
      Expr.field_decl(type0x7f9e65f683f0, FieldDecl.make("notbefore", "256", 8, "768", 128, 64, false))
    in let expr0x7f9e6486a810 = 
      Expr.component_ref(type0x7f9e65f683f0, expr0x7f9e6486e120, expr0x7f9e6482b850)
    in let expr0x7f9e6486fa80 = 
      Expr.address_of(type0x7f9e6486cbd0, expr0x7f9e6486a810)
    in let expr0x7f9e6482b8e8 = 
      Expr.field_decl(type0x7f9e65f683f0, FieldDecl.make("notafter", "256", 8, "800", 128, 64, false))
    in let expr0x7f9e6486a840 = 
      Expr.component_ref(type0x7f9e65f683f0, expr0x7f9e6486e120, expr0x7f9e6482b8e8)
    in let expr0x7f9e6486fac0 = 
      Expr.address_of(type0x7f9e6486cbd0, expr0x7f9e6486a840)
    in let expr0x7f9e64931e10 = 
      Expr.ssa("_29", 29, Expr.nothing(type0x7f9e64b5a3f0))
    in let expr0x7f9e6493a320 = 
      Expr.memory_ref(type0x7f9e64bb9000, expr0x7f9e64a14708, expr0x7f9e648dcd38)
    in let expr0x7f9e6493e360 = 
      Expr.component_ref(type0x7f9e64b5a3f0, expr0x7f9e6493a320, expr0x7f9e64ba7720)
    in let expr0x7f9e6486fb80 = 
      Expr.address_of(type0x7f9e64864930, expr0x7f9e6484acf0)
    in let expr0x7f9e6486fc00 = 
      Expr.address_of(type0x7f9e64864930, expr0x7f9e6484acf0)
    in let expr0x7f9e64870320 = 
      Expr.string_cst(type0x7f9e66ee5c78, 15, "\"No Certificate\"")
    in let expr0x7f9e6486fc40 = 
      Expr.address_of(type0x7f9e64873348, expr0x7f9e64870320)
    in let expr0x7f9e64931e58 = 
      Expr.ssa("_30", 30, Expr.nothing(type0x7f9e64e53498))
    in let expr0x7f9e6493a410 = 
      Expr.memory_ref(type0x7f9e64bb9000, expr0x7f9e64a14708, expr0x7f9e648dcd38)
    in let expr0x7f9e6493e390 = 
      Expr.component_ref(type0x7f9e64e53498, expr0x7f9e6493a410, expr0x7f9e64ba44c0)
    in let expr0x7f9e6486e1b0 = 
      Expr.variable_decl(type0x7f9e648415e8, VarDecl.make("chiper_info", 64, 64))
    in let expr0x7f9e64a175e8 = 
      Expr.ssa("chiper_info_129", 129, expr0x7f9e6486e1b0)
    in let expr0x7f9e6486fd20 = 
      Expr.address_of(type0x7f9e64864930, expr0x7f9e6484acf0)
    in let expr0x7f9e64870410 = 
      Expr.string_cst(type0x7f9e66ee5c78, 15, "\"* Cipher info:\"")
    in let expr0x7f9e6486fd60 = 
      Expr.address_of(type0x7f9e64873348, expr0x7f9e64870410)
    in let expr0x7f9e64931ea0 = 
      Expr.ssa("_31", 31, Expr.nothing(type0x7f9e64b5a3f0))
    in let expr0x7f9e6493a780 = 
      Expr.memory_ref(type0x7f9e64bb9000, expr0x7f9e64a14708, expr0x7f9e648dcd38)
    in let expr0x7f9e6493e3c0 = 
      Expr.component_ref(type0x7f9e64b5a3f0, expr0x7f9e6493a780, expr0x7f9e64ba7720)
    in let expr0x7f9e6486fe20 = 
      Expr.address_of(type0x7f9e64864930, expr0x7f9e6484acf0)
    in let expr0x7f9e64931ee8 = 
      Expr.ssa("_32", 32, Expr.nothing(type0x7f9e66d6c5e8))
    in let expr0x7f9e6482bbe0 = 
      Expr.field_decl(type0x7f9e66d6c5e8, FieldDecl.make("chiper_bits", "32", 32, "64", 128, 0, false))
    in let expr0x7f9e6493c210 = 
      Expr.u_int_cst(type0x7f9e648415e8, Z.of_string "0")
    in let expr0x7f9e6493a870 = 
      Expr.memory_ref(type0x7f9e6483b7e0, expr0x7f9e64a175e8, expr0x7f9e6493c210)
    in let expr0x7f9e6493e3f0 = 
      Expr.component_ref(type0x7f9e66d6c5e8, expr0x7f9e6493a870, expr0x7f9e6482bbe0)
    in let expr0x7f9e64931f30 = 
      Expr.ssa("_33", 33, Expr.nothing(type0x7f9e64873930))
    in let expr0x7f9e6482bb48 = 
      Expr.field_decl(type0x7f9e65f60a80, FieldDecl.make("chiper", "384", 8, "16", 128, 0, false))
    in let expr0x7f9e6493a938 = 
      Expr.memory_ref(type0x7f9e6483b7e0, expr0x7f9e64a175e8, expr0x7f9e6493c210)
    in let expr0x7f9e6493e420 = 
      Expr.component_ref(type0x7f9e65f60a80, expr0x7f9e6493a938, expr0x7f9e6482bb48)
    in let expr0x7f9e6493ba60 = 
      Expr.address_of(type0x7f9e64873930, expr0x7f9e6493e420)
    in let expr0x7f9e64931f78 = 
      Expr.ssa("_34", 34, Expr.nothing(type0x7f9e64873888))
    in let expr0x7f9e6482bab0 = 
      Expr.field_decl(type0x7f9e66ee5930, FieldDecl.make("version", "128", 8, "0", 128, 0, false))
    in let expr0x7f9e6493a960 = 
      Expr.memory_ref(type0x7f9e6483b7e0, expr0x7f9e64a175e8, expr0x7f9e6493c210)
    in let expr0x7f9e6493e450 = 
      Expr.component_ref(type0x7f9e66ee5930, expr0x7f9e6493a960, expr0x7f9e6482bab0)
    in let expr0x7f9e6493ba80 = 
      Expr.address_of(type0x7f9e64873888, expr0x7f9e6493e450)
    in let expr0x7f9e6486fea0 = 
      Expr.address_of(type0x7f9e64864930, expr0x7f9e6484acf0)
    in let expr0x7f9e64871268 = 
      Expr.string_cst(type0x7f9e65c4c738, 35, "\"  Version: %s, cipher %s (%u bits)\"")
    in let expr0x7f9e6486fee0 = 
      Expr.address_of(type0x7f9e648737e0, expr0x7f9e64871268)
    in let expr0x7f9e649310d8 = 
      Expr.ssa("_35", 35, Expr.nothing(type0x7f9e64b5a3f0))
    in let expr0x7f9e6493aa28 = 
      Expr.memory_ref(type0x7f9e64bb9000, expr0x7f9e64a14708, expr0x7f9e648dcd38)
    in let expr0x7f9e6493e480 = 
      Expr.component_ref(type0x7f9e64b5a3f0, expr0x7f9e6493aa28, expr0x7f9e64ba7720)
    in let expr0x7f9e64874080 = 
      Expr.address_of(type0x7f9e64864930, expr0x7f9e6484acf0)
    in let expr0x7f9e64931168 = 
      Expr.ssa("_36", 36, Expr.nothing(type0x7f9e64e53498))
    in let expr0x7f9e6493aac8 = 
      Expr.memory_ref(type0x7f9e64bb9000, expr0x7f9e64a14708, expr0x7f9e648dcd38)
    in let expr0x7f9e6493e4b0 = 
      Expr.component_ref(type0x7f9e64e53498, expr0x7f9e6493aac8, expr0x7f9e64ba44c0)
    in let expr0x7f9e649311b0 = 
      Expr.ssa("_37", 37, Expr.nothing(type0x7f9e66d6c738))
    in let expr0x7f9e64861900 = 
      Expr.label_decl(type0x7f9e66d6cf18, "<L20>")
    in let expr0x7f9e64942000 = 
      Expr.ssa("_38", 38, Expr.nothing(type0x7f9e64e53498))
    in let expr0x7f9e6493ab90 = 
      Expr.memory_ref(type0x7f9e64bb9000, expr0x7f9e64a14708, expr0x7f9e648dcd38)
    in let expr0x7f9e6493e4e0 = 
      Expr.component_ref(type0x7f9e64e53498, expr0x7f9e6493ab90, expr0x7f9e64ba44c0)
    in let expr0x7f9e6486e360 = 
      Expr.variable_decl(type0x7f9e64f80b28, VarDecl.make("cert", 64, 64))
    in let expr0x7f9e64a17900 = 
      Expr.ssa("cert_140", 140, expr0x7f9e6486e360)
    in let expr0x7f9e64942048 = 
      Expr.ssa("_39", 39, Expr.nothing(type0x7f9e648642a0))
    in let expr0x7f9e6493aaf0 = 
      Expr.memory_ref(type0x7f9e64bb9000, expr0x7f9e64a14708, expr0x7f9e648dcd38)
    in let expr0x7f9e6493e510 = 
      Expr.component_ref(type0x7f9e64b5ac78, expr0x7f9e6493aaf0, expr0x7f9e64ba4980)
    in let expr0x7f9e6493bbe0 = 
      Expr.address_of(type0x7f9e648642a0, expr0x7f9e6493e510)
    in let expr0x7f9e64942090 = 
      Expr.ssa("_40", 40, Expr.nothing(type0x7f9e66d6c348))
    in let expr0x7f9e6493ad48 = 
      Expr.memory_ref(type0x7f9e64bb9000, expr0x7f9e64a14708, expr0x7f9e648dcd38)
    in let expr0x7f9e6493e540 = 
      Expr.bitfield_ref(type0x7f9e66d6c348, expr0x7f9e6493ad48, 8, 24576)
    in let expr0x7f9e64862198 = 
      Expr.u_int_cst(type0x7f9e66d6c348, Z.of_string "8")
    in let expr0x7f9e648707d0 = 
      Expr.string_cst(type0x7f9e66092888, 12, "\" -- Ignored\"")
    in let expr0x7f9e648743e0 = 
      Expr.address_of(type0x7f9e64873000, expr0x7f9e648707d0)
    in let expr0x7f9e64862f60 = 
      Expr.string_cst(type0x7f9e66ebe2a0, 1, "\"\"")
    in let expr0x7f9e64874420 = 
      Expr.address_of(type0x7f9e648731f8, expr0x7f9e64862f60)
    in let expr0x7f9e64874300 = 
      Expr.address_of(type0x7f9e64864930, expr0x7f9e6484acf0)
    in let expr0x7f9e648663a8 = 
      Expr.string_cst(type0x7f9e65f60a80, 48, "\"* Verify E: Failed to validate hostname? (%d)%s\"")
    in let expr0x7f9e64874340 = 
      Expr.address_of(type0x7f9e64873930, expr0x7f9e648663a8)
    in let expr0x7f9e64942120 = 
      Expr.ssa("_42", 42, Expr.nothing(type0x7f9e66d6c348))
    in let expr0x7f9e6493aeb0 = 
      Expr.memory_ref(type0x7f9e64bb9000, expr0x7f9e64a14708, expr0x7f9e648dcd38)
    in let expr0x7f9e6493e570 = 
      Expr.bitfield_ref(type0x7f9e66d6c348, expr0x7f9e6493aeb0, 8, 24576)
    in let expr0x7f9e649421b0 = 
      Expr.ssa("_44", 44, Expr.nothing(type0x7f9e64b5a3f0))
    in let expr0x7f9e6493afc8 = 
      Expr.memory_ref(type0x7f9e64bb9000, expr0x7f9e64a14708, expr0x7f9e648dcd38)
    in let expr0x7f9e6493e5a0 = 
      Expr.component_ref(type0x7f9e64b5a3f0, expr0x7f9e6493afc8, expr0x7f9e64ba7720)
    in let expr0x7f9e64874560 = 
      Expr.address_of(type0x7f9e64864930, expr0x7f9e6484acf0)
    in let expr0x7f9e64861a80 = 
      Expr.label_decl(type0x7f9e66d6cf18, "<L27>")
    in let expr0x7f9e649421f8 = 
      Expr.ssa("_45", 45, Expr.nothing(type0x7f9e66d6c348))
    in let expr0x7f9e64944050 = 
      Expr.memory_ref(type0x7f9e64bb9000, expr0x7f9e64a14708, expr0x7f9e648dcd38)
    in let expr0x7f9e6493e5d0 = 
      Expr.bitfield_ref(type0x7f9e66d6c348, expr0x7f9e64944050, 8, 24576)
    in let expr0x7f9e64942288 = 
      Expr.ssa("_47", 47, Expr.nothing(type0x7f9e66d6c738))
    in let expr0x7f9e649422d0 = 
      Expr.ssa("_48", 48, Expr.nothing(type0x7f9e66d783f0))
    in let expr0x7f9e64874680 = 
      Expr.address_of(type0x7f9e64864930, expr0x7f9e6484acf0)
    in let expr0x7f9e648715b0 = 
      Expr.string_cst(type0x7f9e65c521f8, 33, "\"* Verify E: %s.? (%d) -- Ignored\"")
    in let expr0x7f9e648746c0 = 
      Expr.address_of(type0x7f9e648732a0, expr0x7f9e648715b0)
    in let expr0x7f9e64942318 = 
      Expr.ssa("_49", 49, Expr.nothing(type0x7f9e64b5a3f0))
    in let expr0x7f9e64944168 = 
      Expr.memory_ref(type0x7f9e64bb9000, expr0x7f9e64a14708, expr0x7f9e648dcd38)
    in let expr0x7f9e6493e600 = 
      Expr.component_ref(type0x7f9e64b5a3f0, expr0x7f9e64944168, expr0x7f9e64ba7720)
    in let expr0x7f9e648747c0 = 
      Expr.address_of(type0x7f9e64864930, expr0x7f9e6484acf0)
    in let expr0x7f9e64930200 = 
      Expr.label_decl(type0x7f9e66d6cf18, "<L33>")
    in let expr0x7f9e64942360 = 
      Expr.ssa("_50", 50, Expr.nothing(type0x7f9e66d6c738))
    in let expr0x7f9e649423a8 = 
      Expr.ssa("_51", 51, Expr.nothing(type0x7f9e66d783f0))
    in let expr0x7f9e64874860 = 
      Expr.address_of(type0x7f9e64864930, expr0x7f9e6484acf0)
    in let expr0x7f9e648748a0 = 
      Expr.string_cst(type0x7f9e66edd0a8, 10, "\"%s.? (%d)\"")
    in let expr0x7f9e648748c0 = 
      Expr.address_of(type0x7f9e6486c7e0, expr0x7f9e648748a0)
    in let expr0x7f9e64861980 = 
      Expr.label_decl(type0x7f9e66d6cf18, "conn_fail")
    in let expr0x7f9e649423f0 = 
      Expr.ssa("_52", 52, Expr.nothing(type0x7f9e64b5a3f0))
    in let expr0x7f9e64944230 = 
      Expr.memory_ref(type0x7f9e64bb9000, expr0x7f9e64a14708, expr0x7f9e648dcd38)
    in let expr0x7f9e6493e630 = 
      Expr.component_ref(type0x7f9e64b5a3f0, expr0x7f9e64944230, expr0x7f9e64ba7720)
    in let expr0x7f9e648749e0 = 
      Expr.address_of(type0x7f9e64864930, expr0x7f9e6484acf0)
    in let expr0x7f9e6493c348 = 
      Expr.constructor(type0x7f9e6483b0a8)
    in let expr0x7f9e64942438 = 
      Expr.ssa("_53", 53, Expr.nothing(type0x7f9e64e53498))
    in let expr0x7f9e649442d0 = 
      Expr.memory_ref(type0x7f9e64bb9000, expr0x7f9e64a14708, expr0x7f9e648dcd38)
    in let expr0x7f9e6493e660 = 
      Expr.component_ref(type0x7f9e64e53498, expr0x7f9e649442d0, expr0x7f9e64ba44c0)
    in let expr0x7f9e64942480 = 
      Expr.ssa("_54", 54, Expr.nothing(type0x7f9e66d6c738))
    in let expr0x7f9e64875288 = 
      Expr.s_int_cst(type0x7f9e66d6c738, Z.of_string "90")
    in let expr0x7f9e6482f9a8 = 
      Expr.u_int_cst(type0x7f9e660b2b28, Z.of_string "0")
    in let expr0x7f9e64874c40 = 
      Expr.address_of(type0x7f9e64864930, expr0x7f9e6484acf0)
    in let expr0x7f9e6486aea0 = 
      Expr.string_cst(type0x7f9e64873f18, 24, "\"SSL handshake timed out\"")
    in let expr0x7f9e64874c80 = 
      Expr.address_of(type0x7f9e64873e70, expr0x7f9e6486aea0)
    in let expr0x7f9e64942558 = 
      Expr.ssa("_57", 57, Expr.nothing(type0x7f9e64b5a3f0))
    in let expr0x7f9e649443e8 = 
      Expr.memory_ref(type0x7f9e64bb9000, expr0x7f9e64a14708, expr0x7f9e648dcd38)
    in let expr0x7f9e6493e6c0 = 
      Expr.component_ref(type0x7f9e64b5a3f0, expr0x7f9e649443e8, expr0x7f9e64ba7720)
    in let expr0x7f9e64874d40 = 
      Expr.address_of(type0x7f9e64864930, expr0x7f9e6484acf0)
    in let expr0x7f9e6493e6f0 = 
      Expr.component_ref(type0x7f9e66d6c690, expr0x7f9e64c02090, expr0x7f9e64b6a850)
    in let expr0x7f9e6493c420 = 
      Expr.constructor(type0x7f9e65d94dc8)
    in let call0x7f9e64922d20 = Expr.call(
      type0x7f9e66d6c738,
      "SSL_ctrl", [|
        (Expr.parameter("p1", 0, expr0x7f9e64931678));
        (Expr.parameter("p2", 1, expr0x7f9e6605c048));
        (Expr.parameter("p3", 2, expr0x7f9e66eaffc0));
        (Expr.parameter("p4", 3, expr0x7f9e64931630));
    |])
    in let call0x7f9e64936360 = Expr.call(
      type0x7f9e66d6c5e8,
      "SSL_connect", [|
        (Expr.parameter("p1", 0, expr0x7f9e649316c0));
    |])
    in let call0x7f9e64930680 = Expr.call(
      type0x7f9e66d6c7e0,
      "ERR_get_error", [|
    |])
    in let call0x7f9e649363f0 = Expr.call(
      type0x7f9e66d77f18,
      "ERR_error_string", [|
        (Expr.parameter("p1", 0, expr0x7f9e64931798));
        (Expr.parameter("p2", 1, expr0x7f9e6486b740));
    |])
    in let call0x7f9e64922dc8 = Expr.call(
      type0x7f9e660ccbd0,
      "g_snprintf", [|
        (Expr.parameter("p1", 0, expr0x7f9e6486b7c0));
        (Expr.parameter("p2", 1, expr0x7f9e64862678));
        (Expr.parameter("p3", 2, expr0x7f9e6486b820));
        (Expr.parameter("p4", 3, expr0x7f9e64a148b8));
        (Expr.parameter("p5", 4, expr0x7f9e6486b860));
    |])
    in let call0x7f9e64917d00 = Expr.call(
      type0x7f9e66d6cf18,
      "text_emit", [|
        (Expr.parameter("p1", 0, expr0x7f9e66046de0));
        (Expr.parameter("p2", 1, expr0x7f9e649317e0));
        (Expr.parameter("p3", 2, expr0x7f9e6486b920));
        (Expr.parameter("p4", 3, expr0x7f9e66f00480));
        (Expr.parameter("p5", 4, expr0x7f9e66f00480));
        (Expr.parameter("p6", 5, expr0x7f9e66f00480));
        (Expr.parameter("p7", 6, expr0x7f9e648621b0));
    |])
    in let call0x7f9e64920da8 = Expr.call(
      type0x7f9e66d77f18,
      "dcgettext", [|
        (Expr.parameter("p1", 0, expr0x7f9e64862948));
        (Expr.parameter("p2", 1, expr0x7f9e6493b540));
        (Expr.parameter("p3", 2, expr0x7f9e66d71408));
    |])
    in let call0x7f9e64936480 = Expr.call(
      type0x7f9e66d6cf18,
      "PrintText", [|
        (Expr.parameter("p1", 0, expr0x7f9e64931900));
        (Expr.parameter("p2", 1, expr0x7f9e64931870));
    |])
    in let call0x7f9e64936510 = Expr.call(
      type0x7f9e66d6c5e8,
      "server_cleanup", [|
        (Expr.parameter("serv", 0, expr0x7f9e64a14708));
    |])
    in let call0x7f9e64920e40 = Expr.call(
      type0x7f9e66d6cf18,
      "auto_reconnect", [|
        (Expr.parameter("serv", 0, expr0x7f9e64a14708));
        (Expr.parameter("send_quit", 1, expr0x7f9e66d71078));
        (Expr.parameter("err", 2, expr0x7f9e66d710c0));
    |])
    in let call0x7f9e64936630 = Expr.call(
      type0x7f9e66d6c5e8,
      "SSL_is_init_finished", [|
        (Expr.parameter("p1", 0, expr0x7f9e64931990));
    |])
    in let call0x7f9e649366c0 = Expr.call(
      type0x7f9e66d6c5e8,
      "_SSL_get_cert_info", [|
        (Expr.parameter("p1", 0, expr0x7f9e6493b740));
        (Expr.parameter("p2", 1, expr0x7f9e64931a20));
    |])
    in let call0x7f9e64920ed8 = Expr.call(
      type0x7f9e660ccbd0,
      "g_snprintf", [|
        (Expr.parameter("p1", 0, expr0x7f9e6486bca0));
        (Expr.parameter("p2", 1, expr0x7f9e64862678));
        (Expr.parameter("p3", 2, expr0x7f9e6486bce0));
    |])
    in let call0x7f9e64940000 = Expr.call(
      type0x7f9e66d6cf18,
      "text_emit", [|
        (Expr.parameter("p1", 0, expr0x7f9e6605ccd8));
        (Expr.parameter("p2", 1, expr0x7f9e64931ab0));
        (Expr.parameter("p3", 2, expr0x7f9e6486bda0));
        (Expr.parameter("p4", 3, expr0x7f9e66f00480));
        (Expr.parameter("p5", 4, expr0x7f9e66f00480));
        (Expr.parameter("p6", 5, expr0x7f9e66f00480));
        (Expr.parameter("p7", 6, expr0x7f9e648621b0));
    |])
    in let call0x7f9e64941000 = Expr.call(
      type0x7f9e660ccbd0,
      "g_snprintf", [|
        (Expr.parameter("p1", 0, expr0x7f9e6486be20));
        (Expr.parameter("p2", 1, expr0x7f9e64862678));
        (Expr.parameter("p3", 2, expr0x7f9e6486be80));
    |])
    in let call0x7f9e64940100 = Expr.call(
      type0x7f9e66d6cf18,
      "text_emit", [|
        (Expr.parameter("p1", 0, expr0x7f9e6605ccd8));
        (Expr.parameter("p2", 1, expr0x7f9e64931af8));
        (Expr.parameter("p3", 2, expr0x7f9e6486bf40));
        (Expr.parameter("p4", 3, expr0x7f9e66f00480));
        (Expr.parameter("p5", 4, expr0x7f9e66f00480));
        (Expr.parameter("p6", 5, expr0x7f9e66f00480));
        (Expr.parameter("p7", 6, expr0x7f9e648621b0));
    |])
    in let call0x7f9e64922e70 = Expr.call(
      type0x7f9e660ccbd0,
      "g_snprintf", [|
        (Expr.parameter("p1", 0, expr0x7f9e6486f020));
        (Expr.parameter("p2", 1, expr0x7f9e64862678));
        (Expr.parameter("p3", 2, expr0x7f9e6486f080));
        (Expr.parameter("p4", 3, expr0x7f9e64931b40));
    |])
    in let call0x7f9e64940200 = Expr.call(
      type0x7f9e66d6cf18,
      "text_emit", [|
        (Expr.parameter("p1", 0, expr0x7f9e6605ccd8));
        (Expr.parameter("p2", 1, expr0x7f9e64931b88));
        (Expr.parameter("p3", 2, expr0x7f9e6486f140));
        (Expr.parameter("p4", 3, expr0x7f9e66f00480));
        (Expr.parameter("p5", 4, expr0x7f9e66f00480));
        (Expr.parameter("p6", 5, expr0x7f9e66f00480));
        (Expr.parameter("p7", 6, expr0x7f9e648621b0));
    |])
    in let call0x7f9e64941098 = Expr.call(
      type0x7f9e660ccbd0,
      "g_snprintf", [|
        (Expr.parameter("p1", 0, expr0x7f9e6486f280));
        (Expr.parameter("p2", 1, expr0x7f9e64862678));
        (Expr.parameter("p3", 2, expr0x7f9e6486f2e0));
    |])
    in let call0x7f9e64940300 = Expr.call(
      type0x7f9e66d6cf18,
      "text_emit", [|
        (Expr.parameter("p1", 0, expr0x7f9e6605ccd8));
        (Expr.parameter("p2", 1, expr0x7f9e64931c18));
        (Expr.parameter("p3", 2, expr0x7f9e6486f3a0));
        (Expr.parameter("p4", 3, expr0x7f9e66f00480));
        (Expr.parameter("p5", 4, expr0x7f9e66f00480));
        (Expr.parameter("p6", 5, expr0x7f9e66f00480));
        (Expr.parameter("p7", 6, expr0x7f9e648621b0));
    |])
    in let call0x7f9e64922f18 = Expr.call(
      type0x7f9e660ccbd0,
      "g_snprintf", [|
        (Expr.parameter("p1", 0, expr0x7f9e6486f420));
        (Expr.parameter("p2", 1, expr0x7f9e64862678));
        (Expr.parameter("p3", 2, expr0x7f9e6486f480));
        (Expr.parameter("p4", 3, expr0x7f9e64931c60));
    |])
    in let call0x7f9e64940400 = Expr.call(
      type0x7f9e66d6cf18,
      "text_emit", [|
        (Expr.parameter("p1", 0, expr0x7f9e6605ccd8));
        (Expr.parameter("p2", 1, expr0x7f9e64931ca8));
        (Expr.parameter("p3", 2, expr0x7f9e6486f540));
        (Expr.parameter("p4", 3, expr0x7f9e66f00480));
        (Expr.parameter("p5", 4, expr0x7f9e66f00480));
        (Expr.parameter("p6", 5, expr0x7f9e66f00480));
        (Expr.parameter("p7", 6, expr0x7f9e648621b0));
    |])
    in let call0x7f9e64922000 = Expr.call(
      type0x7f9e660ccbd0,
      "g_snprintf", [|
        (Expr.parameter("p1", 0, expr0x7f9e6486f680));
        (Expr.parameter("p2", 1, expr0x7f9e64862678));
        (Expr.parameter("p3", 2, expr0x7f9e6486f6c0));
        (Expr.parameter("p4", 3, expr0x7f9e6486f700));
        (Expr.parameter("p5", 4, expr0x7f9e64931d38));
    |])
    in let call0x7f9e64940500 = Expr.call(
      type0x7f9e66d6cf18,
      "text_emit", [|
        (Expr.parameter("p1", 0, expr0x7f9e6605ccd8));
        (Expr.parameter("p2", 1, expr0x7f9e64931d80));
        (Expr.parameter("p3", 2, expr0x7f9e6486f7c0));
        (Expr.parameter("p4", 3, expr0x7f9e66f00480));
        (Expr.parameter("p5", 4, expr0x7f9e66f00480));
        (Expr.parameter("p6", 5, expr0x7f9e66f00480));
        (Expr.parameter("p7", 6, expr0x7f9e648621b0));
    |])
    in let call0x7f9e649220a8 = Expr.call(
      type0x7f9e660ccbd0,
      "g_snprintf", [|
        (Expr.parameter("p1", 0, expr0x7f9e6486f840));
        (Expr.parameter("p2", 1, expr0x7f9e64862678));
        (Expr.parameter("p3", 2, expr0x7f9e6486f880));
        (Expr.parameter("p4", 3, expr0x7f9e6486f8c0));
    |])
    in let call0x7f9e64940600 = Expr.call(
      type0x7f9e66d6cf18,
      "text_emit", [|
        (Expr.parameter("p1", 0, expr0x7f9e6605ccd8));
        (Expr.parameter("p2", 1, expr0x7f9e64931dc8));
        (Expr.parameter("p3", 2, expr0x7f9e6486f980));
        (Expr.parameter("p4", 3, expr0x7f9e66f00480));
        (Expr.parameter("p5", 4, expr0x7f9e66f00480));
        (Expr.parameter("p6", 5, expr0x7f9e66f00480));
        (Expr.parameter("p7", 6, expr0x7f9e648621b0));
    |])
    in let call0x7f9e64922888 = Expr.call(
      type0x7f9e660ccbd0,
      "g_snprintf", [|
        (Expr.parameter("p1", 0, expr0x7f9e6486fa00));
        (Expr.parameter("p2", 1, expr0x7f9e64862678));
        (Expr.parameter("p3", 2, expr0x7f9e6486fa40));
        (Expr.parameter("p4", 3, expr0x7f9e6486fa80));
        (Expr.parameter("p5", 4, expr0x7f9e6486fac0));
    |])
    in let call0x7f9e64940700 = Expr.call(
      type0x7f9e66d6cf18,
      "text_emit", [|
        (Expr.parameter("p1", 0, expr0x7f9e6605ccd8));
        (Expr.parameter("p2", 1, expr0x7f9e64931e10));
        (Expr.parameter("p3", 2, expr0x7f9e6486fb80));
        (Expr.parameter("p4", 3, expr0x7f9e66f00480));
        (Expr.parameter("p5", 4, expr0x7f9e66f00480));
        (Expr.parameter("p6", 5, expr0x7f9e66f00480));
        (Expr.parameter("p7", 6, expr0x7f9e648621b0));
    |])
    in let call0x7f9e64941130 = Expr.call(
      type0x7f9e660ccbd0,
      "g_snprintf", [|
        (Expr.parameter("p1", 0, expr0x7f9e6486fc00));
        (Expr.parameter("p2", 1, expr0x7f9e64862678));
        (Expr.parameter("p3", 2, expr0x7f9e6486fc40));
    |])
    in let call0x7f9e64936750 = Expr.call(
      type0x7f9e648415e8,
      "_SSL_get_cipher_info", [|
        (Expr.parameter("p1", 0, expr0x7f9e64931e58));
    |])
    in let call0x7f9e649411c8 = Expr.call(
      type0x7f9e660ccbd0,
      "g_snprintf", [|
        (Expr.parameter("p1", 0, expr0x7f9e6486fd20));
        (Expr.parameter("p2", 1, expr0x7f9e64862678));
        (Expr.parameter("p3", 2, expr0x7f9e6486fd60));
    |])
    in let call0x7f9e64940800 = Expr.call(
      type0x7f9e66d6cf18,
      "text_emit", [|
        (Expr.parameter("p1", 0, expr0x7f9e6605ccd8));
        (Expr.parameter("p2", 1, expr0x7f9e64931ea0));
        (Expr.parameter("p3", 2, expr0x7f9e6486fe20));
        (Expr.parameter("p4", 3, expr0x7f9e66f00480));
        (Expr.parameter("p5", 4, expr0x7f9e66f00480));
        (Expr.parameter("p6", 5, expr0x7f9e66f00480));
        (Expr.parameter("p7", 6, expr0x7f9e648621b0));
    |])
    in let call0x7f9e64895e70 = Expr.call(
      type0x7f9e660ccbd0,
      "g_snprintf", [|
        (Expr.parameter("p1", 0, expr0x7f9e6486fea0));
        (Expr.parameter("p2", 1, expr0x7f9e64862678));
        (Expr.parameter("p3", 2, expr0x7f9e6486fee0));
        (Expr.parameter("p4", 3, expr0x7f9e64931f78));
        (Expr.parameter("p5", 4, expr0x7f9e64931f30));
        (Expr.parameter("p6", 5, expr0x7f9e64931ee8));
    |])
    in let call0x7f9e64940900 = Expr.call(
      type0x7f9e66d6cf18,
      "text_emit", [|
        (Expr.parameter("p1", 0, expr0x7f9e6605ccd8));
        (Expr.parameter("p2", 1, expr0x7f9e649310d8));
        (Expr.parameter("p3", 2, expr0x7f9e64874080));
        (Expr.parameter("p4", 3, expr0x7f9e66f00480));
        (Expr.parameter("p5", 4, expr0x7f9e66f00480));
        (Expr.parameter("p6", 5, expr0x7f9e66f00480));
        (Expr.parameter("p7", 6, expr0x7f9e648621b0));
    |])
    in let call0x7f9e649367e0 = Expr.call(
      type0x7f9e66d6c738,
      "SSL_get_verify_result", [|
        (Expr.parameter("p1", 0, expr0x7f9e64931168));
    |])
    in let call0x7f9e64936870 = Expr.call(
      type0x7f9e64f80b28,
      "SSL_get_peer_certificate", [|
        (Expr.parameter("p1", 0, expr0x7f9e64942000));
    |])
    in let call0x7f9e64936900 = Expr.call(
      type0x7f9e66d6c5e8,
      "_SSL_check_hostname", [|
        (Expr.parameter("p1", 0, expr0x7f9e64a17900));
        (Expr.parameter("p2", 1, expr0x7f9e64942048));
    |])
    in let call0x7f9e64922930 = Expr.call(
      type0x7f9e660ccbd0,
      "g_snprintf", [|
        (Expr.parameter("p1", 0, expr0x7f9e64874300));
        (Expr.parameter("p2", 1, expr0x7f9e64862678));
        (Expr.parameter("p3", 2, expr0x7f9e64874340));
        (Expr.parameter("p4", 3, expr0x7f9e64a17990));
        (Expr.parameter("p5", 4, expr0x7f9e64a14318));
    |])
    in let call0x7f9e64940a00 = Expr.call(
      type0x7f9e66d6cf18,
      "text_emit", [|
        (Expr.parameter("p1", 0, expr0x7f9e6605ccd8));
        (Expr.parameter("p2", 1, expr0x7f9e649421b0));
        (Expr.parameter("p3", 2, expr0x7f9e64874560));
        (Expr.parameter("p4", 3, expr0x7f9e66f00480));
        (Expr.parameter("p5", 4, expr0x7f9e66f00480));
        (Expr.parameter("p6", 5, expr0x7f9e66f00480));
        (Expr.parameter("p7", 6, expr0x7f9e648621b0));
    |])
    in let call0x7f9e64936a20 = Expr.call(
      type0x7f9e66d783f0,
      "X509_verify_cert_error_string", [|
        (Expr.parameter("p1", 0, expr0x7f9e64942288));
    |])
    in let call0x7f9e649229d8 = Expr.call(
      type0x7f9e660ccbd0,
      "g_snprintf", [|
        (Expr.parameter("p1", 0, expr0x7f9e64874680));
        (Expr.parameter("p2", 1, expr0x7f9e64862678));
        (Expr.parameter("p3", 2, expr0x7f9e648746c0));
        (Expr.parameter("p4", 3, expr0x7f9e649422d0));
        (Expr.parameter("p5", 4, expr0x7f9e64a17798));
    |])
    in let call0x7f9e64940b00 = Expr.call(
      type0x7f9e66d6cf18,
      "text_emit", [|
        (Expr.parameter("p1", 0, expr0x7f9e6605ccd8));
        (Expr.parameter("p2", 1, expr0x7f9e64942318));
        (Expr.parameter("p3", 2, expr0x7f9e648747c0));
        (Expr.parameter("p4", 3, expr0x7f9e66f00480));
        (Expr.parameter("p5", 4, expr0x7f9e66f00480));
        (Expr.parameter("p6", 5, expr0x7f9e66f00480));
        (Expr.parameter("p7", 6, expr0x7f9e648621b0));
    |])
    in let call0x7f9e64936ab0 = Expr.call(
      type0x7f9e66d783f0,
      "X509_verify_cert_error_string", [|
        (Expr.parameter("p1", 0, expr0x7f9e64942360));
    |])
    in let call0x7f9e64945000 = Expr.call(
      type0x7f9e660ccbd0,
      "g_snprintf", [|
        (Expr.parameter("p1", 0, expr0x7f9e64874860));
        (Expr.parameter("p2", 1, expr0x7f9e64862678));
        (Expr.parameter("p3", 2, expr0x7f9e648748c0));
        (Expr.parameter("p4", 3, expr0x7f9e649423a8));
        (Expr.parameter("p5", 4, expr0x7f9e64a17798));
    |])
    in let call0x7f9e64940c00 = Expr.call(
      type0x7f9e66d6cf18,
      "text_emit", [|
        (Expr.parameter("p1", 0, expr0x7f9e66046de0));
        (Expr.parameter("p2", 1, expr0x7f9e649423f0));
        (Expr.parameter("p3", 2, expr0x7f9e648749e0));
        (Expr.parameter("p4", 3, expr0x7f9e66f00480));
        (Expr.parameter("p5", 4, expr0x7f9e66f00480));
        (Expr.parameter("p6", 5, expr0x7f9e66f00480));
        (Expr.parameter("p7", 6, expr0x7f9e648621b0));
    |])
    in let call0x7f9e64936b40 = Expr.call(
      type0x7f9e66d6c5e8,
      "server_cleanup", [|
        (Expr.parameter("serv", 0, expr0x7f9e64a14708));
    |])
    in let call0x7f9e64936bd0 = Expr.call(
      type0x7f9e66d6cf18,
      "server_stopconnecting", [|
        (Expr.parameter("serv", 0, expr0x7f9e64a14708));
    |])
    in let call0x7f9e64936c60 = Expr.call(
      type0x7f9e66d6cf18,
      "server_connected", [|
        (Expr.parameter("serv", 0, expr0x7f9e64a14708));
    |])
    in let call0x7f9e64936cf0 = Expr.call(
      type0x7f9e64a70348,
      "SSL_get_session", [|
        (Expr.parameter("p1", 0, expr0x7f9e64942438));
    |])
    in let call0x7f9e64936d80 = Expr.call(
      type0x7f9e66d6c738,
      "SSL_SESSION_get_time", [|
        (Expr.parameter("p1", 0, expr0x7f9e64a14ca8));
    |])
    in let call0x7f9e64936e10 = Expr.call(
      type0x7f9e66f399d8,
      "time", [|
        (Expr.parameter("p1", 0, expr0x7f9e6482f9a8));
    |])
    in let call0x7f9e64941260 = Expr.call(
      type0x7f9e660ccbd0,
      "g_snprintf", [|
        (Expr.parameter("p1", 0, expr0x7f9e64874c40));
        (Expr.parameter("p2", 1, expr0x7f9e64862678));
        (Expr.parameter("p3", 2, expr0x7f9e64874c80));
    |])
    in let call0x7f9e64940d00 = Expr.call(
      type0x7f9e66d6cf18,
      "text_emit", [|
        (Expr.parameter("p1", 0, expr0x7f9e66046de0));
        (Expr.parameter("p2", 1, expr0x7f9e64942558));
        (Expr.parameter("p3", 2, expr0x7f9e64874d40));
        (Expr.parameter("p4", 3, expr0x7f9e66f00480));
        (Expr.parameter("p5", 4, expr0x7f9e66f00480));
        (Expr.parameter("p6", 5, expr0x7f9e66f00480));
        (Expr.parameter("p7", 6, expr0x7f9e648621b0));
    |])
    in let call0x7f9e64936ea0 = Expr.call(
      type0x7f9e66d6c5e8,
      "server_cleanup", [|
        (Expr.parameter("serv", 0, expr0x7f9e64a14708));
    |])
    in let call0x7f9e649412f8 = Expr.call(
      type0x7f9e66d6cf18,
      "auto_reconnect", [|
        (Expr.parameter("serv", 0, expr0x7f9e64a14708));
        (Expr.parameter("send_quit", 1, expr0x7f9e66d71078));
        (Expr.parameter("err", 2, expr0x7f9e66d710c0));
    |])
    in let block_0 = 
      let step_0_0 = Action.start 
      in Block.block (
        0,
        [| step_0_0 |],
        [||],
        [| "<ENTRY>" |]
      )
    in let block_2 = 
      let step_2_1 = 
        Action.assign(expr0x7f9e649315e8, expr0x7f9e64918fc0)
      in let step_2_2 = 
        Action.assign(expr0x7f9e64c43990, expr0x7f9e649315e8)
      in let step_2_3 = 
        Action.assign(expr0x7f9e64931630, expr0x7f9e6493b280)
      in let step_2_4 = 
        Action.assign(expr0x7f9e64931678, expr0x7f9e64918db0)
      in let step_2_5 = 
        Action.call(call0x7f9e64922d20)
      in let step_2_6 = 
        Action.assign(expr0x7f9e649316c0, expr0x7f9e64918f60)
      in let step_2_7 = 
        Action.call(call0x7f9e64936360)
      in let step_2_8 = 
        Action.assign(expr0x7f9e64931708, call0x7f9e64936360)
      in Block.block(
        2,
        [|
          step_2_1;
          step_2_2;
          step_2_3;
          step_2_4;
          step_2_5;
          step_2_6;
          step_2_7;
          step_2_8;
        |],
        [|
          ("SSL_connect", 1);
          ("SSL_ctrl", 1);
        |],
        [|
          "# VUSE <.MEM_76(D)>\n_1 = serv_77(D)->server_session;";
          "# .MEM_78 = VDEF <.MEM_76(D)>\ng_sess = _1;";
          "_2 = &serv_77(D)->hostname;";
          "# VUSE <.MEM_78>\n_3 = serv_77(D)->ssl;";
          "# .MEM_79 = VDEF <.MEM_78>\nSSL_ctrl (_3, 55, 0, _2);";
          "# VUSE <.MEM_79>\n_4 = serv_77(D)->ssl;";
          "# .MEM_80 = VDEF <.MEM_79>\n_5 = SSL_connect (_4);";
          "<CAPTURES RETURN>";
        |]
      )
    in let block_3 = 
      let step_3_9 = 
        Action.assume(2, Expr.blte(GccType.boolean, expr0x7f9e64931708, expr0x7f9e66d71078))
      in let step_3_10 = 
        Action.assign(expr0x7f9e64c43990, expr0x7f9e6482f6d8)
      in let step_3_11 = 
        Action.call(call0x7f9e64930680)
      in let step_3_12 = 
        Action.assign(expr0x7f9e64931750, call0x7f9e64930680)
      in let step_3_13 = 
        Action.assign(expr0x7f9e64a148b8, expr0x7f9e64931750)
      in let step_3_14 = 
        Action.debug("# DEBUG err => err_83")
      in Block.block(
        3,
        [|
          step_3_9;
          step_3_10;
          step_3_11;
          step_3_12;
          step_3_13;
          step_3_14;
        |],
        [|
          ("ERR_get_error", 1);
        |],
        [|
          "assume TRUE (_5 <= 0)";
          "# .MEM_81 = VDEF <.MEM_80>\ng_sess = 0B;";
          "# .MEM_82 = VDEF <.MEM_81>\n_6 = ERR_get_error ();";
          "<CAPTURES RETURN>";
          "err_83 = (int) _6;";
          "# DEBUG err => err_83";
        |]
      )
    in let block_4 = 
      let step_4_15 = 
        Action.assume(3, Expr.bgt(GccType.boolean, expr0x7f9e64a148b8, expr0x7f9e66d71078))
      in let step_4_16 = 
        Action.assign(expr0x7f9e64931798, expr0x7f9e64a148b8)
      in let step_4_17 = 
        Action.call(call0x7f9e649363f0)
      in let step_4_18 = 
        Action.call(call0x7f9e64922dc8)
      in let step_4_19 = 
        Action.assign(expr0x7f9e649317e0, expr0x7f9e6493e030)
      in let step_4_20 = 
        Action.call(call0x7f9e64917d00)
      in let step_4_21 = 
        Action.assign(expr0x7f9e64931828, Expr.bit_and(
          type0x7f9e66d6c5e8, expr0x7f9e64a148b8, expr0x7f9e66f3a4e0))
      in Block.block(
        4,
        [|
          step_4_15;
          step_4_16;
          step_4_17;
          step_4_18;
          step_4_19;
          step_4_20;
          step_4_21;
        |],
        [|
          ("ERR_error_string", 1);
          ("g_snprintf", 1);
          ("text_emit", 1);
        |],
        [|
          "assume TRUE (err_83 > 0)";
          "_7 = (long unsigned int) err_83;";
          "# .MEM_85 = VDEF <.MEM_82>\nERR_error_string (_7, &err_buf);";
          "# .MEM_86 = VDEF <.MEM_85>\ng_snprintf (&buf, 256, \"(%d) %s\", err_83, &err_buf);";
          "# VUSE <.MEM_86>\n_8 = serv_77(D)->server_session;";
          "# .MEM_87 = VDEF <.MEM_86>\ntext_emit (39, _8, &buf, 0B, 0B, 0B, 0);";
          "_9 = err_83 & 4095;";
        |]
      )
    in let block_5 = 
      let step_5_22 = 
        Action.assume(4, Expr.beq(GccType.boolean, expr0x7f9e64931828, expr0x7f9e65f32ca8))
      in let step_5_23 = 
        Action.call(call0x7f9e64920da8)
      in let step_5_24 = 
        Action.assign(expr0x7f9e64931870, call0x7f9e64920da8)
      in let step_5_25 = 
        Action.assign(expr0x7f9e64931900, expr0x7f9e6493e060)
      in let step_5_26 = 
        Action.call(call0x7f9e64936480)
      in Block.block(
        5,
        [|
          step_5_22;
          step_5_23;
          step_5_24;
          step_5_25;
          step_5_26;
        |],
        [|
          ("PrintText", 1);
          ("dcgettext", 1);
        |],
        [|
          "assume TRUE (_9 == 267)";
          "# .MEM_88 = VDEF <.MEM_87>\n_10 = dcgettext (0B, \"Are you sure this is a SSL capable server and port?\\n\", 5);";
          "<CAPTURES RETURN>";
          "# VUSE <.MEM_88>\n_11 = serv_77(D)->server_session;";
          "# .MEM_89 = VDEF <.MEM_88>\nPrintText (_11, _10);";
        |]
      )
    in let block_6 = 
      let step_6_27 = 
        Action.assume(4, Expr.bneq(GccType.boolean, expr0x7f9e64931828, expr0x7f9e65f32ca8))
      in let step_6_28 = 
        Action.call(call0x7f9e64936510)
      in let step_6_29 = 
        Action.assign(expr0x7f9e64931948, expr0x7f9e6493e090)
      in Block.block(
        6,
        [|
          step_6_27;
          step_6_28;
          step_6_29;
        |],
        [|
          ("server_cleanup", 1);
        |],
        [|
          "assume FALSE (_9 == 267)";
          "# .MEM_90 = VDEF <.MEM_64>\nserver_cleanup (serv_77(D));";
          "# VUSE <.MEM_90>\n_12 = prefs.hex_net_auto_reconnectonfail;";
        |]
      )
    in let block_7 = 
      let step_7_30 = 
        Action.assume(6, Expr.bneq(GccType.boolean, expr0x7f9e64931948, expr0x7f9e66d54f48))
      in let step_7_31 = 
        Action.call(call0x7f9e64920e40)
      in Block.block(
        7,
        [|
          step_7_30;
          step_7_31;
        |],
        [|
          ("auto_reconnect", 1);
        |],
        [|
          "assume TRUE (_12 != 0)";
          "# .MEM_91 = VDEF <.MEM_90>\nauto_reconnect (serv_77(D), 0, -1);";
        |]
      )
    in let block_8 = 
      let step_8_32 = 
        Action.assume(6, Expr.beq(GccType.boolean, expr0x7f9e64931948, expr0x7f9e66d54f48))
      in let step_8_33 = 
        Action.assign(expr0x7f9e64a14b40, expr0x7f9e66d71078)
      in let step_8_34 = 
        Action.assign(expr0x7f9e6486e000, expr0x7f9e6493c450)
      in let step_8_35 = 
        Action.assign(expr0x7f9e64a142d0, expr0x7f9e64a14b40)
      in Block.block(
        8,
        [|
          step_8_32;
          step_8_33;
          step_8_34;
          step_8_35;
        |],
        [|
          (* no calls *)
        |],
        [|
          "assume FALSE (_12 != 0)";
          "_92 = 0;";
          "# .MEM_93 = VDEF <.MEM_65>\nerr_buf ={v} {CLOBBER};";
          "_62 = _92";
        |]
      )
    in let block_9 = 
      let step_9_36 = 
        Action.assume(3, Expr.blte(GccType.boolean, expr0x7f9e64a148b8, expr0x7f9e66d71078))
      in let step_9_37 = 
        Action.assign(expr0x7f9e6486e000, expr0x7f9e6493c438)
      in Block.block(
        9,
        [|
          step_9_36;
          step_9_37;
        |],
        [|
          (* no calls *)
        |],
        [|
          "assume FALSE (err_83 > 0)";
          "# .MEM_84 = VDEF <.MEM_82>\nerr_buf ={v} {CLOBBER};";
        |]
      )
    in let block_10 = 
      let step_10_38 = 
        Action.assume(2, Expr.bgt(GccType.boolean, expr0x7f9e64931708, expr0x7f9e66d71078))
      in let step_10_39 = 
        Action.assign(expr0x7f9e64c43990, expr0x7f9e6482f6d8)
      in let step_10_40 = 
        Action.assign(expr0x7f9e64931990, expr0x7f9e6493e0c0)
      in let step_10_41 = 
        Action.call(call0x7f9e64936630)
      in let step_10_42 = 
        Action.assign(expr0x7f9e649319d8, call0x7f9e64936630)
      in Block.block(
        10,
        [|
          step_10_38;
          step_10_39;
          step_10_40;
          step_10_41;
          step_10_42;
        |],
        [|
          ("SSL_is_init_finished", 1);
        |],
        [|
          "assume FALSE (_5 <= 0)";
          "# .MEM_94 = VDEF <.MEM_66>\ng_sess = 0B;";
          "# VUSE <.MEM_94>\n_13 = serv_77(D)->ssl;";
          "# .MEM_95 = VDEF <.MEM_94>\n_14 = SSL_is_init_finished (_13);";
          "<CAPTURES RETURN>";
        |]
      )
    in let block_11 = 
      let step_11_43 = 
        Action.assume(10, Expr.bneq(GccType.boolean, expr0x7f9e649319d8, expr0x7f9e66d71078))
      in let step_11_44 = 
        Action.assign(expr0x7f9e64931a20, expr0x7f9e6493e0f0)
      in let step_11_45 = 
        Action.call(call0x7f9e649366c0)
      in let step_11_46 = 
        Action.assign(expr0x7f9e64931a68, call0x7f9e649366c0)
      in Block.block(
        11,
        [|
          step_11_43;
          step_11_44;
          step_11_45;
          step_11_46;
        |],
        [|
          ("_SSL_get_cert_info", 1);
        |],
        [|
          "assume TRUE (_14 != 0)";
          "# VUSE <.MEM_95>\n_15 = serv_77(D)->ssl;";
          "# .MEM_106 = VDEF <.MEM_95>\n_16 = _SSL_get_cert_info (&cert_info, _15);";
          "<CAPTURES RETURN>";
        |]
      )
    in let block_12 = 
      let step_12_47 = 
        Action.assume(11, Expr.beq(GccType.boolean, expr0x7f9e64931a68, expr0x7f9e66d71078))
      in let step_12_48 = 
        Action.call(call0x7f9e64920ed8)
      in let step_12_49 = 
        Action.assign(expr0x7f9e64931ab0, expr0x7f9e6493e120)
      in let step_12_50 = 
        Action.call(call0x7f9e64940000)
      in let step_12_51 = 
        Action.call(call0x7f9e64941000)
      in let step_12_52 = 
        Action.assign(expr0x7f9e64931af8, expr0x7f9e6493e150)
      in let step_12_53 = 
        Action.call(call0x7f9e64940100)
      in let step_12_54 = 
        Action.assign(expr0x7f9e64a17120, expr0x7f9e66d71078)
      in let step_12_55 = 
        Action.debug("# DEBUG i => i_112")
      in let step_12_56 = 
        Action.assign(expr0x7f9e64a141f8, expr0x7f9e64a17120)
      in Block.block(
        12,
        [|
          step_12_47;
          step_12_48;
          step_12_49;
          step_12_50;
          step_12_51;
          step_12_52;
          step_12_53;
          step_12_54;
          step_12_55;
          step_12_56;
        |],
        [|
          ("g_snprintf", 2);
          ("text_emit", 2);
        |],
        [|
          "assume TRUE (_16 == 0)";
          "# .MEM_108 = VDEF <.MEM_106>\ng_snprintf (&buf, 256, \"* Certification info:\");";
          "# VUSE <.MEM_108>\n_17 = serv_77(D)->server_session;";
          "# .MEM_109 = VDEF <.MEM_108>\ntext_emit (125, _17, &buf, 0B, 0B, 0B, 0);";
          "# .MEM_110 = VDEF <.MEM_109>\ng_snprintf (&buf, 256, \"  Subject:\");";
          "# VUSE <.MEM_110>\n_18 = serv_77(D)->server_session;";
          "# .MEM_111 = VDEF <.MEM_110>\ntext_emit (125, _18, &buf, 0B, 0B, 0B, 0);";
          "i_112 = 0;";
          "# DEBUG i => i_112";
          "i_59 = i_112";
        |]
      )
    in let block_13 = 
      let step_13_57 = 
        Action.assume(14, Expr.bneq(GccType.boolean, expr0x7f9e64931bd0, expr0x7f9e66f00480))
      in let step_13_58 = 
        Action.assign(expr0x7f9e64931b40, expr0x7f9e6493f1c0)
      in let step_13_59 = 
        Action.call(call0x7f9e64922e70)
      in let step_13_60 = 
        Action.assign(expr0x7f9e64931b88, expr0x7f9e6493e1b0)
      in let step_13_61 = 
        Action.call(call0x7f9e64940200)
      in let step_13_62 = 
        Action.assign(expr0x7f9e64a17558, Expr.plus(
          type0x7f9e66d6c5e8, expr0x7f9e64a141f8, expr0x7f9e66d71090))
      in let step_13_63 = 
        Action.debug("# DEBUG i => i_127")
      in let step_13_64 = 
        Action.assign(expr0x7f9e64a141f8, expr0x7f9e64a17558)
      in Block.block(
        13,
        [|
          step_13_57;
          step_13_58;
          step_13_59;
          step_13_60;
          step_13_61;
          step_13_62;
          step_13_63;
          step_13_64;
        |],
        [|
          ("g_snprintf", 1);
          ("text_emit", 1);
        |],
        [|
          "assume TRUE (_21 != 0B)";
          "# VUSE <.MEM_67>\n_19 = cert_info.subject_word[i_59];";
          "# .MEM_125 = VDEF <.MEM_67>\ng_snprintf (&buf, 256, \"    %s\", _19);";
          "# VUSE <.MEM_125>\n_20 = serv_77(D)->server_session;";
          "# .MEM_126 = VDEF <.MEM_125>\ntext_emit (125, _20, &buf, 0B, 0B, 0B, 0);";
          "i_127 = i_59 + 1;";
          "# DEBUG i => i_127";
          "i_59 = i_127";
        |]
      )
    in let block_14 = 
      let step_14_65 = 
        Action.debug("# DEBUG i => i_59")
      in let step_14_66 = 
        Action.assign(expr0x7f9e64931bd0, expr0x7f9e6493f230)
      in Block.block(
        14,
        [|
          step_14_65;
          step_14_66;
        |],
        [|
          (* no calls *)
        |],
        [|
          "# DEBUG i => i_59";
          "# VUSE <.MEM_67>\n_21 = cert_info.subject_word[i_59];";
        |]
      )
    in let block_15 = 
      let step_15_67 = 
        Action.assume(14, Expr.beq(GccType.boolean, expr0x7f9e64931bd0, expr0x7f9e66f00480))
      in let step_15_68 = 
        Action.call(call0x7f9e64941098)
      in let step_15_69 = 
        Action.assign(expr0x7f9e64931c18, expr0x7f9e6493e210)
      in let step_15_70 = 
        Action.call(call0x7f9e64940300)
      in let step_15_71 = 
        Action.assign(expr0x7f9e64a171f8, expr0x7f9e66d71078)
      in let step_15_72 = 
        Action.debug("# DEBUG i => i_115")
      in let step_15_73 = 
        Action.assign(expr0x7f9e64a14240, expr0x7f9e64a171f8)
      in Block.block(
        15,
        [|
          step_15_67;
          step_15_68;
          step_15_69;
          step_15_70;
          step_15_71;
          step_15_72;
          step_15_73;
        |],
        [|
          ("g_snprintf", 1);
          ("text_emit", 1);
        |],
        [|
          "assume FALSE (_21 != 0B)";
          "# .MEM_113 = VDEF <.MEM_67>\ng_snprintf (&buf, 256, \"  Issuer:\");";
          "# VUSE <.MEM_113>\n_22 = serv_77(D)->server_session;";
          "# .MEM_114 = VDEF <.MEM_113>\ntext_emit (125, _22, &buf, 0B, 0B, 0B, 0);";
          "i_115 = 0;";
          "# DEBUG i => i_115";
          "i_60 = i_115";
        |]
      )
    in let block_16 = 
      let step_16_74 = 
        Action.assume(17, Expr.bneq(GccType.boolean, expr0x7f9e64931cf0, expr0x7f9e66f00480))
      in let step_16_75 = 
        Action.assign(expr0x7f9e64931c60, expr0x7f9e6493f310)
      in let step_16_76 = 
        Action.call(call0x7f9e64922f18)
      in let step_16_77 = 
        Action.assign(expr0x7f9e64931ca8, expr0x7f9e6493e270)
      in let step_16_78 = 
        Action.call(call0x7f9e64940400)
      in let step_16_79 = 
        Action.assign(expr0x7f9e64a17480, Expr.plus(
          type0x7f9e66d6c5e8, expr0x7f9e64a14240, expr0x7f9e66d71090))
      in let step_16_80 = 
        Action.debug("# DEBUG i => i_124")
      in let step_16_81 = 
        Action.assign(expr0x7f9e64a14240, expr0x7f9e64a17480)
      in Block.block(
        16,
        [|
          step_16_74;
          step_16_75;
          step_16_76;
          step_16_77;
          step_16_78;
          step_16_79;
          step_16_80;
          step_16_81;
        |],
        [|
          ("g_snprintf", 1);
          ("text_emit", 1);
        |],
        [|
          "assume TRUE (_25 != 0B)";
          "# VUSE <.MEM_68>\n_23 = cert_info.issuer_word[i_60];";
          "# .MEM_122 = VDEF <.MEM_68>\ng_snprintf (&buf, 256, \"    %s\", _23);";
          "# VUSE <.MEM_122>\n_24 = serv_77(D)->server_session;";
          "# .MEM_123 = VDEF <.MEM_122>\ntext_emit (125, _24, &buf, 0B, 0B, 0B, 0);";
          "i_124 = i_60 + 1;";
          "# DEBUG i => i_124";
          "i_60 = i_124";
        |]
      )
    in let block_17 = 
      let step_17_82 = 
        Action.debug("# DEBUG i => i_60")
      in let step_17_83 = 
        Action.assign(expr0x7f9e64931cf0, expr0x7f9e6493f380)
      in Block.block(
        17,
        [|
          step_17_82;
          step_17_83;
        |],
        [|
          (* no calls *)
        |],
        [|
          "# DEBUG i => i_60";
          "# VUSE <.MEM_68>\n_25 = cert_info.issuer_word[i_60];";
        |]
      )
    in let block_18 = 
      let step_18_84 = 
        Action.assume(17, Expr.beq(GccType.boolean, expr0x7f9e64931cf0, expr0x7f9e66f00480))
      in let step_18_85 = 
        Action.assign(expr0x7f9e64931d38, expr0x7f9e6493e2d0)
      in let step_18_86 = 
        Action.call(call0x7f9e64922000)
      in let step_18_87 = 
        Action.assign(expr0x7f9e64931d80, expr0x7f9e6493e300)
      in let step_18_88 = 
        Action.call(call0x7f9e64940500)
      in let step_18_89 = 
        Action.call(call0x7f9e649220a8)
      in let step_18_90 = 
        Action.assign(expr0x7f9e64931dc8, expr0x7f9e6493e330)
      in let step_18_91 = 
        Action.call(call0x7f9e64940600)
      in let step_18_92 = 
        Action.call(call0x7f9e64922888)
      in let step_18_93 = 
        Action.assign(expr0x7f9e64931e10, expr0x7f9e6493e360)
      in let step_18_94 = 
        Action.call(call0x7f9e64940700)
      in Block.block(
        18,
        [|
          step_18_84;
          step_18_85;
          step_18_86;
          step_18_87;
          step_18_88;
          step_18_89;
          step_18_90;
          step_18_91;
          step_18_92;
          step_18_93;
          step_18_94;
        |],
        [|
          ("g_snprintf", 3);
          ("text_emit", 3);
        |],
        [|
          "assume FALSE (_25 != 0B)";
          "# VUSE <.MEM_68>\n_26 = cert_info.algorithm_bits;";
          "# .MEM_116 = VDEF <.MEM_68>\ng_snprintf (&buf, 256, \"  Public key algorithm: %s (%d bits)\", &cert_info.algorithm, _26);";
          "# VUSE <.MEM_116>\n_27 = serv_77(D)->server_session;";
          "# .MEM_117 = VDEF <.MEM_116>\ntext_emit (125, _27, &buf, 0B, 0B, 0B, 0);";
          "# .MEM_118 = VDEF <.MEM_117>\ng_snprintf (&buf, 256, \"  Sign algorithm %s\", &cert_info.sign_algorithm);";
          "# VUSE <.MEM_118>\n_28 = serv_77(D)->server_session;";
          "# .MEM_119 = VDEF <.MEM_118>\ntext_emit (125, _28, &buf, 0B, 0B, 0B, 0);";
          "# .MEM_120 = VDEF <.MEM_119>\ng_snprintf (&buf, 256, \"  Valid since %s to %s\", &cert_info.notbefore, &cert_info.notafter);";
          "# VUSE <.MEM_120>\n_29 = serv_77(D)->server_session;";
          "# .MEM_121 = VDEF <.MEM_120>\ntext_emit (125, _29, &buf, 0B, 0B, 0B, 0);";
        |]
      )
    in let block_19 = 
      let step_19_95 = 
        Action.assume(11, Expr.bneq(GccType.boolean, expr0x7f9e64931a68, expr0x7f9e66d71078))
      in let step_19_96 = 
        Action.call(call0x7f9e64941130)
      in Block.block(
        19,
        [|
          step_19_95;
          step_19_96;
        |],
        [|
          ("g_snprintf", 1);
        |],
        [|
          "assume FALSE (_16 == 0)";
          "# .MEM_107 = VDEF <.MEM_106>\ng_snprintf (&buf, 256, \"No Certificate\");";
        |]
      )
    in let block_20 = 
      let step_20_97 = 
        Action.assign(expr0x7f9e64931e58, expr0x7f9e6493e390)
      in let step_20_98 = 
        Action.call(call0x7f9e64936750)
      in let step_20_99 = 
        Action.assign(expr0x7f9e64a175e8, call0x7f9e64936750)
      in let step_20_100 = 
        Action.debug("# DEBUG chiper_info => chiper_info_129")
      in let step_20_101 = 
        Action.call(call0x7f9e649411c8)
      in let step_20_102 = 
        Action.assign(expr0x7f9e64931ea0, expr0x7f9e6493e3c0)
      in let step_20_103 = 
        Action.call(call0x7f9e64940800)
      in let step_20_104 = 
        Action.assign(expr0x7f9e64931ee8, expr0x7f9e6493e3f0)
      in let step_20_105 = 
        Action.assign(expr0x7f9e64931f30, expr0x7f9e6493ba60)
      in let step_20_106 = 
        Action.assign(expr0x7f9e64931f78, expr0x7f9e6493ba80)
      in let step_20_107 = 
        Action.call(call0x7f9e64895e70)
      in let step_20_108 = 
        Action.assign(expr0x7f9e649310d8, expr0x7f9e6493e480)
      in let step_20_109 = 
        Action.call(call0x7f9e64940900)
      in let step_20_110 = 
        Action.assign(expr0x7f9e64931168, expr0x7f9e6493e4b0)
      in let step_20_111 = 
        Action.call(call0x7f9e649367e0)
      in let step_20_112 = 
        Action.assign(expr0x7f9e649311b0, call0x7f9e649367e0)
      in let step_20_113 = 
        Action.assign(expr0x7f9e64a17798, expr0x7f9e649311b0)
      in let step_20_114 = 
        Action.debug("# DEBUG verify_error => verify_error_135")
      in Block.block(
        20,
        [|
          step_20_97;
          step_20_98;
          step_20_99;
          step_20_100;
          step_20_101;
          step_20_102;
          step_20_103;
          step_20_104;
          step_20_105;
          step_20_106;
          step_20_107;
          step_20_108;
          step_20_109;
          step_20_110;
          step_20_111;
          step_20_112;
          step_20_113;
          step_20_114;
        |],
        [|
          ("SSL_get_verify_result", 1);
          ("_SSL_get_cipher_info", 1);
          ("g_snprintf", 2);
          ("text_emit", 2);
        |],
        [|
          "# VUSE <.MEM_69>\n_30 = serv_77(D)->ssl;";
          "# .MEM_128 = VDEF <.MEM_69>\nchiper_info_129 = _SSL_get_cipher_info (_30);";
          "<CAPTURES RETURN>";
          "# DEBUG chiper_info => chiper_info_129";
          "# .MEM_130 = VDEF <.MEM_128>\ng_snprintf (&buf, 256, \"* Cipher info:\");";
          "# VUSE <.MEM_130>\n_31 = serv_77(D)->server_session;";
          "# .MEM_131 = VDEF <.MEM_130>\ntext_emit (125, _31, &buf, 0B, 0B, 0B, 0);";
          "# VUSE <.MEM_131>\n_32 = chiper_info_129->chiper_bits;";
          "_33 = &chiper_info_129->chiper;";
          "_34 = &chiper_info_129->version;";
          "# .MEM_132 = VDEF <.MEM_131>\ng_snprintf (&buf, 256, \"  Version: %s, cipher %s (%u bits)\", _34, _33, _32);";
          "# VUSE <.MEM_132>\n_35 = serv_77(D)->server_session;";
          "# .MEM_133 = VDEF <.MEM_132>\ntext_emit (125, _35, &buf, 0B, 0B, 0B, 0);";
          "# VUSE <.MEM_133>\n_36 = serv_77(D)->ssl;";
          "# .MEM_134 = VDEF <.MEM_133>\n_37 = SSL_get_verify_result (_36);";
          "<CAPTURES RETURN>";
          "verify_error_135 = (int) _37;";
          "# DEBUG verify_error => verify_error_135";
        |]
      )
    in let block_21 = 
      let step_21_115 = 
        Action.assume(20, Expr.beq(GccType.boolean, expr0x7f9e64a17798, expr0x7f9e66d71078))
      in let step_21_116 = 
        Action.observe(expr0x7f9e64861900)
      in let step_21_117 = 
        Action.assign(expr0x7f9e64942000, expr0x7f9e6493e4e0)
      in let step_21_118 = 
        Action.call(call0x7f9e64936870)
      in let step_21_119 = 
        Action.assign(expr0x7f9e64a17900, call0x7f9e64936870)
      in let step_21_120 = 
        Action.debug("# DEBUG cert => cert_140")
      in let step_21_121 = 
        Action.assign(expr0x7f9e64942048, expr0x7f9e6493bbe0)
      in let step_21_122 = 
        Action.call(call0x7f9e64936900)
      in let step_21_123 = 
        Action.assign(expr0x7f9e64a17990, call0x7f9e64936900)
      in let step_21_124 = 
        Action.debug("# DEBUG hostname_err => hostname_err_142")
      in Block.block(
        21,
        [|
          step_21_115;
          step_21_116;
          step_21_117;
          step_21_118;
          step_21_119;
          step_21_120;
          step_21_121;
          step_21_122;
          step_21_123;
          step_21_124;
        |],
        [|
          ("SSL_get_peer_certificate", 1);
          ("_SSL_check_hostname", 1);
        |],
        [|
          "assume TRUE (verify_error_135 == 0)";
          "<L20> [0.00%]:";
          "# VUSE <.MEM_134>\n_38 = serv_77(D)->ssl;";
          "# .MEM_139 = VDEF <.MEM_134>\ncert_140 = SSL_get_peer_certificate (_38);";
          "<CAPTURES RETURN>";
          "# DEBUG cert => cert_140";
          "_39 = &serv_77(D)->hostname;";
          "# .MEM_141 = VDEF <.MEM_139>\nhostname_err_142 = _SSL_check_hostname (cert_140, _39);";
          "<CAPTURES RETURN>";
          "# DEBUG hostname_err => hostname_err_142";
        |]
      )
    in let block_22 = 
      let step_22_125 = 
        Action.assume(21, Expr.bneq(GccType.boolean, expr0x7f9e64a17990, expr0x7f9e66d71078))
      in let step_22_126 = 
        Action.assign(expr0x7f9e64942090, expr0x7f9e6493e540)
      in let step_22_127 = 
        Action.assign(expr0x7f9e649420d8, Expr.bit_and(
          type0x7f9e66d6c348, expr0x7f9e64942090, expr0x7f9e64862198))
      in Block.block(
        22,
        [|
          step_22_125;
          step_22_126;
          step_22_127;
        |],
        [|
          (* no calls *)
        |],
        [|
          "assume TRUE (hostname_err_142 != 0)";
          "# VUSE <.MEM_141>\n_40 = BIT_FIELD_REF <*serv_77(D), 8, 24576>;";
          "_41 = _40 & 8;";
        |]
      )
    in let block_23 = 
      let step_23_128 = 
        Action.assume(22, Expr.bneq(GccType.boolean, expr0x7f9e649420d8, expr0x7f9e66d54df8))
      in let step_23_129 = 
        Action.assign(expr0x7f9e64a17a20, expr0x7f9e648743e0)
      in let step_23_130 = 
        Action.assign(expr0x7f9e64a14318, expr0x7f9e64a17a20)
      in Block.block(
        23,
        [|
          step_23_128;
          step_23_129;
          step_23_130;
        |],
        [|
          (* no calls *)
        |],
        [|
          "assume TRUE (_41 != 0)";
          "iftmp.10_144 = \" -- Ignored\";";
          "iftmp.10_63 = iftmp.10_144";
        |]
      )
    in let block_24 = 
      let step_24_131 = 
        Action.assume(22, Expr.beq(GccType.boolean, expr0x7f9e649420d8, expr0x7f9e66d54df8))
      in let step_24_132 = 
        Action.assign(expr0x7f9e64a179d8, expr0x7f9e64874420)
      in let step_24_133 = 
        Action.assign(expr0x7f9e64a14318, expr0x7f9e64a179d8)
      in Block.block(
        24,
        [|
          step_24_131;
          step_24_132;
          step_24_133;
        |],
        [|
          (* no calls *)
        |],
        [|
          "assume FALSE (_41 != 0)";
          "iftmp.10_143 = \"\";";
          "iftmp.10_63 = iftmp.10_143";
        |]
      )
    in let block_25 = 
      let step_25_134 = 
        Action.call(call0x7f9e64922930)
      in let step_25_135 = 
        Action.assign(expr0x7f9e64942120, expr0x7f9e6493e570)
      in let step_25_136 = 
        Action.assign(expr0x7f9e64942168, Expr.bit_and(
          type0x7f9e66d6c348, expr0x7f9e64942120, expr0x7f9e64862198))
      in Block.block(
        25,
        [|
          step_25_134;
          step_25_135;
          step_25_136;
        |],
        [|
          ("g_snprintf", 1);
        |],
        [|
          "# .MEM_145 = VDEF <.MEM_141>\ng_snprintf (&buf, 256, \"* Verify E: Failed to validate hostname? (%d)%s\", hostname_err_142, iftmp.10_63);";
          "# VUSE <.MEM_145>\n_42 = BIT_FIELD_REF <*serv_77(D), 8, 24576>;";
          "_43 = _42 & 8;";
        |]
      )
    in let block_26 = 
      let step_26_137 = 
        Action.assume(25, Expr.bneq(GccType.boolean, expr0x7f9e64942168, expr0x7f9e66d54df8))
      in let step_26_138 = 
        Action.assign(expr0x7f9e649421b0, expr0x7f9e6493e5a0)
      in let step_26_139 = 
        Action.call(call0x7f9e64940a00)
      in Block.block(
        26,
        [|
          step_26_137;
          step_26_138;
          step_26_139;
        |],
        [|
          ("text_emit", 1);
        |],
        [|
          "assume TRUE (_43 != 0)";
          "# VUSE <.MEM_145>\n_44 = serv_77(D)->server_session;";
          "# .MEM_146 = VDEF <.MEM_145>\ntext_emit (125, _44, &buf, 0B, 0B, 0B, 0);";
        |]
      )
    in let block_27 = 
      let step_27_140 = 
        Action.assume(20, Expr.beq(GccType.boolean, expr0x7f9e64a17798, expr0x7f9e66f00e58))
      in let step_27_141 = 
        Action.assume(20, Expr.inrange(GccType.boolean, expr0x7f9e64a17798,expr0x7f9e65fd3210,expr0x7f9e65fd37f8))
      in let step_27_142 = 
        Action.observe(expr0x7f9e64861a80)
      in let step_27_143 = 
        Action.assign(expr0x7f9e649421f8, expr0x7f9e6493e5d0)
      in let step_27_144 = 
        Action.assign(expr0x7f9e64942240, Expr.bit_and(
          type0x7f9e66d6c348, expr0x7f9e649421f8, expr0x7f9e64862198))
      in Block.block(
        27,
        [|
          step_27_140;
          step_27_141;
          step_27_142;
          step_27_143;
          step_27_144;
        |],
        [|
          (* no calls *)
        |],
        [|
          "assume TRUE (verify_error_135 == 10)";
          "assume TRUE (verify_error_135 >= 18 and verify_error_135 <= 21)";
          "<L27> [0.00%]:";
          "# VUSE <.MEM_134>\n_45 = BIT_FIELD_REF <*serv_77(D), 8, 24576>;";
          "_46 = _45 & 8;";
        |]
      )
    in let block_28 = 
      let step_28_145 = 
        Action.assume(27, Expr.bneq(GccType.boolean, expr0x7f9e64942240, expr0x7f9e66d54df8))
      in let step_28_146 = 
        Action.assign(expr0x7f9e64942288, expr0x7f9e64a17798)
      in let step_28_147 = 
        Action.call(call0x7f9e64936a20)
      in let step_28_148 = 
        Action.assign(expr0x7f9e649422d0, call0x7f9e64936a20)
      in let step_28_149 = 
        Action.call(call0x7f9e649229d8)
      in let step_28_150 = 
        Action.assign(expr0x7f9e64942318, expr0x7f9e6493e600)
      in let step_28_151 = 
        Action.call(call0x7f9e64940b00)
      in Block.block(
        28,
        [|
          step_28_145;
          step_28_146;
          step_28_147;
          step_28_148;
          step_28_149;
          step_28_150;
          step_28_151;
        |],
        [|
          ("X509_verify_cert_error_string", 1);
          ("g_snprintf", 1);
          ("text_emit", 1);
        |],
        [|
          "assume TRUE (_46 != 0)";
          "_47 = (long int) verify_error_135;";
          "# .MEM_136 = VDEF <.MEM_134>\n_48 = X509_verify_cert_error_string (_47);";
          "<CAPTURES RETURN>";
          "# .MEM_137 = VDEF <.MEM_136>\ng_snprintf (&buf, 256, \"* Verify E: %s.? (%d) -- Ignored\", _48, verify_error_135);";
          "# VUSE <.MEM_137>\n_49 = serv_77(D)->server_session;";
          "# .MEM_138 = VDEF <.MEM_137>\ntext_emit (125, _49, &buf, 0B, 0B, 0B, 0);";
        |]
      )
    in let block_29 = 
      let step_29_152 = 
        Action.assume(20, Expr.bnot(GccType.boolean, Expr.bor(GccType.boolean, Expr.beq(GccType.boolean, expr0x7f9e64a17798, expr0x7f9e66d71078), Expr.bor(GccType.boolean, Expr.beq(GccType.boolean, expr0x7f9e64a17798, expr0x7f9e66f00e58), Expr.inrange(GccType.boolean, expr0x7f9e64a17798, expr0x7f9e65fd3210, expr0x7f9e65fd37f8)))))
      in let step_29_153 = 
        Action.assume(27, Expr.beq(GccType.boolean, expr0x7f9e64942240, expr0x7f9e66d54df8))
      in let step_29_154 = 
        Action.observe(expr0x7f9e64930200)
      in let step_29_155 = 
        Action.assign(expr0x7f9e64942360, expr0x7f9e64a17798)
      in let step_29_156 = 
        Action.call(call0x7f9e64936ab0)
      in let step_29_157 = 
        Action.assign(expr0x7f9e649423a8, call0x7f9e64936ab0)
      in let step_29_158 = 
        Action.call(call0x7f9e64945000)
      in Block.block(
        29,
        [|
          step_29_152;
          step_29_153;
          step_29_154;
          step_29_155;
          step_29_156;
          step_29_157;
          step_29_158;
        |],
        [|
          ("X509_verify_cert_error_string", 1);
          ("g_snprintf", 1);
        |],
        [|
          "assume FALSE ((verify_error_135 == 0) or (verify_error_135 == 10) or (verify_error_135 >= 18 and verify_error_135 <= 21))";
          "assume FALSE (_46 != 0)";
          "<L33> [0.00%]:";
          "_50 = (long int) verify_error_135;";
          "# .MEM_150 = VDEF <.MEM_134>\n_51 = X509_verify_cert_error_string (_50);";
          "<CAPTURES RETURN>";
          "# .MEM_151 = VDEF <.MEM_150>\ng_snprintf (&buf, 256, \"%s.? (%d)\", _51, verify_error_135);";
        |]
      )
    in let block_30 = 
      let step_30_159 = 
        Action.assume(25, Expr.beq(GccType.boolean, expr0x7f9e64942168, expr0x7f9e66d54df8))
      in let step_30_160 = 
        Action.observe(expr0x7f9e64861980)
      in let step_30_161 = 
        Action.assign(expr0x7f9e649423f0, expr0x7f9e6493e630)
      in let step_30_162 = 
        Action.call(call0x7f9e64940c00)
      in let step_30_163 = 
        Action.call(call0x7f9e64936b40)
      in let step_30_164 = 
        Action.assign(expr0x7f9e64a17cf0, expr0x7f9e66d71078)
      in let step_30_165 = 
        Action.assign(expr0x7f9e64a14288, expr0x7f9e64a17cf0)
      in Block.block(
        30,
        [|
          step_30_159;
          step_30_160;
          step_30_161;
          step_30_162;
          step_30_163;
          step_30_164;
          step_30_165;
        |],
        [|
          ("server_cleanup", 1);
          ("text_emit", 1);
        |],
        [|
          "assume FALSE (_43 != 0)";
          "conn_fail [0.00%]:";
          "# VUSE <.MEM_70>\n_52 = serv_77(D)->server_session;";
          "# .MEM_152 = VDEF <.MEM_70>\ntext_emit (39, _52, &buf, 0B, 0B, 0B, 0);";
          "# .MEM_153 = VDEF <.MEM_152>\nserver_cleanup (serv_77(D));";
          "_154 = 0;";
          "_61 = _154";
        |]
      )
    in let block_31 = 
      let step_31_166 = 
        Action.assume(21, Expr.beq(GccType.boolean, expr0x7f9e64a17990, expr0x7f9e66d71078))
      in let step_31_167 = 
        Action.call(call0x7f9e64936bd0)
      in let step_31_168 = 
        Action.call(call0x7f9e64936c60)
      in let step_31_169 = 
        Action.assign(expr0x7f9e64a17b88, expr0x7f9e66d71078)
      in let step_31_170 = 
        Action.assign(expr0x7f9e64a14288, expr0x7f9e64a17b88)
      in Block.block(
        31,
        [|
          step_31_166;
          step_31_167;
          step_31_168;
          step_31_169;
          step_31_170;
        |],
        [|
          ("server_connected", 1);
          ("server_stopconnecting", 1);
        |],
        [|
          "assume FALSE (hostname_err_142 != 0)";
          "# .MEM_147 = VDEF <.MEM_71>\nserver_stopconnecting (serv_77(D));";
          "# .MEM_148 = VDEF <.MEM_147>\nserver_connected (serv_77(D));";
          "_149 = 0;";
          "_61 = _149";
        |]
      )
    in let block_32 = 
      let step_32_171 = 
        Action.assign(expr0x7f9e6486e120, expr0x7f9e6493c348)
      in let step_32_172 = 
        Action.assign(expr0x7f9e64a142d0, expr0x7f9e64a14288)
      in Block.block(
        32,
        [|
          step_32_171;
          step_32_172;
        |],
        [|
          (* no calls *)
        |],
        [|
          "# .MEM_155 = VDEF <.MEM_72>\ncert_info ={v} {CLOBBER};";
          "_62 = _61";
        |]
      )
    in let block_33 = 
      let step_33_173 = 
        Action.assume(10, Expr.beq(GccType.boolean, expr0x7f9e649319d8, expr0x7f9e66d71078))
      in let step_33_174 = 
        Action.assign(expr0x7f9e64942438, expr0x7f9e6493e660)
      in let step_33_175 = 
        Action.call(call0x7f9e64936cf0)
      in let step_33_176 = 
        Action.assign(expr0x7f9e64a14ca8, call0x7f9e64936cf0)
      in let step_33_177 = 
        Action.debug("# DEBUG session => session_97")
      in Block.block(
        33,
        [|
          step_33_173;
          step_33_174;
          step_33_175;
          step_33_176;
          step_33_177;
        |],
        [|
          ("SSL_get_session", 1);
        |],
        [|
          "assume FALSE (_14 != 0)";
          "# VUSE <.MEM_95>\n_53 = serv_77(D)->ssl;";
          "# .MEM_96 = VDEF <.MEM_95>\nsession_97 = SSL_get_session (_53);";
          "<CAPTURES RETURN>";
          "# DEBUG session => session_97";
        |]
      )
    in let block_34 = 
      let step_34_178 = 
        Action.assume(33, Expr.bneq(GccType.boolean, expr0x7f9e64a14ca8, expr0x7f9e64875270))
      in let step_34_179 = 
        Action.call(call0x7f9e64936d80)
      in let step_34_180 = 
        Action.assign(expr0x7f9e64942480, call0x7f9e64936d80)
      in let step_34_181 = 
        Action.assign(expr0x7f9e649424c8, Expr.plus(
          type0x7f9e66d6c738, expr0x7f9e64942480, expr0x7f9e64875288))
      in let step_34_182 = 
        Action.call(call0x7f9e64936e10)
      in let step_34_183 = 
        Action.assign(expr0x7f9e64942510, call0x7f9e64936e10)
      in Block.block(
        34,
        [|
          step_34_178;
          step_34_179;
          step_34_180;
          step_34_181;
          step_34_182;
          step_34_183;
        |],
        [|
          ("SSL_SESSION_get_time", 1);
          ("time", 1);
        |],
        [|
          "assume TRUE (session_97 != 0B)";
          "# .MEM_98 = VDEF <.MEM_96>\n_54 = SSL_SESSION_get_time (session_97);";
          "<CAPTURES RETURN>";
          "_55 = _54 + 90;";
          "# .MEM_99 = VDEF <.MEM_98>\n_56 = time (0B);";
          "<CAPTURES RETURN>";
        |]
      )
    in let block_35 = 
      let step_35_184 = 
        Action.assume(34, Expr.blt(GccType.boolean, expr0x7f9e649424c8, expr0x7f9e64942510))
      in let step_35_185 = 
        Action.call(call0x7f9e64941260)
      in let step_35_186 = 
        Action.assign(expr0x7f9e64942558, expr0x7f9e6493e6c0)
      in let step_35_187 = 
        Action.call(call0x7f9e64940d00)
      in let step_35_188 = 
        Action.call(call0x7f9e64936ea0)
      in let step_35_189 = 
        Action.assign(expr0x7f9e649425a0, expr0x7f9e6493e6f0)
      in Block.block(
        35,
        [|
          step_35_184;
          step_35_185;
          step_35_186;
          step_35_187;
          step_35_188;
          step_35_189;
        |],
        [|
          ("g_snprintf", 1);
          ("server_cleanup", 1);
          ("text_emit", 1);
        |],
        [|
          "assume TRUE (_55 < _56)";
          "# .MEM_100 = VDEF <.MEM_99>\ng_snprintf (&buf, 256, \"SSL handshake timed out\");";
          "# VUSE <.MEM_100>\n_57 = serv_77(D)->server_session;";
          "# .MEM_101 = VDEF <.MEM_100>\ntext_emit (39, _57, &buf, 0B, 0B, 0B, 0);";
          "# .MEM_102 = VDEF <.MEM_101>\nserver_cleanup (serv_77(D));";
          "# VUSE <.MEM_102>\n_58 = prefs.hex_net_auto_reconnectonfail;";
        |]
      )
    in let block_36 = 
      let step_36_190 = 
        Action.assume(35, Expr.bneq(GccType.boolean, expr0x7f9e649425a0, expr0x7f9e66d54f48))
      in let step_36_191 = 
        Action.call(call0x7f9e649412f8)
      in Block.block(
        36,
        [|
          step_36_190;
          step_36_191;
        |],
        [|
          ("auto_reconnect", 1);
        |],
        [|
          "assume TRUE (_58 != 0)";
          "# .MEM_103 = VDEF <.MEM_102>\nauto_reconnect (serv_77(D), 0, -1);";
        |]
      )
    in let block_37 = 
      let step_37_192 = 
        Action.assume(35, Expr.beq(GccType.boolean, expr0x7f9e649425a0, expr0x7f9e66d54f48))
      in let step_37_193 = 
        Action.assign(expr0x7f9e64a14ea0, expr0x7f9e66d71078)
      in let step_37_194 = 
        Action.assign(expr0x7f9e64a142d0, expr0x7f9e64a14ea0)
      in Block.block(
        37,
        [|
          step_37_192;
          step_37_193;
          step_37_194;
        |],
        [|
          (* no calls *)
        |],
        [|
          "assume FALSE (_58 != 0)";
          "_104 = 0;";
          "_62 = _104";
        |]
      )
    in let block_38 = 
      let step_38_195 = 
        Action.assume(33, Expr.beq(GccType.boolean, expr0x7f9e64a14ca8, expr0x7f9e64875270))
      in let step_38_196 = 
        Action.assume(34, Expr.bgte(GccType.boolean, expr0x7f9e649424c8, expr0x7f9e64942510))
      in let step_38_197 = 
        Action.assign(expr0x7f9e64a14ee8, expr0x7f9e66d71090)
      in let step_38_198 = 
        Action.assign(expr0x7f9e64a142d0, expr0x7f9e64a14ee8)
      in Block.block(
        38,
        [|
          step_38_195;
          step_38_196;
          step_38_197;
          step_38_198;
        |],
        [|
          (* no calls *)
        |],
        [|
          "assume FALSE (session_97 != 0B)";
          "assume FALSE (_55 < _56)";
          "_105 = 1;";
          "_62 = _105";
        |]
      )
    in let block_39 = 
      let step_39_199 = 
        Action.assign(expr0x7f9e6484acf0, expr0x7f9e6493c420)
      in let step_39_200 = 
        Action.return(expr0x7f9e64a142d0)
      in Block.block(
        39,
        [|
          step_39_199;
          step_39_200;
        |],
        [|
          (* no calls *)
        |],
        [|
          "# .MEM_156 = VDEF <.MEM_75>\nbuf ={v} {CLOBBER};";
          "# VUSE <.MEM_156>\nreturn _62;";
        |]
      )
    in let block_1 = 
      let step_0_201 = Action.finish 
      in Block.block (
        1,
        [| step_0_201 |],
        [||],
        [| "<EXIT>" |]
      )
    in let cfg = Cfg.cfg (
      40,
      Z.of_string "92",
      [|
        Cfg.vert ("[0]", block_0, [|
            Cfg.edge (2, "[2]", block_2, Z.of_string "0", Z.of_string "91");
          |]
        );
        Cfg.vert ("[1]", block_1, [|
          |]
        );
        Cfg.vert ("[2]", block_2, [|
            Cfg.edge (3, "[3]", block_3, Z.of_string "0", Z.of_string "47");
            Cfg.edge (10, "[10]", block_10, Z.of_string "48", Z.of_string "91");
          |]
        );
        Cfg.vert ("[3]", block_3, [|
            Cfg.edge (4, "[4]", block_4, Z.of_string "0", Z.of_string "3");
            Cfg.edge (9, "[9]", block_9, Z.of_string "4", Z.of_string "47");
          |]
        );
        Cfg.vert ("[4]", block_4, [|
            Cfg.edge (5, "[5]", block_5, Z.of_string "0", Z.of_string "1");
            Cfg.edge (6, "[6]", block_6, Z.of_string "2", Z.of_string "3");
          |]
        );
        Cfg.vert ("[5]", block_5, [|
            Cfg.edge (6, "[6]", block_6, Z.of_string "0", Z.of_string "1");
          |]
        );
        Cfg.vert ("[6]", block_6, [|
            Cfg.edge (7, "[7]", block_7, Z.of_string "0", Z.of_string "0");
            Cfg.edge (8, "[8]", block_8, Z.of_string "1", Z.of_string "1");
          |]
        );
        Cfg.vert ("[7]", block_7, [|
            Cfg.edge (8, "[8]", block_8, Z.of_string "0", Z.of_string "0");
          |]
        );
        Cfg.vert ("[8]", block_8, [|
            Cfg.edge (35, "[39]", block_39, Z.of_string "0", Z.of_string "0");
          |]
        );
        Cfg.vert ("[9]", block_9, [|
            Cfg.edge (10, "[10]", block_10, Z.of_string "0", Z.of_string "43");
          |]
        );
        Cfg.vert ("[10]", block_10, [|
            Cfg.edge (11, "[11]", block_11, Z.of_string "0", Z.of_string "39");
            Cfg.edge (29, "[33]", block_33, Z.of_string "40", Z.of_string "43");
          |]
        );
        Cfg.vert ("[11]", block_11, [|
            Cfg.edge (12, "[12]", block_12, Z.of_string "0", Z.of_string "31");
            Cfg.edge (15, "[19]", block_19, Z.of_string "32", Z.of_string "39");
          |]
        );
        Cfg.vert ("[12]", block_12, [|
            Cfg.edge (37, "[0 | 14]", block_14, Z.of_string "0", Z.of_string "31");
          |]
        );
        Cfg.vert ("[15]", block_15, [|
            Cfg.edge (39, "[0 | 17]", block_17, Z.of_string "0", Z.of_string "15");
          |]
        );
        Cfg.vert ("[18]", block_18, [|
            Cfg.edge (16, "[20]", block_20, Z.of_string "0", Z.of_string "7");
          |]
        );
        Cfg.vert ("[19]", block_19, [|
            Cfg.edge (16, "[20]", block_20, Z.of_string "0", Z.of_string "7");
          |]
        );
        Cfg.vert ("[20]", block_20, [|
            Cfg.edge (17, "[21]", block_21, Z.of_string "0", Z.of_string "4");
            Cfg.edge (23, "[27]", block_27, Z.of_string "5", Z.of_string "6");
            Cfg.edge (25, "[29]", block_29, Z.of_string "7", Z.of_string "7");
          |]
        );
        Cfg.vert ("[21]", block_21, [|
            Cfg.edge (18, "[22]", block_22, Z.of_string "0", Z.of_string "3");
            Cfg.edge (27, "[31]", block_31, Z.of_string "4", Z.of_string "4");
          |]
        );
        Cfg.vert ("[22]", block_22, [|
            Cfg.edge (19, "[23]", block_23, Z.of_string "0", Z.of_string "1");
            Cfg.edge (20, "[24]", block_24, Z.of_string "2", Z.of_string "3");
          |]
        );
        Cfg.vert ("[23]", block_23, [|
            Cfg.edge (21, "[25]", block_25, Z.of_string "0", Z.of_string "1");
          |]
        );
        Cfg.vert ("[24]", block_24, [|
            Cfg.edge (21, "[25]", block_25, Z.of_string "0", Z.of_string "1");
          |]
        );
        Cfg.vert ("[25]", block_25, [|
            Cfg.edge (22, "[26]", block_26, Z.of_string "0", Z.of_string "0");
            Cfg.edge (26, "[30]", block_30, Z.of_string "1", Z.of_string "1");
          |]
        );
        Cfg.vert ("[26]", block_26, [|
            Cfg.edge (27, "[31]", block_31, Z.of_string "0", Z.of_string "0");
          |]
        );
        Cfg.vert ("[27]", block_27, [|
            Cfg.edge (24, "[28]", block_28, Z.of_string "0", Z.of_string "0");
            Cfg.edge (25, "[29]", block_29, Z.of_string "1", Z.of_string "1");
          |]
        );
        Cfg.vert ("[28]", block_28, [|
            Cfg.edge (27, "[31]", block_31, Z.of_string "0", Z.of_string "0");
          |]
        );
        Cfg.vert ("[29]", block_29, [|
            Cfg.edge (26, "[30]", block_30, Z.of_string "0", Z.of_string "0");
          |]
        );
        Cfg.vert ("[30]", block_30, [|
            Cfg.edge (28, "[32]", block_32, Z.of_string "0", Z.of_string "0");
          |]
        );
        Cfg.vert ("[31]", block_31, [|
            Cfg.edge (28, "[32]", block_32, Z.of_string "0", Z.of_string "0");
          |]
        );
        Cfg.vert ("[32]", block_32, [|
            Cfg.edge (35, "[39]", block_39, Z.of_string "0", Z.of_string "0");
          |]
        );
        Cfg.vert ("[33]", block_33, [|
            Cfg.edge (30, "[34]", block_34, Z.of_string "0", Z.of_string "2");
            Cfg.edge (34, "[38]", block_38, Z.of_string "3", Z.of_string "3");
          |]
        );
        Cfg.vert ("[34]", block_34, [|
            Cfg.edge (31, "[35]", block_35, Z.of_string "0", Z.of_string "1");
            Cfg.edge (34, "[38]", block_38, Z.of_string "2", Z.of_string "2");
          |]
        );
        Cfg.vert ("[35]", block_35, [|
            Cfg.edge (32, "[36]", block_36, Z.of_string "0", Z.of_string "0");
            Cfg.edge (33, "[37]", block_37, Z.of_string "1", Z.of_string "1");
          |]
        );
        Cfg.vert ("[36]", block_36, [|
            Cfg.edge (33, "[37]", block_37, Z.of_string "0", Z.of_string "0");
          |]
        );
        Cfg.vert ("[37]", block_37, [|
            Cfg.edge (35, "[39]", block_39, Z.of_string "0", Z.of_string "0");
          |]
        );
        Cfg.vert ("[38]", block_38, [|
            Cfg.edge (35, "[39]", block_39, Z.of_string "0", Z.of_string "0");
          |]
        );
        Cfg.vert ("[39]", block_39, [|
            Cfg.edge (1, "[1]", block_1, Z.of_string "0", Z.of_string "0");
          |]
        );
        Cfg.vert ("[0 | 13]", block_13, [|
            Cfg.edge (40, "[1 | 14]", block_14, Z.of_string "0", Z.of_string "15");
          |]
        );
        Cfg.vert ("[0 | 14]", block_14, [|
            Cfg.edge (36, "[0 | 13]", block_13, Z.of_string "0", Z.of_string "15");
            Cfg.edge (13, "[15]", block_15, Z.of_string "16", Z.of_string "31");
          |]
        );
        Cfg.vert ("[0 | 16]", block_16, [|
            Cfg.edge (41, "[1 | 17]", block_17, Z.of_string "0", Z.of_string "7");
          |]
        );
        Cfg.vert ("[0 | 17]", block_17, [|
            Cfg.edge (38, "[0 | 16]", block_16, Z.of_string "0", Z.of_string "7");
            Cfg.edge (14, "[18]", block_18, Z.of_string "8", Z.of_string "15");
          |]
        );
        Cfg.vert ("[1 | 14]", block_14, [|
            Cfg.edge (13, "[15]", block_15, Z.of_string "0", Z.of_string "15");
          |]
        );
        Cfg.vert ("[1 | 17]", block_17, [|
            Cfg.edge (14, "[18]", block_18, Z.of_string "0", Z.of_string "7");
          |]
        );
      |]
    )
    in Proc.proc(
     "ssl_do_connect",
      993,
     "/target/hexchat/build",
     "../src/common/server.c",
     "server.c",
      cfg
    )
  in Driver.execute main;;
  
  