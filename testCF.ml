(* AUTO-GENERATED by c2ocaml plugin 1.0 *)

open Lsee;;
open Utils;;
open State;;
open Driver;;
open Blocks;;
open Actions;;
open GccTypes;;
open Procedures;;
open Expressions;;

let main = 
(*-------------------------------------------------------- 
  // working_directory: /target/tests/tests
  // source_file_name: control-flow/1.c
  // base_name: 1.c
  // name: MOCK_ssl_do_connect
  // fid: 0
  ---------------------------------------------------------*)

  let _typeSELF = GccType.pointer(GccType.self)
  in let type0x7f19206f45e8 = 
    GccType.integer(true, 32, 32, Z.of_string "-2147483648", Z.of_string "2147483647")
  in let type0x7f19206f4f18 = 
    GccType.void
  in let expr0x7f19206e7990 = 
    Expr.ssa("_1", 1, Expr.nothing(type0x7f19206f45e8))
  in let expr0x7f19206f9078 = 
    Expr.s_int_cst(type0x7f19206f45e8, Z.of_string "0")
  in let expr0x7f19206e79d8 = 
    Expr.ssa("_2", 2, Expr.nothing(type0x7f19206f45e8))
  in let expr0x7f1921ab9e10 = 
    Expr.variable_decl(type0x7f19206f45e8, VarDecl.make("i", 32, 32))
  in let expr0x7f19206e7bd0 = 
    Expr.ssa("i_8", 8, expr0x7f1921ab9e10)
  in let expr0x7f19208361f8 = 
    Expr.ssa("i_30", 30, expr0x7f1921ab9e10)
  in let expr0x7f19208367e0 = 
    Expr.ssa("i_51", 51, expr0x7f1921ab9e10)
  in let expr0x7f192081d000 = 
    Expr.parameter_decl(type0x7f19206f45e8, "unknown_a", type0x7f19206f45e8)
  in let expr0x7f1920836240 = 
    Expr.ssa("unknown_a_31(D)", 31, expr0x7f192081d000)
  in let expr0x7f19206e7c18 = 
    Expr.ssa("i_9", 9, expr0x7f1921ab9e10)
  in let expr0x7f19208362d0 = 
    Expr.ssa("i_33", 33, expr0x7f1921ab9e10)
  in let expr0x7f1920836750 = 
    Expr.ssa("i_49", 49, expr0x7f1921ab9e10)
  in let expr0x7f192081d080 = 
    Expr.parameter_decl(type0x7f19206f45e8, "unknown_b", type0x7f19206f45e8)
  in let expr0x7f1920836318 = 
    Expr.ssa("unknown_b_34(D)", 34, expr0x7f192081d080)
  in let expr0x7f19206e7a20 = 
    Expr.ssa("_3", 3, Expr.nothing(type0x7f19206f45e8))
  in let expr0x7f192080d780 = 
    Expr.s_int_cst(type0x7f19206f45e8, Z.of_string "10")
  in let expr0x7f192080d720 = 
    Expr.s_int_cst(type0x7f19206f45e8, Z.of_string "18")
  in let expr0x7f192080d6f0 = 
    Expr.s_int_cst(type0x7f19206f45e8, Z.of_string "21")
  in let expr0x7f19206e7a68 = 
    Expr.ssa("_4", 4, Expr.nothing(type0x7f19206f45e8))
  in let expr0x7f19206e7ab0 = 
    Expr.ssa("_5", 5, Expr.nothing(type0x7f19206f45e8))
  in let expr0x7f19206e7af8 = 
    Expr.ssa("_6", 6, Expr.nothing(type0x7f19206f45e8))
  in let expr0x7f19206e7b40 = 
    Expr.ssa("_7", 7, Expr.nothing(type0x7f19206f45e8))
  in let expr0x7f19206e7c60 = 
    Expr.ssa("_10", 10, Expr.nothing(type0x7f19206f45e8))
  in let expr0x7f1920836870 = 
    Expr.ssa("_53", 53, Expr.nothing(type0x7f19206f45e8))
  in let expr0x7f1920836678 = 
    Expr.ssa("_46", 46, Expr.nothing(type0x7f19206f45e8))
  in let expr0x7f19208360d8 = 
    Expr.ssa("_26", 26, Expr.nothing(type0x7f19206f45e8))
  in let expr0x7f1920836048 = 
    Expr.ssa("_24", 24, Expr.nothing(type0x7f19206f45e8))
  in let expr0x7f19206f9090 = 
    Expr.s_int_cst(type0x7f19206f45e8, Z.of_string "1")
  in let expr0x7f192081d480 = 
    Expr.label_decl(type0x7f19206f4f18, "<L10>")
  in let expr0x7f192081d580 = 
    Expr.label_decl(type0x7f19206f4f18, "<L16>")
  in let expr0x7f192082e680 = 
    Expr.label_decl(type0x7f19206f4f18, "<L22>")
  in let expr0x7f192081d400 = 
    Expr.label_decl(type0x7f19206f4f18, "conn_fail")
  in let expr0x7f19206f93c0 = 
    Expr.s_int_cst(type0x7f19206f45e8, Z.of_string "2")
  in let expr0x7f19206f90a8 = 
    Expr.s_int_cst(type0x7f19206f45e8, Z.of_string "3")
  in let expr0x7f192082ec00 = 
    Expr.label_decl(type0x7f19206f4f18, "<L29>")
  in let call0x7f192081d880 = Expr.call(
    type0x7f19206f45e8,
    "foo_1", [|
  |])
  in let call0x7f192081d900 = Expr.call(
    type0x7f19206f45e8,
    "bar_1", [|
  |])
  in let call0x7f192081da80 = Expr.call(
    type0x7f19206f45e8,
    "bar_2", [|
  |])
  in let call0x7f192081dc00 = Expr.call(
    type0x7f19206f45e8,
    "foo_2", [|
  |])
  in let call0x7f192081dc80 = Expr.call(
    type0x7f19206f45e8,
    "baz_1", [|
  |])
  in let call0x7f192081dd00 = Expr.call(
    type0x7f19206f45e8,
    "foo_3", [|
  |])
  in let call0x7f192081dd80 = Expr.call(
    type0x7f19206f45e8,
    "baz_2", [|
  |])
  in let call0x7f192081de00 = Expr.call(
    type0x7f19206f45e8,
    "foo_4", [|
  |])
  in let call0x7f192081df00 = Expr.call(
    type0x7f19206f45e8,
    "foo_5", [|
  |])
  in let call0x7f192081df80 = Expr.call(
    type0x7f19206f45e8,
    "foo_6", [|
  |])
  in let call0x7f192082e000 = Expr.call(
    type0x7f19206f45e8,
    "bar_3", [|
  |])
  in let call0x7f192082e080 = Expr.call(
    type0x7f19206f45e8,
    "foo_7", [|
  |])
  in let call0x7f192082e100 = Expr.call(
    type0x7f19206f45e8,
    "bar_4", [|
  |])
  in let call0x7f192082e280 = Expr.call(
    type0x7f19206f45e8,
    "foo_8", [|
  |])
  in let call0x7f192082e300 = Expr.call(
    type0x7f19206f45e8,
    "bar_5", [|
  |])
  in let call0x7f192082e480 = Expr.call(
    type0x7f19206f45e8,
    "foo_9", [|
  |])
  in let call0x7f192082e580 = Expr.call(
    type0x7f19206f45e8,
    "bar_6", [|
  |])
  in let call0x7f192082e700 = Expr.call(
    type0x7f19206f45e8,
    "foo_10", [|
  |])
  in let call0x7f192082e780 = Expr.call(
    type0x7f19206f45e8,
    "foo_11", [|
  |])
  in let call0x7f192082e800 = Expr.call(
    type0x7f19206f45e8,
    "foo_12", [|
  |])
  in let call0x7f192082e880 = Expr.call(
    type0x7f19206f45e8,
    "foo_13", [|
  |])
  in let call0x7f192082e900 = Expr.call(
    type0x7f19206f45e8,
    "foo_14", [|
  |])
  in let call0x7f192082e980 = Expr.call(
    type0x7f19206f45e8,
    "bar_6", [|
  |])
  in let call0x7f192082eb00 = Expr.call(
    type0x7f19206f45e8,
    "foo_15", [|
  |])
  in let call0x7f192082eb80 = Expr.call(
    type0x7f19206f45e8,
    "foo_16", [|
  |])
  in let block_0 = 
    let step_0_0 = Action.start 
    in Block.block (
      0,
      [| step_0_0 |],
      [||],
      [| "<ENTRY>" |]
    )
  in let block_2 = 
    let step_2_1 = 
      Action.call(call0x7f192081d880)
    in let step_2_2 = 
      Action.call(call0x7f192081d900)
    in let step_2_3 = 
      Action.assign(expr0x7f19206e7990, call0x7f192081d900)
    in Block.block(
      2,
      [|
        step_2_1;
        step_2_2;
        step_2_3;
      |],
      [|
        ("bar_1", 1);
        ("foo_1", 1);
      |],
      [|
        "# .MEM_19 = VDEF <.MEM_18(D)>\nfoo_1 ();";
        "# .MEM_20 = VDEF <.MEM_19>\n_1 = bar_1 ();";
        "<CAPTURES RETURN>";
      |]
    )
  in let block_3 = 
    let step_3_4 = 
      Action.assume(2, Expr.bneq(GccType.boolean, expr0x7f19206e7990, expr0x7f19206f9078))
    in let step_3_5 = 
      Action.call(call0x7f192081da80)
    in let step_3_6 = 
      Action.assign(expr0x7f19206e79d8, call0x7f192081da80)
    in Block.block(
      3,
      [|
        step_3_4;
        step_3_5;
        step_3_6;
      |],
      [|
        ("bar_2", 1);
      |],
      [|
        "assume TRUE (_1 != 0)";
        "# .MEM_27 = VDEF <.MEM_20>\n_2 = bar_2 ();";
        "<CAPTURES RETURN>";
      |]
    )
  in let block_4 = 
    let step_4_7 = 
      Action.assume(3, Expr.beq(GccType.boolean, expr0x7f19206e79d8, expr0x7f19206f9078))
    in let step_4_8 = 
      Action.call(call0x7f192081dc00)
    in let step_4_9 = 
      Action.assign(expr0x7f19208361f8, expr0x7f19206f9078)
    in let step_4_10 = 
      Action.assign(expr0x7f19206e7bd0, expr0x7f19208361f8)
    in Block.block(
      4,
      [|
        step_4_7;
        step_4_8;
        step_4_9;
        step_4_10;
      |],
      [|
        ("foo_2", 1);
      |],
      [|
        "assume TRUE (_2 == 0)";
        "# .MEM_29 = VDEF <.MEM_27>\nfoo_2 ();";
        "i_30 = 0;";
        "i_8 = i_30";
      |]
    )
  in let block_5 = 
    let step_5_11 = 
      Action.assume(6, Expr.bneq(GccType.boolean, expr0x7f1920836240, expr0x7f19206f9078))
    in let step_5_12 = 
      Action.call(call0x7f192081dc80)
    in let step_5_13 = 
      Action.assign(expr0x7f19208367e0, Expr.plus(
        type0x7f19206f45e8, expr0x7f19206e7bd0, expr0x7f19206f9090))
    in let step_5_14 = 
      Action.assign(expr0x7f19206e7bd0, expr0x7f19208367e0)
    in Block.block(
      5,
      [|
        step_5_11;
        step_5_12;
        step_5_13;
        step_5_14;
      |],
      [|
        ("baz_1", 1);
      |],
      [|
        "assume TRUE (unknown_a_31(D) != 0)";
        "# .MEM_50 = VDEF <.MEM_11>\nbaz_1 ();";
        "i_51 = i_8 + 1;";
        "i_8 = i_51";
      |]
    )
  in let block_6 = 
    Block.block(
      6,
      [|
      |],
      [|
        (* no calls *)
      |],
      [|
      |]
    )
  in let block_7 = 
    let step_7_15 = 
      Action.assume(6, Expr.beq(GccType.boolean, expr0x7f1920836240, expr0x7f19206f9078))
    in let step_7_16 = 
      Action.call(call0x7f192081dd00)
    in let step_7_17 = 
      Action.assign(expr0x7f19208362d0, expr0x7f19206f9078)
    in let step_7_18 = 
      Action.assign(expr0x7f19206e7c18, expr0x7f19208362d0)
    in Block.block(
      7,
      [|
        step_7_15;
        step_7_16;
        step_7_17;
        step_7_18;
      |],
      [|
        ("foo_3", 1);
      |],
      [|
        "assume FALSE (unknown_a_31(D) != 0)";
        "# .MEM_32 = VDEF <.MEM_11>\nfoo_3 ();";
        "i_33 = 0;";
        "i_9 = i_33";
      |]
    )
  in let block_8 = 
    let step_8_19 = 
      Action.assume(9, Expr.bneq(GccType.boolean, expr0x7f1920836318, expr0x7f19206f9078))
    in let step_8_20 = 
      Action.call(call0x7f192081dd80)
    in let step_8_21 = 
      Action.assign(expr0x7f1920836750, Expr.plus(
        type0x7f19206f45e8, expr0x7f19206e7c18, expr0x7f19206f9090))
    in let step_8_22 = 
      Action.assign(expr0x7f19206e7c18, expr0x7f1920836750)
    in Block.block(
      8,
      [|
        step_8_19;
        step_8_20;
        step_8_21;
        step_8_22;
      |],
      [|
        ("baz_2", 1);
      |],
      [|
        "assume TRUE (unknown_b_34(D) != 0)";
        "# .MEM_48 = VDEF <.MEM_12>\nbaz_2 ();";
        "i_49 = i_9 + 1;";
        "i_9 = i_49";
      |]
    )
  in let block_9 = 
    Block.block(
      9,
      [|
      |],
      [|
        (* no calls *)
      |],
      [|
      |]
    )
  in let block_10 = 
    let step_10_23 = 
      Action.assume(9, Expr.beq(GccType.boolean, expr0x7f1920836318, expr0x7f19206f9078))
    in let step_10_24 = 
      Action.call(call0x7f192081de00)
    in Block.block(
      10,
      [|
        step_10_23;
        step_10_24;
      |],
      [|
        ("foo_4", 1);
      |],
      [|
        "assume FALSE (unknown_b_34(D) != 0)";
        "# .MEM_35 = VDEF <.MEM_12>\nfoo_4 ();";
      |]
    )
  in let block_11 = 
    let step_11_25 = 
      Action.assume(3, Expr.bneq(GccType.boolean, expr0x7f19206e79d8, expr0x7f19206f9078))
    in let step_11_26 = 
      Action.call(call0x7f192081df00)
    in Block.block(
      11,
      [|
        step_11_25;
        step_11_26;
      |],
      [|
        ("foo_5", 1);
      |],
      [|
        "assume FALSE (_2 == 0)";
        "# .MEM_28 = VDEF <.MEM_27>\nfoo_5 ();";
      |]
    )
  in let block_12 = 
    let step_12_27 = 
      Action.call(call0x7f192081df80)
    in let step_12_28 = 
      Action.call(call0x7f192082e000)
    in let step_12_29 = 
      Action.assign(expr0x7f19206e7a20, call0x7f192082e000)
    in Block.block(
      12,
      [|
        step_12_27;
        step_12_28;
        step_12_29;
      |],
      [|
        ("bar_3", 1);
        ("foo_6", 1);
      |],
      [|
        "# .MEM_36 = VDEF <.MEM_35>\nfoo_6 ();";
        "# .MEM_37 = VDEF <.MEM_36>\n_3 = bar_3 ();";
        "<CAPTURES RETURN>";
      |]
    )
  in let block_13 = 
    let step_13_30 = 
      Action.assume(12, Expr.beq(GccType.boolean, expr0x7f19206e7a20, expr0x7f19206f9078))
    in let step_13_31 = 
      Action.observe(expr0x7f192081d480)
    in let step_13_32 = 
      Action.call(call0x7f192082e080)
    in let step_13_33 = 
      Action.call(call0x7f192082e100)
    in let step_13_34 = 
      Action.assign(expr0x7f19206e7a68, call0x7f192082e100)
    in Block.block(
      13,
      [|
        step_13_30;
        step_13_31;
        step_13_32;
        step_13_33;
        step_13_34;
      |],
      [|
        ("bar_4", 1);
        ("foo_7", 1);
      |],
      [|
        "assume TRUE (_3 == 0)";
        "<L10> [0.00%]:";
        "# .MEM_40 = VDEF <.MEM_37>\nfoo_7 ();";
        "# .MEM_41 = VDEF <.MEM_40>\n_4 = bar_4 ();";
        "<CAPTURES RETURN>";
      |]
    )
  in let block_14 = 
    let step_14_35 = 
      Action.assume(13, Expr.bneq(GccType.boolean, expr0x7f19206e7a68, expr0x7f19206f9078))
    in let step_14_36 = 
      Action.call(call0x7f192082e280)
    in let step_14_37 = 
      Action.call(call0x7f192082e300)
    in let step_14_38 = 
      Action.assign(expr0x7f19206e7ab0, call0x7f192082e300)
    in Block.block(
      14,
      [|
        step_14_35;
        step_14_36;
        step_14_37;
        step_14_38;
      |],
      [|
        ("bar_5", 1);
        ("foo_8", 1);
      |],
      [|
        "assume TRUE (_4 != 0)";
        "# .MEM_42 = VDEF <.MEM_41>\nfoo_8 ();";
        "# .MEM_43 = VDEF <.MEM_42>\n_5 = bar_5 ();";
        "<CAPTURES RETURN>";
      |]
    )
  in let block_15 = 
    let step_15_39 = 
      Action.assume(14, Expr.bneq(GccType.boolean, expr0x7f19206e7ab0, expr0x7f19206f9078))
    in let step_15_40 = 
      Action.call(call0x7f192082e480)
    in Block.block(
      15,
      [|
        step_15_39;
        step_15_40;
      |],
      [|
        ("foo_9", 1);
      |],
      [|
        "assume TRUE (_5 != 0)";
        "# .MEM_44 = VDEF <.MEM_43>\nfoo_9 ();";
      |]
    )
  in let block_16 = 
    let step_16_41 = 
      Action.assume(14, Expr.beq(GccType.boolean, expr0x7f19206e7ab0, expr0x7f19206f9078))
    in Block.block(
      16,
      [|
        step_16_41;
      |],
      [|
        (* no calls *)
      |],
      [|
        "assume FALSE (_5 != 0)";
      |]
    )
  in let block_17 = 
    let step_17_42 = 
      Action.assume(13, Expr.beq(GccType.boolean, expr0x7f19206e7a68, expr0x7f19206f9078))
    in Block.block(
      17,
      [|
        step_17_42;
      |],
      [|
        (* no calls *)
      |],
      [|
        "assume FALSE (_4 != 0)";
      |]
    )
  in let block_18 = 
    let step_18_43 = 
      Action.assume(12, Expr.beq(GccType.boolean, expr0x7f19206e7a20, expr0x7f192080d780))
    in let step_18_44 = 
      Action.assume(12, Expr.inrange(GccType.boolean, expr0x7f19206e7a20,expr0x7f192080d720,expr0x7f192080d6f0))
    in let step_18_45 = 
      Action.observe(expr0x7f192081d580)
    in let step_18_46 = 
      Action.call(call0x7f192082e580)
    in let step_18_47 = 
      Action.assign(expr0x7f19206e7af8, call0x7f192082e580)
    in Block.block(
      18,
      [|
        step_18_43;
        step_18_44;
        step_18_45;
        step_18_46;
        step_18_47;
      |],
      [|
        ("bar_6", 1);
      |],
      [|
        "assume TRUE (_3 == 10)";
        "assume TRUE (_3 >= 18 and _3 <= 21)";
        "<L16> [0.00%]:";
        "# .MEM_38 = VDEF <.MEM_37>\n_6 = bar_6 ();";
        "<CAPTURES RETURN>";
      |]
    )
  in let block_19 = 
    let step_19_48 = 
      Action.assume(18, Expr.bneq(GccType.boolean, expr0x7f19206e7af8, expr0x7f19206f9078))
    in let step_19_49 = 
      Action.call(call0x7f192082e700)
    in Block.block(
      19,
      [|
        step_19_48;
        step_19_49;
      |],
      [|
        ("foo_10", 1);
      |],
      [|
        "assume TRUE (_6 != 0)";
        "# .MEM_39 = VDEF <.MEM_38>\nfoo_10 ();";
      |]
    )
  in let block_20 = 
    let step_20_50 = 
      Action.assume(12, Expr.bnot(GccType.boolean, Expr.bor(GccType.boolean, Expr.beq(GccType.boolean, expr0x7f19206e7a20, expr0x7f19206f9078), Expr.bor(GccType.boolean, Expr.beq(GccType.boolean, expr0x7f19206e7a20, expr0x7f192080d780), Expr.inrange(GccType.boolean, expr0x7f19206e7a20, expr0x7f192080d720, expr0x7f192080d6f0)))))
    in let step_20_51 = 
      Action.assume(18, Expr.beq(GccType.boolean, expr0x7f19206e7af8, expr0x7f19206f9078))
    in let step_20_52 = 
      Action.observe(expr0x7f192082e680)
    in let step_20_53 = 
      Action.call(call0x7f192082e780)
    in Block.block(
      20,
      [|
        step_20_50;
        step_20_51;
        step_20_52;
        step_20_53;
      |],
      [|
        ("foo_11", 1);
      |],
      [|
        "assume FALSE ((_3 == 0) or (_3 == 10) or (_3 >= 18 and _3 <= 21))";
        "assume FALSE (_6 != 0)";
        "<L22> [0.00%]:";
        "# .MEM_47 = VDEF <.MEM_14>\nfoo_11 ();";
      |]
    )
  in let block_21 = 
    let step_21_54 = 
      Action.observe(expr0x7f192081d400)
    in let step_21_55 = 
      Action.call(call0x7f192082e800)
    in let step_21_56 = 
      Action.assign(expr0x7f1920836870, expr0x7f19206f9078)
    in let step_21_57 = 
      Action.assign(expr0x7f19206e7c60, expr0x7f1920836870)
    in Block.block(
      21,
      [|
        step_21_54;
        step_21_55;
        step_21_56;
        step_21_57;
      |],
      [|
        ("foo_12", 1);
      |],
      [|
        "conn_fail [0.00%]:";
        "# .MEM_52 = VDEF <.MEM_15>\nfoo_12 ();";
        "_53 = 0;";
        "_10 = _53";
      |]
    )
  in let block_22 = 
    let step_22_58 = 
      Action.call(call0x7f192082e880)
    in let step_22_59 = 
      Action.assign(expr0x7f1920836678, expr0x7f19206f9090)
    in let step_22_60 = 
      Action.assign(expr0x7f19206e7c60, expr0x7f1920836678)
    in Block.block(
      22,
      [|
        step_22_58;
        step_22_59;
        step_22_60;
      |],
      [|
        ("foo_13", 1);
      |],
      [|
        "# .MEM_45 = VDEF <.MEM_16>\nfoo_13 ();";
        "_46 = 1;";
        "_10 = _46";
      |]
    )
  in let block_23 = 
    let step_23_61 = 
      Action.assume(2, Expr.beq(GccType.boolean, expr0x7f19206e7990, expr0x7f19206f9078))
    in let step_23_62 = 
      Action.call(call0x7f192082e900)
    in let step_23_63 = 
      Action.call(call0x7f192082e980)
    in let step_23_64 = 
      Action.assign(expr0x7f19206e7b40, call0x7f192082e980)
    in Block.block(
      23,
      [|
        step_23_61;
        step_23_62;
        step_23_63;
        step_23_64;
      |],
      [|
        ("bar_6", 1);
        ("foo_14", 1);
      |],
      [|
        "assume FALSE (_1 != 0)";
        "# .MEM_21 = VDEF <.MEM_20>\nfoo_14 ();";
        "# .MEM_22 = VDEF <.MEM_21>\n_7 = bar_6 ();";
        "<CAPTURES RETURN>";
      |]
    )
  in let block_24 = 
    let step_24_65 = 
      Action.assume(23, Expr.bneq(GccType.boolean, expr0x7f19206e7b40, expr0x7f19206f9078))
    in let step_24_66 = 
      Action.call(call0x7f192082eb00)
    in let step_24_67 = 
      Action.assign(expr0x7f19208360d8, expr0x7f19206f93c0)
    in let step_24_68 = 
      Action.assign(expr0x7f19206e7c60, expr0x7f19208360d8)
    in Block.block(
      24,
      [|
        step_24_65;
        step_24_66;
        step_24_67;
        step_24_68;
      |],
      [|
        ("foo_15", 1);
      |],
      [|
        "assume TRUE (_7 != 0)";
        "# .MEM_25 = VDEF <.MEM_22>\nfoo_15 ();";
        "_26 = 2;";
        "_10 = _26";
      |]
    )
  in let block_25 = 
    let step_25_69 = 
      Action.assume(23, Expr.beq(GccType.boolean, expr0x7f19206e7b40, expr0x7f19206f9078))
    in let step_25_70 = 
      Action.call(call0x7f192082eb80)
    in let step_25_71 = 
      Action.assign(expr0x7f1920836048, expr0x7f19206f90a8)
    in let step_25_72 = 
      Action.assign(expr0x7f19206e7c60, expr0x7f1920836048)
    in Block.block(
      25,
      [|
        step_25_69;
        step_25_70;
        step_25_71;
        step_25_72;
      |],
      [|
        ("foo_16", 1);
      |],
      [|
        "assume FALSE (_7 != 0)";
        "# .MEM_23 = VDEF <.MEM_22>\nfoo_16 ();";
        "_24 = 3;";
        "_10 = _24";
      |]
    )
  in let block_26 = 
    let step_26_73 = 
      Action.observe(expr0x7f192082ec00)
    in let step_26_74 = 
      Action.return(expr0x7f19206e7c60)
    in Block.block(
      26,
      [|
        step_26_73;
        step_26_74;
      |],
      [|
        (* no calls *)
      |],
      [|
        "<L29> [0.00%]:";
        "# VUSE <.MEM_17>\nreturn _10;";
      |]
    )
  in let block_1 = 
    let step_0_75 = Action.finish 
    in Block.block (
      1,
      [| step_0_75 |],
      [||],
      [| "<EXIT>" |]
    )
  in let cfg = Cfg.cfg (
    27,
    Z.of_string "27",
    [|
      Cfg.vert ("[0]", block_0, [|
          Cfg.edge (2, "[2]", block_2, Z.of_string "0", Z.of_string "26");
        |]
      );
      Cfg.vert ("[1]", block_1, [|
        |]
      );
      Cfg.vert ("[2]", block_2, [|
          Cfg.edge (3, "[3]", block_3, Z.of_string "0", Z.of_string "24");
          Cfg.edge (19, "[23]", block_23, Z.of_string "25", Z.of_string "26");
        |]
      );
      Cfg.vert ("[3]", block_3, [|
          Cfg.edge (4, "[4]", block_4, Z.of_string "0", Z.of_string "23");
          Cfg.edge (7, "[11]", block_11, Z.of_string "24", Z.of_string "24");
        |]
      );
      Cfg.vert ("[4]", block_4, [|
          Cfg.edge (24, "[0 | 6]", block_6, Z.of_string "0", Z.of_string "23");
        |]
      );
      Cfg.vert ("[7]", block_7, [|
          Cfg.edge (26, "[0 | 9]", block_9, Z.of_string "0", Z.of_string "11");
        |]
      );
      Cfg.vert ("[10]", block_10, [|
          Cfg.edge (8, "[12]", block_12, Z.of_string "0", Z.of_string "5");
        |]
      );
      Cfg.vert ("[11]", block_11, [|
          Cfg.edge (17, "[21]", block_21, Z.of_string "0", Z.of_string "0");
        |]
      );
      Cfg.vert ("[12]", block_12, [|
          Cfg.edge (9, "[13]", block_13, Z.of_string "0", Z.of_string "2");
          Cfg.edge (14, "[18]", block_18, Z.of_string "3", Z.of_string "4");
          Cfg.edge (16, "[20]", block_20, Z.of_string "5", Z.of_string "5");
        |]
      );
      Cfg.vert ("[13]", block_13, [|
          Cfg.edge (10, "[14]", block_14, Z.of_string "0", Z.of_string "1");
          Cfg.edge (13, "[17]", block_17, Z.of_string "2", Z.of_string "2");
        |]
      );
      Cfg.vert ("[14]", block_14, [|
          Cfg.edge (11, "[15]", block_15, Z.of_string "0", Z.of_string "0");
          Cfg.edge (12, "[16]", block_16, Z.of_string "1", Z.of_string "1");
        |]
      );
      Cfg.vert ("[15]", block_15, [|
          Cfg.edge (13, "[17]", block_17, Z.of_string "0", Z.of_string "0");
        |]
      );
      Cfg.vert ("[16]", block_16, [|
          Cfg.edge (17, "[21]", block_21, Z.of_string "0", Z.of_string "0");
        |]
      );
      Cfg.vert ("[17]", block_17, [|
          Cfg.edge (18, "[22]", block_22, Z.of_string "0", Z.of_string "0");
        |]
      );
      Cfg.vert ("[18]", block_18, [|
          Cfg.edge (15, "[19]", block_19, Z.of_string "0", Z.of_string "0");
          Cfg.edge (16, "[20]", block_20, Z.of_string "1", Z.of_string "1");
        |]
      );
      Cfg.vert ("[19]", block_19, [|
          Cfg.edge (18, "[22]", block_22, Z.of_string "0", Z.of_string "0");
        |]
      );
      Cfg.vert ("[20]", block_20, [|
          Cfg.edge (17, "[21]", block_21, Z.of_string "0", Z.of_string "0");
        |]
      );
      Cfg.vert ("[21]", block_21, [|
          Cfg.edge (22, "[26]", block_26, Z.of_string "0", Z.of_string "0");
        |]
      );
      Cfg.vert ("[22]", block_22, [|
          Cfg.edge (22, "[26]", block_26, Z.of_string "0", Z.of_string "0");
        |]
      );
      Cfg.vert ("[23]", block_23, [|
          Cfg.edge (20, "[24]", block_24, Z.of_string "0", Z.of_string "0");
          Cfg.edge (21, "[25]", block_25, Z.of_string "1", Z.of_string "1");
        |]
      );
      Cfg.vert ("[24]", block_24, [|
          Cfg.edge (22, "[26]", block_26, Z.of_string "0", Z.of_string "0");
        |]
      );
      Cfg.vert ("[25]", block_25, [|
          Cfg.edge (22, "[26]", block_26, Z.of_string "0", Z.of_string "0");
        |]
      );
      Cfg.vert ("[26]", block_26, [|
          Cfg.edge (1, "[1]", block_1, Z.of_string "0", Z.of_string "0");
        |]
      );
      Cfg.vert ("[0 | 5]", block_5, [|
          Cfg.edge (27, "[1 | 6]", block_6, Z.of_string "0", Z.of_string "11");
        |]
      );
      Cfg.vert ("[0 | 6]", block_6, [|
          Cfg.edge (23, "[0 | 5]", block_5, Z.of_string "0", Z.of_string "11");
          Cfg.edge (5, "[7]", block_7, Z.of_string "12", Z.of_string "23");
        |]
      );
      Cfg.vert ("[0 | 8]", block_8, [|
          Cfg.edge (28, "[1 | 9]", block_9, Z.of_string "0", Z.of_string "5");
        |]
      );
      Cfg.vert ("[0 | 9]", block_9, [|
          Cfg.edge (25, "[0 | 8]", block_8, Z.of_string "0", Z.of_string "5");
          Cfg.edge (6, "[10]", block_10, Z.of_string "6", Z.of_string "11");
        |]
      );
      Cfg.vert ("[1 | 6]", block_6, [|
          Cfg.edge (5, "[7]", block_7, Z.of_string "0", Z.of_string "11");
        |]
      );
      Cfg.vert ("[1 | 9]", block_9, [|
          Cfg.edge (6, "[10]", block_10, Z.of_string "0", Z.of_string "5");
        |]
      );
    |]
  )
  in Proc.proc(
   "MOCK_ssl_do_connect",
    0,
   "/target/tests/tests",
   "control-flow/1.c",
   "1.c",
    cfg
  )
in Driver.execute main;;

